<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>코딩만 잘하면 될까? - Articles</title>
    <description>A beautiful narrative written with the world's most elegant publishing platform. The story begins here.</description>
    <link>
    </link>
    
      
      <item>
        <title>TDD, 리펙토링이란?</title>
        
          <description>&lt;h2 id=&quot;test-driven-development테스트-주도-개발-tdd&quot;&gt;Test Driven Development(테스트 주도 개발, TDD)&lt;/h2&gt;

</description>
        
        <pubDate>Sun, 21 Feb 2021 10:18:00 +0000</pubDate>
        <link>
        /tdd</link>
        <guid isPermaLink="true">/tdd</guid>
      </item>
      
    
      
      <item>
        <title>[동적계획법] 이항계수</title>
        
          <description>&lt;p&gt;이런 말이 있다.&lt;/p&gt;

</description>
        
        <pubDate>Thu, 24 Sep 2020 10:18:00 +0000</pubDate>
        <link>
        /binomial-coefficient</link>
        <guid isPermaLink="true">/binomial-coefficient</guid>
      </item>
      
    
      
      <item>
        <title>재귀 vs. 반복</title>
        
          <description>&lt;p&gt;&lt;strong&gt;Binary Search&lt;/strong&gt; 이분탐색을 구현하면서, 계속 런타임 에러가 났다. 처음에 재귀로 구현을 시작했는데, 재귀에 너무 큰 값이 들어오면서 stack overflow 에러가 났나 싶어서 다시 while 문으로 구현했다. 하지만 while 문으로 구현한 이후에도 계속 런타임 에러가 떠서 확인해보니, n과 m을 헷갈려서 잘못 적었던 것이었다.&lt;/p&gt;

</description>
        
        <pubDate>Fri, 11 Sep 2020 10:18:00 +0000</pubDate>
        <link>
        /recursion</link>
        <guid isPermaLink="true">/recursion</guid>
      </item>
      
    
      
      <item>
        <title>[알고리즘] 세그먼트 트리를 활용한 히스토그램 문제 풀이_2</title>
        
          <description>&lt;p&gt;앞서 &lt;a href=&quot;https://www.acmicpc.net/problem/6549&quot;&gt;히스토그램 문제&lt;/a&gt;에 대한 접근 방법을 간단하게 설명하고 세그먼트 트리를 히스토그램에 맞추어서 설명했다. 이번 글에서는 구체적으로 어떻게 세그먼트 트리를 구현하여 히스토그램 문제를 푸는데까지 이어지는지 다루어 보도록 하겠다.&lt;/p&gt;

</description>
        
        <pubDate>Thu, 10 Sep 2020 10:18:00 +0000</pubDate>
        <link>
        /segment-tree2</link>
        <guid isPermaLink="true">/segment-tree2</guid>
      </item>
      
    
      
      <item>
        <title>[알고리즘] 세그먼트 트리를 활용한 히스토그램 문제 풀이_1</title>
        
          <description>&lt;p&gt;히스토그램에서 가장 큰 직사각형의 크기를 찾는 알고리즘을 풀다가, 관련 문제의 풀이법을 간단히 찾아서 금방 해결할 줄 알았으니 구현에서 의도치 않은 오랜 시간이 걸렸다.&lt;/p&gt;

</description>
        
        <pubDate>Wed, 09 Sep 2020 10:18:00 +0000</pubDate>
        <link>
        /segment-tree1</link>
        <guid isPermaLink="true">/segment-tree1</guid>
      </item>
      
    
      
      <item>
        <title>[알고리즘] 이진탐색 응용: UpperBound와 LowerBound</title>
        
          <description>&lt;p&gt;이진탐색의 응용 버전으로 상/하한선을 찾는 알고리즘이다. 이를 응용한 &lt;a href=&quot;https://www.acmicpc.net/problem/10816&quot;&gt;문제&lt;/a&gt;를 풀면서 배운 개념을 정리해둔다.&lt;/p&gt;

</description>
        
        <pubDate>Fri, 04 Sep 2020 10:18:00 +0000</pubDate>
        <link>
        /bin-search-bound</link>
        <guid isPermaLink="true">/bin-search-bound</guid>
      </item>
      
    
      
      <item>
        <title>[머신러닝] 딥러닝 영화 개인화 추천 - Part.3</title>
        
          <description>&lt;p&gt;영화 개인화 추천 포스트의 마지막 파트이다. 이전까지는 데이터를 입력받아서 전처리하고, 모델을 구축하여 학습의 원리에 대해서 간략하게 알아보았다. 결국 학습을 하면서 loss 값을 optimizing 하는 과정에서 학습된 사용자의 영화에 대한 예측 평점인 y_hat이 출력되는 것인데, 검증셋에 대해서 출력된 y_hat의 값에 대해서 어느 정도의 후처리를 하여 사용자에게 추천할 영화 리스트를 선별하는 작업이 필요하다. 이번 포스트는 학습된 모델을 가지고 검증 및 테스트를 진행한 후에 모델에서 출력한 예측 평점에 대해서 사용자에게 추천할 영화 리스트를 추출하는 작업에 대해서 이야기해보자.&lt;/p&gt;

</description>
        
        <pubDate>Mon, 24 Aug 2020 10:18:00 +0000</pubDate>
        <link>
        /movie-dlrm-3</link>
        <guid isPermaLink="true">/movie-dlrm-3</guid>
      </item>
      
    
      
      <item>
        <title>[머신러닝] 딥러닝 영화 개인화 추천 - Part.2</title>
        
          <description>&lt;p&gt;이어서 딥러닝 영화 개인화 추천 모델을 구현하면서 구축한 딥러닝 협업 필터링 모델 부분에 대한 코드를 살펴보면서 딥러닝 전체적인 흐름에 대해서 짚어보자. 앞에서 언급했듯이 코드는 다음 &lt;a href=&quot;https://jyoondev.tistory.com/65?category=823946&quot;&gt;링크&lt;/a&gt;에서 참고하여 모델과 전체적인 데이터 처리를 진행했고, 이후에 학습된 output에 대한 데이터 및 결과 후처리는 추가 구현했다. 해당 부분은 다음 파트에 다루도록 하겠다.&lt;/p&gt;

</description>
        
        <pubDate>Sat, 22 Aug 2020 10:18:00 +0000</pubDate>
        <link>
        /movie-dlrm-2</link>
        <guid isPermaLink="true">/movie-dlrm-2</guid>
      </item>
      
    
      
      <item>
        <title>[머신러닝] 딥러닝 영화 개인화 추천 - Part.1</title>
        
          <description>&lt;p&gt;인턴을 하는 중에 요즘에 중요한 머신러닝의 한 분야가 되고 있는 개인화 추천에 대한 개발을 맡게 되었다. 요즘 넷플릭스, 왓챠와 같은 OTT 서비스는 물론이고, SNS에 표기되는 광고, 당근마켓 등등과 같은 중고거래 및 쇼핑 어플리케이션에서도 중요한 것이 사용자의 취향을 분석하여서 알맞은 아이템을 추천하는 기술이 핵심이다. 어쩌면 사용자가 의식적으로 파악하고 있는 이상의 취향을 파악해서 추천해야 할 때도 있다. 이전 포스트에서 다루었듯이 개인화 추천에는 여러 통계기반 머신러닝 기법들이 있다. 그리고 인공 신경망이라는 딥러닝 기법이 등장하게 되면서 더욱 세밀하고 정확한 개인화 추천이 가능해졌다.&lt;/p&gt;

</description>
        
        <pubDate>Fri, 21 Aug 2020 10:18:00 +0000</pubDate>
        <link>
        /movie-dlrm-1</link>
        <guid isPermaLink="true">/movie-dlrm-1</guid>
      </item>
      
    
      
      <item>
        <title>[알고리즘] 쿼드 트리</title>
        
          <description>&lt;p&gt;자료구조 중 처음 들어본 &lt;small&gt;(배웠는데 기억 못하는)&lt;/small&gt; 개념이 나와서 정리해본다. 알고리즘 문제 중 분할 문제를 푸는 중에 쿼드 트리를 사용하는 알고리즘 이라는 언급을 보고 쿼드 트리라는 것이 어떠한 것인지 살펴보기로 한다.&lt;/p&gt;

</description>
        
        <pubDate>Wed, 12 Aug 2020 10:18:00 +0000</pubDate>
        <link>
        /quadTree</link>
        <guid isPermaLink="true">/quadTree</guid>
      </item>
      
    
      
      <item>
        <title>[머신러닝] 추천 시스템 기술</title>
        
          <description>&lt;p&gt;모 기업에서 인턴을 하면서 맡은 업무가 &lt;mark&gt;개인화 추천 모델 구현&lt;/mark&gt;이었다. 맡은 업무는 딥러닝 기반의 개인화 추천 모델을 제작하는 것이지만 기존에 회사에서 가지고 있는 추천 시스템의 경우 협업 필터링 등으로 이미 구현이 되어 있었기 때문에 간단히 개인화 추천 시스템에 대한 브리핑을 해주시면서 감을 잡을 수 있도록 해주셨다.&lt;/p&gt;

</description>
        
        <pubDate>Mon, 10 Aug 2020 10:18:00 +0000</pubDate>
        <link>
        /ml-recommendation-system</link>
        <guid isPermaLink="true">/ml-recommendation-system</guid>
      </item>
      
    
      
      <item>
        <title>[머신러닝]나이브 베이즈 분류기(Naive Bayes Classifier)</title>
        
          <description>&lt;p&gt;강남의 어느 검색 솔루션 기업에서 인턴한지 어연 4주차가 지나간다. 중간 지점을 지나가면서 한 것을 정리할 겸 나이브베이즈 문서 분류기 구현과 이론에 대해서 정리해 보려고 한다. &lt;small&gt;최대한 쉽게!!&lt;/small&gt;&lt;/p&gt;

</description>
        
        <pubDate>Fri, 24 Jul 2020 10:18:00 +0000</pubDate>
        <link>
        /naivebayes</link>
        <guid isPermaLink="true">/naivebayes</guid>
      </item>
      
    
  </channel>
</rss>
