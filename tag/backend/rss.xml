<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>yjksw.github.io/</title>
   
   <link></link>
   <description>A beautiful narrative written with the world's most elegant publishing platform. The story begins here.</description>
   <language>en-uk</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>[백엔드] JPA 란?</title>
	  <link>//jpa</link>
	  <author></author>
	  <pubDate>2020-09-23T10:18:00+00:00</pubDate>
	  <guid>//jpa</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h2 id="jpajava-persistent-api">JPA(Java Persistent API)</h2>

<ul>
  <li>ORM(Object Relational Mapping)으로, RDB 데이터 베이스의 정보를 객체지향으로 활용할 수 있도록 해주는 도구.</li>
  <li>Object(자바 객체)와 Relation(관계형 데이터베이스) 간의 맵핑을 통해서 손쉽게 기술을 적용할 수 있도록 함.</li>
  <li>쿼리에 집중하기 보다, 객체에 집중하므로 프로그래밍으로 많이 활용 가능.</li>
</ul>

<h2 id="mysql-workbench-에서-테이블-생성하기">MySQL Workbench 에서 테이블 생성하기</h2>

<ol>
  <li>Mysql.server start 통해서 서버가 실행되고 있는지 확인.</li>
  <li>MySql workbench에서 스키마로 가서 스키마 생성 후 테이블을 생성</li>
  <li>각 테이블에 column 들을 정의함.</li>
</ol>

<h2 id="intellij-에서-jpa-설정하기">Intellij 에서 JPA 설정하기</h2>

<ol>
  <li>build.gradle에 가서 dependency 추가.
    <ul>
      <li>이후 오른쪽에 gradle &gt; build &gt; clean 누른 후에, dependencies가 추가되는 것을 확인.</li>
    </ul>
  </li>
  <li>Resource &gt; <a href="http://application.properties">application.properties</a> &gt; db source url, response name, response password 입력(yjsql)</li>
  <li>다시 실행해서 실행되는 것 확인함.</li>
</ol>

	  ]]></description>
	</item>

	<item>
	  <title>[백엔드] Rest API 란?</title>
	  <link>//rest-api</link>
	  <author></author>
	  <pubDate>2020-09-22T10:18:00+00:00</pubDate>
	  <guid>//rest-api</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="http---get-method">HTTP - GET Method</h3>

<p>주소창에 parameter 노출</p>

<p>브라우저에서 주소에 대한 캐시가 이루어지므로, 정보를 얻을 때 사용.</p>

<ul>
  <li>
    <p>Get Method에서 parameter 받기</p>

    <p>parameter로 각각 변수를 받아서 받아내면 됌.</p>

    <p>여러가지로 변수가 늘어가는 상황:</p>

    <ul>
      <li>너무 변수가 많다면 parameter를 모두 써서 받기 어려울 수 있다.</li>
      <li>객체로 받을 수 있는 방법:
        <ul>
          <li>따로 변수를 받는 class를 생성함. (getter, setter 와 함께 하고, parameter를 클래스 객체로 받는다.)</li>
          <li>jackson library 로 인해 객체를 리턴하면 자동적으로 json으로 변환이 되어서 return 이 됌.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p>메소드에 대해서 두 주소가 같다면, spring boot는 실행을 시키지 못함.</p>

<h3 id="http---post-method">HTTP - POST Method</h3>

<p>주소창에 parameter 노출 없음.</p>

<p>브라우저가 주소 캐시를 하지 못하는 특성이 있음.</p>

<p>@PostingMapping을 통해서 postMethod를 구현할 수 있음.</p>

<p>객체에 json으로 mapping 시켜줄 수 있음.</p>

<h3 id="http---putpatch-method">HTTP - PUT/PATCH Method</h3>

<p>POST 와 마찬가지로 BODY에 데이터가 있으며, 주로 업데이트를 요청함.</p>

<h3 id="http---delete-method">HTTP - DELETE Method</h3>

<p>GET 과 마찬가지로 parameter로 동작하며, 주로 삭제를 요청함.</p>

<p><br /></p>

<h2 id="그래서-rest-api-란">그래서, REST API 란?</h2>

<h3 id="rest의-개념">REST의 개념:</h3>

<ul>
  <li>HTTP 프로토콜에 있는 Method를 활용한 아키텍처 스타일</li>
  <li>HTTP method를 통해서 resource를 처리하는 것임.</li>
  <li>CRUD를 통해서 resource를 조작할 때 사용함.</li>
</ul>

<p><a href="https://www.notion.so/36cea78138d54d4ba5eae244ffdb2d29">REST</a></p>

<p>중요한 것은 어떻게 URL 에서 데이터를 꺼내올 것이며, 어떻게 다시 웹 사이트에 return 할 것인가 이다.</p>

	  ]]></description>
	</item>

	<item>
	  <title>[백엔드] Entity 생성과 Repository</title>
	  <link>//entity-n-repository</link>
	  <author></author>
	  <pubDate>2020-09-22T10:18:00+00:00</pubDate>
	  <guid>//entity-n-repository</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h2 id="naming-convention">Naming Convention</h2>

<p>Camel Case: 단어 첫 문자는 소문자, 띄어쓰기 대신 대문자로 구분함. JAVA 변수 선언 시 사용함.</p>

<p>ex. phoneNumber</p>

<p>Snake Case: 단어는 모두 소문자, 띄어쓰기 대신(_)로 구분함. DB 칼럼에 사용.</p>

<p>ex. phone_number, created_at</p>

<p>API 정의하기에 따라 다르지만, 주로 API 통신 규격에는 구간에서는 Snake Case를 많이 사용함.</p>

<h2 id="entity">Entity</h2>

<p>JPA에서 entity는 DB의 테이블과 매우 유사하다. (DB Table == JPA Entity)</p>

<ul>
  <li>Entity: JPA에서 테이블을 자동으로 생성해주는 기능 존재.</li>
</ul>

<p><a href="https://www.notion.so/4a74e1bd924f484cace3700cc1d12605">Entity</a></p>

<h3 id="entity-설정하기">Entity 설정하기</h3>

<ol>
  <li>이전에 SQL에서 만든 table 이름과 동일한 이름의 class 를 생성함.</li>
  <li>@Entity annotation을 통해서 해당 클래스가 Entity임을 명시함.</li>
  <li>DB table에 있는 변수과 같은 이름을 가진 변수를 선언함(변수-camelCase, 칼럼-snake_case)</li>
  <li>@ID 와 @GeneratedValue를 통해서 primary key 설정을 해줌.</li>
</ol>

<p><img src="https://user-images.githubusercontent.com/63405904/114304509-82214d00-9b0e-11eb-9949-81d6094e631f.png" alt="image" width="80%" /></p>

<h2 id="repository">Repository</h2>

<p>따로 쿼리문을 작성하지 않아도 기본적인 인터페이스로 CRUD를 작성할 수 있다.</p>

<ul>
  <li>사용 방법: 매우 간단함. 아래와 같이 인터페이스에 @Repository annotation을 달아 주고, JpaRepository&lt;T, ID&gt; 을 달아 주면 된다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Repository</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserRepository</span> <span class="kd">extends</span> <span class="n">JpaRepository</span><span class="o">&lt;</span><span class="n">User</span><span class="o">,</span><span class="n">Long</span><span class="o">&gt;</span> <span class="o">{</span>
	<span class="c1">//여기서 &lt;T, ID&gt; =&gt; T는 어떤 타입의 Entity 인지 / ID 는 식별자의 type에 대해서 적음. </span>
<span class="o">}</span>
</code></pre></div></div>

	  ]]></description>
	</item>


</channel>
</rss>
