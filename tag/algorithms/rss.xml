<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>yjksw.github.io/</title>
   
   <link></link>
   <description>A beautiful narrative written with the world's most elegant publishing platform. The story begins here.</description>
   <language>en-uk</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>[동적계획법] 이항계수</title>
	  <link>//binomial-coefficient</link>
	  <author></author>
	  <pubDate>2020-09-24T10:18:00+00:00</pubDate>
	  <guid>//binomial-coefficient</guid>
	  <description><![CDATA[
	     <p>이런 말이 있다.</p>

<blockquote>
  <p>동적 계획법이라는 말은 전문가들이 전문가들처럼 보여줄 수 있도록 해주는 말이고 일반인들에게는 그냥 ‘기억해서 풀기’ 다.</p>
</blockquote>

<p>이항계수에 관련한 성질은 기억해두면 이후 코딩이나 알고리즘 문제를 풀 때 유용하기 때문에 기록해 준다. 이항계수를 풀 때 중요한 성질은 다음과 같다. 
<script type="math/tex">{n \choose k} = {n \choose n-k}</script></p>

<script type="math/tex; mode=display">{n \choose k} = {n-1 \choose k} + {n-1 \choose k-1}</script>

<script type="math/tex; mode=display">\sum_{k=1}^n {n \choose k} = 2^n</script>

<p>위의 공식은 이항계수의 정의식을 참고해서 유도하는 방법으로 이항 계수의 정의식을 알고 있어야 한다.
<script type="math/tex">{n \choose k} = _{n}\mathrm{C}_{k} = \frac{n!}{(n-k)!k!}</script></p>

<h3 id="동적-계획법을-활용한-이항계수-풀이">동적 계획법을 활용한 이항계수 풀이</h3>

<p>이항계수에 관련한 알고리즘 문제를 풀기 위해서 이항계수의 2번째 성질을 이용하기로 한다. 그 이유는 2번째 성질이 동적 계획법 활용에 알맞게 더 작은 부분으로 분할하여 정복 할 수 있는 성질을 잘 드러내고 있기 때문이다. 다음 방법을 사용해서 알고리즘을 풀어보자.</p>

<p>여기서 일반 재귀나 분할 정복보다 동적 계획법에 알맞게 진행하기 위해서 memoization을 사용한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//DAC</span>
<span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span><span class="o">{</span>
	<span class="kd">static</span> <span class="kt">long</span><span class="o">[][]</span> <span class="n">value</span><span class="o">;</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
		<span class="n">Scanner</span> <span class="n">sc</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
		<span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>

		<span class="n">value</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">long</span><span class="o">[</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="o">][</span><span class="n">k</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>

		<span class="n">coef</span><span class="o">(</span><span class="n">n</span><span class="o">,</span> <span class="n">k</span><span class="o">);</span>
		<span class="kt">long</span> <span class="n">result</span> <span class="o">=</span> <span class="n">value</span><span class="o">[</span><span class="n">n</span><span class="o">][</span><span class="n">k</span><span class="o">];</span>
		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">coef</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">){</span>
		<span class="k">if</span> <span class="o">(</span><span class="n">a</span><span class="o">==</span><span class="n">b</span><span class="o">){</span>
			<span class="n">value</span><span class="o">[</span><span class="n">a</span><span class="o">][</span><span class="n">b</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
			<span class="k">return</span><span class="o">;</span>
		<span class="o">}</span>
		<span class="k">if</span> <span class="o">(</span><span class="n">b</span><span class="o">==</span><span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">value</span><span class="o">[</span><span class="n">a</span><span class="o">][</span><span class="n">b</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
			<span class="k">return</span><span class="o">;</span>
		<span class="o">}</span>
		<span class="k">else</span> <span class="o">{</span>
      
			<span class="k">if</span><span class="o">(</span><span class="n">value</span><span class="o">[</span><span class="n">a</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="n">b</span><span class="o">]</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
				<span class="n">coef</span><span class="o">(</span><span class="n">a</span><span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="n">b</span><span class="o">);</span>
			<span class="k">if</span><span class="o">(</span><span class="n">value</span><span class="o">[</span><span class="n">a</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="n">b</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> 
				<span class="n">coef</span><span class="o">(</span><span class="n">a</span><span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="n">b</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span>
			<span class="n">value</span><span class="o">[</span><span class="n">a</span><span class="o">][</span><span class="n">b</span><span class="o">]</span> <span class="o">=</span> <span class="n">value</span><span class="o">[</span><span class="n">a</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="n">b</span><span class="o">]</span> <span class="o">+</span> <span class="n">value</span><span class="o">[</span><span class="n">a</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="n">b</span><span class="o">-</span><span class="mi">1</span><span class="o">];</span>
			<span class="k">return</span><span class="o">;</span>
		<span class="o">}</span>
	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<p>단순히 이항계수의 정의를 이용한 유도식을 재귀를 통해서 구현한 것이다. 다음과 같이 구현하면 작은 숫자들에 대해서는 충분히 답을 낼 수 있지만 숫자가 커지게 되면 할당해야 하는 배열의 크기가 기하급수적으로 커지게되고, 그 결과 값 또한 long 타입으로도 담을 수 없기 때문에 매우 제한적이다. 따라서 <a href="https://www.acmicpc.net/problem/11401">백준 11401</a>에서는 이항계수를 소수인 1,000,000,007로 나눈 프로그램을 작성하도록 되어 있다. 그 연산에 대해서는 2가지 접근 방법이 있다.</p>

<p>우선, 왜 위에서 소개한 이항계수 정의식에 바로 % 1,000,000,007을 하지 않는지에 대한 이유를 짚고 넘어가야 한다. 이항계수 정의식은 분수꼴이기 때문에 소수 p로 % 연산을 했을 때 분자와 분모에 나뉘어서 적용되지 않는다. 
<script type="math/tex">\frac{N!}{K!(N-K)!}\%p\qquad  \Longrightarrow \qquad \text{나뉘어서 적용 불가}</script></p>

<h3 id="접근-방법--1-확장-유클리드-알고리즘">접근 방법  1. 확장 유클리드 알고리즘</h3>

<p>확장 유클리드 알고리즘은 기본 원리로 유클리드 호제법으로 GCD를 구하는 것을 따라가며, 두 정수 A,B가 주어졌을 때, 베주 항등식인 $Ax+By=gcd(A,B)$ 에서 gcd(A,B)를 구하고 정수해 (x,y)를 구하는 알고리즘이다.</p>

<p>여기서 사용하고 싶은 확장 유클리드 알고리즘의 항을 써보면 다음과 같다. 
<script type="math/tex">(AB^{-1}) \% p</script>
위에서 말했던 이항계수 정의식을 보면 $A$와 $B$에 각각 무엇이 대입되는지 알 수 있다. 여기서 확장 유클리드 알고리즘을 사용하는데, 확장 유클리드 알고리즘은 두 수의 최대공약수와 베주 항등식의 $x$와 $y$까지 구할 수 있는 알고리즘이다. 
<script type="math/tex">Bx + py =1 \qquad (i)</script></p>

<script type="math/tex; mode=display">Bx \equiv 1 \pmod{p} \qquad (ii)</script>

<p>위의 (i)에서 확장 유클리드 알고리즘으로 정수해 $(x, y)$를 구할 수 있는데 그럼 다음 식에 대입하면 원하는 식을 구할 수 있다. 
<script type="math/tex">(AB^{-1}) \% p \\= (AB^{-1} \cdot 1) \%p\\=(AB^{-1} \cdot Bx)\%p\\=Ax\%p</script>
결론은, **베주 항등식에서 구한 $x$와 정의식에서 정의한 $A$를 곱한 것을 $p$로 modular 하면 원하는 식을 구할 수 있다. **</p>

<p>여기서 확장 유클리드 알고리즘을 이해하고 최종적으로 $x$를 구하는 것이 어렵게 느껴졌는데, 구현해보니 지나치게 길거나 복잡하지는 않았다. 재귀를 사용해서 구현하였다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">euc</span><span class="o">(</span><span class="kt">long</span> <span class="n">p</span><span class="o">,</span> <span class="kt">long</span> <span class="n">B</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">if</span><span class="o">(</span><span class="n">p</span><span class="o">%</span><span class="n">B</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">){</span>
    <span class="n">euc</span><span class="o">(</span><span class="n">B</span><span class="o">,</span> <span class="n">p</span><span class="o">%</span><span class="n">B</span><span class="o">);</span>
    <span class="n">temp</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
    <span class="n">y</span> <span class="o">=</span> <span class="n">x</span> <span class="o">-</span> <span class="o">(</span><span class="n">p</span><span class="o">/</span><span class="n">B</span><span class="o">)</span> <span class="o">*</span> <span class="n">y</span><span class="o">;</span>
    <span class="n">x</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>
  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
    <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="n">y</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong><small>[참고 자료]: https://onsil-thegreenhouse.github.io/programming/problem/2018/04/02/problem_combination/</small></strong></p>

	  ]]></description>
	</item>

	<item>
	  <title>[알고리즘] 세그먼트 트리를 활용한 히스토그램 문제 풀이_2</title>
	  <link>//segment-tree2</link>
	  <author></author>
	  <pubDate>2020-09-10T10:18:00+00:00</pubDate>
	  <guid>//segment-tree2</guid>
	  <description><![CDATA[
	     <p>앞서 <a href="https://www.acmicpc.net/problem/6549">히스토그램 문제</a>에 대한 접근 방법을 간단하게 설명하고 세그먼트 트리를 히스토그램에 맞추어서 설명했다. 이번 글에서는 구체적으로 어떻게 세그먼트 트리를 구현하여 히스토그램 문제를 푸는데까지 이어지는지 다루어 보도록 하겠다.</p>

<p>이 문제는 레벨이 높은 문제이긴 하지만 아이디어 자체가 굉장히 어렵거나 하진 않다. 다만 시간 복잡도 측면에서 효율적으로 접근하기 위해 세그먼트 트리를 활용하는게 좀 낯설어서 어려웠던 것 같다.</p>

<h6 id="segment-tree-구현">Segment Tree 구현</h6>

<p>Segment Tree를 구현할 때 배열을 사용해서 구현하도록 할텐데 segment tree는 다음과 같은 성질을 가지고 있다.</p>

<ul>
  <li>세그먼트 트리는 거의 Full Binary Tree(비슷한 형태를 지님)의 모습을 하고 있다.</li>
  <li>왼쪽 자식: 부모노트 * 2</li>
  <li>오른쪽 자식: 부모노드 * 2 + 1</li>
  <li>높이: lgN</li>
</ul>

<p>배열을 통해서 tree를 구현하려면 사전에 tree의 노드 갯수를 파악해서 배열의 크기를 지정해야한다. 위의 성질들을 이용하면 해당 tree의 크기를 계산할 수 있다. 예를 들어 기존 배열의 개수가 <strong>2의 제곱인 경우</strong>에는 높기가 lgN 이므로 필요한 노드의 갯수는 <code class="highlighter-rouge">2*N-1</code> 이다. <strong>2의 제곱이 아닌 경우</strong>에는 N보다 큰지만 가장 가까운 2의 제곱을 찾으면 된다. 따라서 그 경우 노드의 갯수는 <code class="highlighter-rouge">2*2^(lgN+2)-1</code>이 된다.</p>

<p>이렇게 크기를 지정해서 배열을 생성한 이후에 재귀 함수를 사용해서 이전 포스트에서 이야기 했던 부분을 구현하면 된다. 재귀를 잘 이해했다면 segment tree 생성은 크게 어렵지 않다.</p>

<p>**코드: **</p>

<p>먼저 segment tree를 저장할 배열 공간을 할당한다.  다음은 구현할 때 유용한 몇가지 JAVA 함수를 소개해준다.</p>

<ul>
  <li>Ceil: 올림 숫자</li>
  <li>Math.log10(n)/Math.log10(2) = log2n</li>
</ul>

<p>Segment Tree의 index는 1부터 시작해야 한다. 그래야지 <code class="highlighter-rouge">2*i, 2*i+1</code>로 왼쪽 자식노드와 오른쪽 자식노드를 구별할 수 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
  <span class="o">...</span>
  <span class="kt">int</span> <span class="n">height</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">Math</span><span class="o">.</span><span class="na">ceil</span><span class="o">(</span><span class="n">Math</span><span class="o">.</span><span class="na">log10</span><span class="o">(</span><span class="n">n</span><span class="o">)/</span><span class="n">Math</span><span class="o">.</span><span class="na">log10</span><span class="o">(</span><span class="mi">2</span><span class="o">));</span>
  <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">Math</span><span class="o">.</span><span class="na">pow</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="n">height</span><span class="o">+</span><span class="mi">1</span><span class="o">);</span>
  
  <span class="kt">int</span><span class="o">[]</span> <span class="n">binTree</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">size</span><span class="o">];</span>
  <span class="n">init</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>다음은 segment tree에 값을 할당하는 부분이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">static</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">(</span><span class="kt">int</span> <span class="n">start</span><span class="o">,</span> <span class="kt">int</span> <span class="n">end</span><span class="o">,</span> <span class="kt">int</span> <span class="n">index</span><span class="o">){</span>
  <span class="k">if</span><span class="o">(</span><span class="n">start</span><span class="o">==</span><span class="n">end</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">binTree</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">=</span> <span class="n">start</span><span class="o">;</span>
    <span class="k">return</span><span class="o">;</span>
  <span class="o">}</span>
  <span class="n">init</span><span class="o">(</span><span class="n">start</span><span class="o">,</span> <span class="o">(</span><span class="n">start</span><span class="o">+</span><span class="n">end</span><span class="o">)/</span><span class="mi">2</span><span class="o">,</span> <span class="n">index</span><span class="o">*</span><span class="mi">2</span><span class="o">);</span>
  <span class="n">init</span><span class="o">((</span><span class="n">start</span><span class="o">+</span><span class="n">end</span><span class="o">)/</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">end</span><span class="o">,</span> <span class="n">index</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="o">);</span>
  <span class="k">if</span><span class="o">(</span><span class="n">value</span><span class="o">[</span><span class="n">binTree</span><span class="o">[</span><span class="n">index</span><span class="o">*</span><span class="mi">2</span><span class="o">]]&lt;=</span><span class="n">value</span><span class="o">[</span><span class="n">binTree</span><span class="o">[</span><span class="n">index</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="o">]])</span>
    <span class="n">binTree</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">=</span> <span class="n">binTree</span><span class="o">[</span><span class="n">index</span><span class="o">*</span><span class="mi">2</span><span class="o">];</span>
  <span class="k">else</span>
    <span class="n">binTree</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">=</span> <span class="n">binTree</span><span class="o">[</span><span class="n">index</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
  <span class="k">return</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<h6 id="segment-tree-탐색">Segment Tree 탐색</h6>

<p>Segment Tree를 생성했으면 이제 각 구간을 순회하며 해당 구간의 최소값을 구해야 한다. 일반적인 세그먼트 트리의 예시에서 구간합을 구할 경우 각 segment tree에 있는 값의 합을 구하면 되지만, 히스토그램 문제에서는 최소값을 찾아야 하니, 한번 더 참조해야 하는 부분이 있다.</p>

<p>이 부분은 세그먼트 트리에 대해서 설명해놓은 <a href="https://www.acmicpc.net/blog/view/9">백준 블로그</a>를 참조하면서 이해 했는데 매우 잘 설명이 되어 있다. 세그먼트의 해당 노드가 담당하고 있는 구간을 [start, end]로, 합을 구하는 목적 구간을 [left, right]로 놓았을 때 다음 4가지 경우가 있다.</p>

<ol>
  <li>합을 구해야하는 [left, right]와 현재 노드가 담당하고 있는 [start, end]가 겹치지 않는 경우</li>
  <li>합을 구해야하는 [left, right]가 현재 노드가 담당하고 있는 [start, end]를 완전히 포함하는 경우</li>
  <li>현재 노드가 담당하고 있는 [start, end]가 [left, right]를 완전히 포함하는 경우</li>
  <li>[left, right]와 [start, end]가 겹쳐져 있는 경우 (1, 2, 3을 제외한 나머지)</li>
</ol>

<p>위의 4가지 경우에 대해서 다음과 같이 처리한다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1번 경우: if(left &gt; end || right &lt; start) 
	- 겹치지 않으므로 탐색할 필요 없음
2번 경우: if(left &lt;= start &amp;&amp; end &lt;= right)
	- 해당 노드의 값을 리턴함
3,4번 경우:
	- 각각 왼쪽, 오른쪽 자식 노드에서 탐색함. 
</code></pre></div></div>

<p>히스토그램 문제에서는 최소값을 찾아야 하는 것이기 때문에 왼쪽과 오른쪽 자식 노드로 나누어서 들어갈 때, 배열을 한번 더 참조해서 구간에서 최종 최소값이 있는 위치를 찾아야 한다.</p>

<p><strong>코드:</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">static</span> <span class="kt">int</span> <span class="nf">findMin</span><span class="o">(</span><span class="kt">int</span> <span class="n">start</span><span class="o">,</span> <span class="kt">int</span> <span class="n">last</span><span class="o">,</span> <span class="kt">int</span> <span class="n">left</span><span class="o">,</span> <span class="kt">int</span> <span class="n">right</span><span class="o">,</span> <span class="kt">int</span> <span class="n">index</span><span class="o">){</span>
  <span class="k">if</span><span class="o">(</span><span class="n">left</span><span class="o">&gt;</span><span class="n">last</span> <span class="o">||</span> <span class="n">right</span><span class="o">&lt;</span><span class="n">start</span><span class="o">)</span>
    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
  <span class="k">if</span><span class="o">(</span><span class="n">left</span><span class="o">&lt;=</span><span class="n">start</span> <span class="o">&amp;&amp;</span> <span class="n">right</span><span class="o">&gt;=</span><span class="n">last</span><span class="o">)</span>
    <span class="k">return</span> <span class="n">binTree</span><span class="o">[</span><span class="n">index</span><span class="o">];</span>
  <span class="k">else</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">temp1</span> <span class="o">=</span> <span class="n">findMin</span><span class="o">(</span><span class="n">start</span><span class="o">,(</span><span class="n">start</span><span class="o">+</span><span class="n">last</span><span class="o">)/</span><span class="mi">2</span><span class="o">,</span> <span class="n">left</span><span class="o">,</span> <span class="n">right</span><span class="o">,</span> <span class="n">index</span><span class="o">*</span><span class="mi">2</span><span class="o">);</span>
    <span class="kt">int</span> <span class="n">temp2</span> <span class="o">=</span> <span class="n">findMin</span><span class="o">((</span><span class="n">start</span><span class="o">+</span><span class="n">last</span><span class="o">/</span><span class="mi">2</span><span class="o">)+</span><span class="mi">1</span><span class="o">,</span> <span class="n">last</span><span class="o">,</span> <span class="n">left</span><span class="o">,</span> <span class="n">right</span><span class="o">,</span> <span class="n">index</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="o">);</span>
    <span class="k">if</span><span class="o">(</span><span class="n">temp1</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span>
      <span class="k">return</span> <span class="n">temp2</span><span class="o">;</span>
    <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">temp2</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span>
      <span class="k">return</span> <span class="n">temp1</span><span class="o">;</span>
    <span class="k">else</span> <span class="o">{</span>
      <span class="k">if</span><span class="o">(</span><span class="n">value</span><span class="o">[</span><span class="n">temp1</span><span class="o">]</span> <span class="o">&lt;=</span> <span class="n">value</span><span class="o">[</span><span class="n">temp2</span><span class="o">])</span>
        <span class="k">return</span> <span class="n">temp1</span><span class="o">;</span>
      <span class="k">return</span> <span class="n">temp2</span><span class="o">;</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h6 id="히스토그램-풀이">히스토그램 풀이</h6>

<p>위의 세그먼트 트리 생성과 탐색 방법을 사용해서 최소값을 찾는 부분을 구현했다면 이제 답을 구현하도록 해보자. 앞의 포스트에서 언급했던 방법은 아래이다.</p>

<blockquote>
  <p>먼저 <a href="https://www.acmicpc.net/problem/6549">문제</a>의 해결 방법을 요약하면 다음과 같다.</p>

  <blockquote>
    <ol>
      <li>히스토그램 중, 높이가 가장 낮은 min 값과 해당 너비값을 곱하여 넓이를 구함.</li>
      <li>해당 최소값을 기준으로 히스토램을 나누어서 1번을 반복함.</li>
      <li>더 이상 나눌 수 없을 때까지 반복하며 매번 넓이의 max 값을 업데이트 함.</li>
    </ol>
  </blockquote>
</blockquote>

<p>위의 방법이 분할정복인 이유는 반복적으로 나뉘어지는 구간에서의 직사각형을 계속 비교하면서 최대 크기를 찾기 때문이다. 세그먼트 트리에 저장된 최소값의 위치를 활용해서 해당 기준으로 나누고, 나눈 구간에서의 직사각형 넓이 구할 때 사용하도록 한다.</p>

<p>**코드: **</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">static</span> <span class="kt">void</span> <span class="nf">solve</span><span class="o">(</span><span class="kt">int</span> <span class="n">startIndex</span><span class="o">,</span> <span class="kt">int</span> <span class="n">lastIndex</span><span class="o">){</span>
  <span class="kt">long</span> <span class="n">area</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
  <span class="k">if</span><span class="o">(</span><span class="n">startIndex</span> <span class="o">==</span> <span class="n">lastIndex</span><span class="o">){</span>
    <span class="n">area</span> <span class="o">=</span> <span class="n">value</span><span class="o">[</span><span class="n">startIndex</span><span class="o">];</span>
    <span class="k">if</span><span class="o">(</span><span class="n">area</span><span class="o">&gt;</span><span class="n">max</span><span class="o">)</span>
      <span class="n">max</span> <span class="o">=</span> <span class="n">area</span><span class="o">;</span>
    <span class="k">return</span><span class="o">;</span>
  <span class="o">}</span>
  <span class="kt">int</span> <span class="n">minIndex</span> <span class="o">=</span> <span class="n">findMin</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="n">startIndex</span><span class="o">,</span> <span class="n">lastIndex</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
  <span class="kt">long</span> <span class="n">min</span> <span class="o">=</span> <span class="n">value</span><span class="o">[</span><span class="n">minIndex</span><span class="o">];</span>
  
  <span class="k">if</span><span class="o">(</span><span class="n">area</span><span class="o">&gt;</span><span class="n">max</span><span class="o">)</span>
    <span class="n">max</span> <span class="o">=</span> <span class="n">area</span><span class="o">;</span>
  
  <span class="k">if</span><span class="o">(</span><span class="n">minIndex</span> <span class="o">==</span> <span class="n">startIndex</span><span class="o">)</span>
    <span class="n">solve</span><span class="o">(</span><span class="n">minIndex</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">lastIndex</span><span class="o">);</span>
  <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">minIndex</span> <span class="o">&gt;=</span> <span class="n">lastIndex</span><span class="o">)</span>
    <span class="n">solve</span><span class="o">(</span><span class="n">startIndex</span><span class="o">,</span> <span class="n">minIndex</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span>
  <span class="k">else</span> <span class="o">{</span>
    <span class="n">solve</span><span class="o">(</span><span class="n">startIndex</span><span class="o">,</span> <span class="n">minIndex</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span>
    <span class="n">solve</span><span class="o">(</span><span class="n">minIndex</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">lastIndex</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong><small>[참고 자료]: https://www.acmicpc.net/blog/view/12, https://www.crocus.co.kr/648, https://www.acmicpc.net/blog/view/9 </small></strong></p>


	  ]]></description>
	</item>

	<item>
	  <title>[알고리즘] 세그먼트 트리를 활용한 히스토그램 문제 풀이_1</title>
	  <link>//segment-tree1</link>
	  <author></author>
	  <pubDate>2020-09-09T10:18:00+00:00</pubDate>
	  <guid>//segment-tree1</guid>
	  <description><![CDATA[
	     <p>히스토그램에서 가장 큰 직사각형의 크기를 찾는 알고리즘을 풀다가, 관련 문제의 풀이법을 간단히 찾아서 금방 해결할 줄 알았으니 구현에서 의도치 않은 오랜 시간이 걸렸다.</p>

<p>먼저 <a href="https://www.acmicpc.net/problem/6549">문제</a>의 해결 방법을 요약하면 다음과 같다.</p>

<blockquote>
  <ol>
    <li>히스토그램 중, 높이가 가장 낮은 min 값과 해당 너비값을 곱하여 넓이를 구함.</li>
    <li>해당 최소값을 기준으로 히스토램을 나누어서 1번을 반복함.</li>
    <li>더 이상 나눌 수 없을 때까지 반복하며 매번 넓이의 max 값을 업데이트 함.</li>
  </ol>
</blockquote>

<p>다음은 <a href="https://www.acmicpc.net/blog/view/12">백준 블로그</a>에 있는 문제 해설에서 가져온 그림이다. 위의 해결 방법을 이해하는데 도움이 된다.</p>

<p><img src="https://user-images.githubusercontent.com/63405904/109445062-10bb9c80-7a82-11eb-9887-9047f1485785.png" alt="histogram" /></p>

<p>처음에 단순히 이 풀이방법을 배열과 재귀를 사용해서 구현하는 방법으로 시도를 했었다. 사이트에 나와있는 테스트 케이스가 통과하길래 바로 채점을 했더니 결과는 <em>시간초과</em> 였다.. 개인적으로 알고리즘을 할 때 가장 어려운 부분이 답을 출력이 되지만 시간초과가 나올 때 인 것 같다. 문제설명 밑에 해당 문제를 세그먼트 트리를 사용한 분할정복으로 풀 수 있다고 하길래 세그먼트 트리에 대해서 공부하면서 정리한 내용과 처음에 접근했던 방식에 대해서 쓰려고 한다.</p>

<ol>
  <li>배열/재귀를 사용해서 풀었던 방법: <mark> 시간초과 </mark></li>
  <li>세그먼트 트리/분할정복을 사용해서 푼 방법: <mark>통과</mark></li>
</ol>

<h3 id="배열과-재귀를-사용한-첫번째-접근-방법">배열과 재귀를 사용한 첫번째 접근 방법</h3>

<p>배열과 재귀를 사용한 접근 방법은 간단하지만 번거롭다. 매번 나뉘어진 구간 사이에서의 <strong>최솟값</strong>을 찾는 과정을 반복해야 하기 때문이다.</p>

<h4 id="접근-방법-1-arraylist">접근 방법 1: ArrayList</h4>

<p>ArrayList를 사용해서 탐색 API를 사용해서 최솟값 구하기</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1. ArrayList의 일부 구간을 subList를 사용하여 List에 저장한다.
2. Collections.min() 메소드를 사용하여 최솟값을 추출하여 넓이를 구한다. 
3. indexOf() 메소드를 사용하여 최솟값의 index를 구한다. 
4. 다음과 같은 재귀로 반복한다.
	* 맨 첫번째 요소가 최소값일 경우: 두번째 요소부터 마지막 요소까지 재귀
	* 맨 마지막 요소가 최소값일 경우: 첫본째 요소부터 마지막 이전 요소까지 재귀
	* 중간의 어느 값이 최소값일 경우: (시작 요소, 최소값 위치 -1)과 (최소값 위치 +1, 마지막 요소)로 나누어서 재귀
</code></pre></div></div>

<p>위의 방식은 조금만 큰 값이 들어가도 바로 <em>시간 초과</em>가 결렸다. 이유는 ArrayList의 경우 일반 배열과 달리 초반에 메모리 할당이 되지 않기 때문에 추가/삭제 시 메모리 할당을 매번 해줘야 한다. 따라서 일반적으로 일반 배열이 더욱 빠르다. 그래서 두번째 접근 방식으로 일반 배열을 사용하는 것을 택했다. 일반 배열을 사용하면 최소값을 찾는 등의 메소드를 사용하기는 어렵지만 최소값을 찾는 구현은 어렵지 않고, 시간 복잡도도 비슷하기 때문에 시도해 보았다.</p>

<p><strong>코드:</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">static</span> <span class="kt">void</span> <span class="nf">solve</span><span class="o">(</span><span class="kt">int</span> <span class="n">startIndex</span><span class="o">,</span> <span class="kt">int</span> <span class="n">lastIndex</span><span class="o">){</span>
  <span class="kt">long</span> <span class="n">area</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
  <span class="k">if</span><span class="o">(</span><span class="n">startIndex</span> <span class="o">==</span> <span class="n">lastIndex</span><span class="o">){</span>
    <span class="n">area</span> <span class="o">=</span> <span class="n">value</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">startIndex</span><span class="o">);</span>
    <span class="k">if</span><span class="o">(</span><span class="n">area</span><span class="o">&gt;</span><span class="n">max</span><span class="o">)</span>
    	<span class="n">max</span> <span class="o">=</span> <span class="n">area</span><span class="o">;</span>
    <span class="k">return</span><span class="o">;</span>
  <span class="o">}</span>
  
  <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">value</span><span class="o">.</span><span class="na">subList</span><span class="o">(</span><span class="n">startIndex</span><span class="o">,</span> <span class="n">lastIndex</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span>
  <span class="kt">long</span> <span class="n">min</span> <span class="o">=</span> <span class="n">Collections</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>
  <span class="n">area</span> <span class="o">=</span> <span class="n">min</span><span class="o">*(</span><span class="n">lastIndex</span><span class="o">-</span><span class="n">startIndex</span><span class="o">+</span><span class="mi">1</span><span class="o">);</span>
  <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">startIndex</span> <span class="o">+</span> <span class="n">list</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="n">min</span><span class="o">);</span>
  <span class="k">if</span><span class="o">(</span><span class="n">area</span> <span class="o">&gt;</span> <span class="n">max</span><span class="o">)</span>
    <span class="n">max</span> <span class="o">=</span> <span class="n">area</span><span class="o">;</span>
  
  <span class="k">if</span><span class="o">(</span><span class="n">index</span> <span class="o">==</span> <span class="n">startIndex</span><span class="o">)</span>
    <span class="n">solve</span><span class="o">(</span><span class="n">index</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">lastIndex</span><span class="o">);</span>
  <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">index</span> <span class="o">==</span> <span class="n">lastIndex</span><span class="o">)</span>
    <span class="n">solve</span><span class="o">(</span><span class="n">startIndex</span><span class="o">,</span> <span class="n">index</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span>
  <span class="k">else</span><span class="o">{</span>
    <span class="n">solve</span><span class="o">(</span><span class="n">startIndex</span><span class="o">,</span> <span class="n">index</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span>
    <span class="n">solve</span><span class="o">(</span><span class="n">index</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">lastIndex</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="접근-방법-2-arrays">접근 방법 2: Arrays</h4>

<p>Array를 사용해서 최소값을 구하기</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1. for-loop를 사용해서 최소값 구하기
2. 최소값 사용하여 넓이 구하기 
3. 접근 방법 1에서와 같이 재귀하기
</code></pre></div></div>

<p>ArrayList를 사용했을 때보다는 빨랐기 때문에 더 많은 test case를 통과할 수 있었다. 하지만 여전히 시간초과에 걸렸다.</p>

<p>문제에서 나온 직사각형의 갯수 제한은 100,000이고 재귀 초기함수가 <code class="highlighter-rouge">(startIndex==lastIndex)</code> 일 때이기 때문에 각각하나씩 모두 접근한다. 이때마다 해당 구간의 최소값을 찾기위해 O(n)만큼 탐색을 하니 시간 초과가 걸릴만 하다. 때문에 문제의 태그에서 나온 세그먼트 트리에 대해서 공부하고 활용해보기로 했다.</p>

<p><strong>코드:</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">static</span> <span class="kt">void</span> <span class="nf">solve</span><span class="o">(</span><span class="kt">int</span> <span class="n">startIndex</span><span class="o">,</span> <span class="kt">int</span> <span class="n">lastIndex</span><span class="o">){</span>
  <span class="kt">long</span> <span class="n">area</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
  <span class="kt">long</span> <span class="n">min</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
  <span class="kt">long</span> <span class="n">index</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
  <span class="k">if</span><span class="o">(</span><span class="n">startIndex</span><span class="o">==</span><span class="n">lastIndex</span><span class="o">){</span>
    <span class="n">area</span> <span class="o">=</span> <span class="n">value</span><span class="o">[</span><span class="n">startIndex</span><span class="o">];</span>
    <span class="k">if</span><span class="o">(</span><span class="n">area</span><span class="o">&gt;</span><span class="n">max</span><span class="o">)</span>
      <span class="n">max</span><span class="o">=</span><span class="n">area</span><span class="o">;</span>
    <span class="k">return</span><span class="o">;</span>
  <span class="o">}</span>
  
  <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">temp</span><span class="o">=</span><span class="n">startIndex</span><span class="o">;</span><span class="n">temp</span><span class="o">&lt;=</span><span class="n">lastIndex</span><span class="o">;</span><span class="n">temp</span><span class="o">++){</span>
    <span class="k">if</span><span class="o">(</span><span class="n">min</span><span class="o">&lt;</span><span class="mi">0</span> <span class="o">||</span> <span class="n">value</span><span class="o">[</span><span class="n">temp</span><span class="o">]&lt;</span><span class="n">min</span><span class="o">){</span>
      <span class="n">min</span> <span class="o">=</span> <span class="n">value</span><span class="o">[</span><span class="n">temp</span><span class="o">];</span>
      <span class="n">index</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>
    <span class="o">}</span>
  <span class="o">}</span>
  
  <span class="n">area</span> <span class="o">=</span> <span class="n">min</span><span class="o">*(</span><span class="n">lastIndex</span><span class="o">-</span><span class="n">startIndex</span><span class="o">+</span><span class="mi">1</span><span class="o">);</span>
  
  <span class="k">if</span><span class="o">(</span><span class="n">area</span><span class="o">&gt;</span><span class="n">max</span><span class="o">)</span>
    <span class="n">max</span> <span class="o">=</span> <span class="n">area</span><span class="o">;</span>
  
  <span class="k">if</span><span class="o">(</span><span class="n">index</span> <span class="o">==</span> <span class="n">startIndex</span><span class="o">)</span>
    <span class="n">solve</span><span class="o">(</span><span class="n">index</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">lastIndex</span><span class="o">);</span>
  <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">index</span> <span class="o">==</span> <span class="n">lastIndex</span><span class="o">)</span>
    <span class="n">solve</span><span class="o">(</span><span class="n">startIndex</span><span class="o">,</span> <span class="n">index</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span>
  <span class="k">else</span><span class="o">{</span>
    <span class="n">solve</span><span class="o">(</span><span class="n">startIndex</span><span class="o">,</span> <span class="n">index</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span>
    <span class="n">solve</span><span class="o">(</span><span class="n">index</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">lastIndex</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="접근-방법-3-segment-tree">접근 방법 3: Segment Tree</h4>

<p>세그먼트 트리는 <mark>주어진 쿼리에 빠르게 응답하기 위해 만들어진 자료구조</mark>이고, 그 사용법은 쿼리마다 상이하다. 가장 대표적으로 세그먼트 트리를 사용할 때 내는 예시는 구간 합을 구하는 문제이다. 하지만 이 글에서는 <em>히스토그램에서 가장 큰 직사각형</em> 푸는 문제에 적용된 세그먼트를 설명할 것이다.</p>

<p>풀이에 세그먼트 트리를 활용할 수 있는 상황은 다음 두가지와 같다. <strong>1. 쿼리 형식으로 문제가 주어진 경우 2. 시간 복잡도를 log로 만들고 싶을 경우</strong>. <small>개인적으로 구간에 관련한 문제가 나올 경우, 시간 복잡도를 줄이기 위해 세그먼트 트리 사용을 하는 것이 좋은 것 같다.</small></p>

<p>세그먼트 트리는 주로 이진트리를 이용하며, 주로 완전 이진 트리 Full Binary Tree에 가깝다. 그렇기 대문에 세그먼트 트리를 사용하면 다음과 같은 성능을 지닌다.</p>

<ol>
  <li>쿼리의 결과값 구하기: O(lgN)</li>
  <li>값 업데이트 하기: O(lgN)</li>
</ol>

<p>히스토그램 문제에서는 쿼리의 결과값 구하는 과정의 시간 복잡도가 O(lgN)이 되면서 성능이 매우 좋아지게 된다.</p>

<h6 id="segment-tree-란">Segment Tree 란?</h6>

<p><img src="https://user-images.githubusercontent.com/63405904/109445201-6e4fe900-7a82-11eb-8e6c-09edb7e236a4.png" alt="histogram" /></p>

<p>히스토그램 문제에서는 위에서 말했듯 다음 두가지 풀이를 반복한다.</p>

<ol>
  <li>
    <p>최소값 기준으로 구간 나누기</p>
  </li>
  <li>
    <p>나뉘어진 구간에서 재귀로 1) 반복하기</p>
  </li>
</ol>

<p>히스토그램에서 중요 요소는 최소값이기 때문에 각 구간의 최소값의 위치를 저장하도록 한다. 따라서 이후에 특정 구간의 최소값을 찾을 때 <mark>O(lgN)</mark>만큼의 시간복잡도로 최소값을 찾을 수 있다. 위의 이진 세그먼트 트리는 10개의 원소가 있다고 가정했을 때 각 구간이 나뉜 것을 보여준다. <strong>세그먼트 트리에서 모든 leaf node는 원래 배열의 자기자신 element</strong>이다.</p>

<p>요약하자면 segment tree의 구성요소는 다음과 같다.</p>

<ul>
  <li>Leaf node :  원래 배열의 그 수의 위치. <small>(이 값은 응용 문제에 따라서 달라진다.)</small></li>
  <li>다른 node:  왼쪽 자식과 오른쪽 자식 중 더 최소값의 위치.</li>
</ul>

<p>히스토그램 문제에서 Segment tree 구현을 요약하면 다음과 같다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1. 초기화 함수: 구간이 자기 자신일 경우, leaf node이므로 해당 위치를 기록함. 
2. 재귀 함수: 구간을 반으로 나누어서 재귀함.
3. 일반 함수: 자신의 왼쪽 자식 노드와, 오른쪽 자식 노드 위치의 값을 비교하여 더 작은 값의 위치를 트리의 해당 노트에 입력함. 
</code></pre></div></div>

<p>전체 구간 <code class="highlighter-rouge">0 ~ n-1</code>까지부터 시작해 재귀를 하면 각 구간마다의 <mark>최솟값의 위치</mark>를 기록한 <em>lgN</em> 높이 만큼의 segment tree가 생성된다. 이 세그먼트 트리를 사용해서 더 빠른 방법으로 최소값을 탐색하고 제일 앞에서 설명한 방법을 통해서 정답을 도출하면 된다.</p>

<hr />

<p>다음 글에서 구체적으로 세그먼트 트리를 구현하는 방법과 히스토그램에서 응용된 방법에 대해서 다루도록 하겠다.</p>

<p><strong><small>[참고 자료]: https://www.acmicpc.net/blog/view/12, https://www.crocus.co.kr/648, https://www.acmicpc.net/blog/view/9 </small></strong></p>

	  ]]></description>
	</item>

	<item>
	  <title>[알고리즘] 쿼드 트리</title>
	  <link>//quadTree</link>
	  <author></author>
	  <pubDate>2020-08-12T10:18:00+00:00</pubDate>
	  <guid>//quadTree</guid>
	  <description><![CDATA[
	     <p>자료구조 중 처음 들어본 <small>(배웠는데 기억 못하는)</small> 개념이 나와서 정리해본다. 알고리즘 문제 중 분할 문제를 푸는 중에 쿼드 트리를 사용하는 알고리즘 이라는 언급을 보고 쿼드 트리라는 것이 어떠한 것인지 살펴보기로 한다.</p>

<ul>
  <li>QuadTree(쿼드트리): 자료구조의 트리를 기반으로 자식노드가 4개인 트리를 의미함.</li>
</ul>

<p>대랑의 좌표 데이터를 메모리 안에 압축하기 위해서 사용하는 기법 중 하나로, 주어진 공간을 항상 4개로 분할해 재귀적으로 표현한다.</p>

<p><img src="https://user-images.githubusercontent.com/63405904/110094205-ea2d9680-7dde-11eb-95ce-eb1b0156b256.png" alt="quadTree" /></p>

<p>대표적으로 사용되는 쿼드 트리의  사용처는 검은 색과 흰 색 밖에 없는 흑백 그림을 압축해서 표현하는 것이다. 쿼드 트리를 사용해서 해당 문제를 해결하는 것을 간단히 살펴보자.</p>

<h2 id="쿼드트리-응용-예시">쿼드트리 응용 예시</h2>

<p><strong>흑백그림 압축표현 하기</strong></p>

<p>다음 3가지를 기억하고 논리를 따라가면 된다.</p>

<ol>
  <li>그림의 모든 픽셀이 검은 색일 경우 쿼드 트리의 압축 결과는 그림 크기에 상관없이 B가 됨.</li>
  <li>그림의 모든 픽셀이 흰 색일 경우 쿼드 트리의 압축 결과는 그림 크기에 상관없이 W가 됨.</li>
  <li>같은 색이 아니라면, 이 그림의 가로 세로에 대해서 2로 나누어 4개의 조각으로 나눈 다음에 재귀를 사용하여 쿼드 트리압축을 진행함.
    <ul>
      <li>각각 4개의 분할된 그림에 대해서 전체가 흑색이면 B가 되고 전체가 흰색이면 W가 됨.</li>
      <li>만일 같은 색깔로 나누어지지 않으면 X로 표시한 후, 재귀로 들어가 색갈이 나올 때까지 반복함.</li>
    </ul>
  </li>
</ol>

<h2 id="쿼드트리를-응용한-그림-압축하기-코드">쿼드트리를 응용한 그림 압축하기 코드</h2>

<p>자바로 트리를 구현하는 방법 중 하나는, 재귀로 하나씩 파고드는 것이다. 재귀와 분할정복에 대해서 몇 문제를 풀어보니 중요한 것은 다음 두가지 이다.</p>

<ol>
  <li>언제 return 할 것인지.</li>
  <li>재귀로 들어가는 반복적인 규칙</li>
</ol>

<p>위 두가지를 고려하여 쿼드 트리로 위의 흑백 그림에 대해서 푸는 코드를 작성해보자.</p>

<p>문제는 <a href="https://www.acmicpc.net/problem/2630">백준 2630번</a> 를 참고하였다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//Divide and Conquere 분할정복</span>
<span class="kn">import</span> <span class="nn">java.io.BufferedReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.InputStreamReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
  <span class="kd">static</span> <span class="kt">int</span><span class="o">[][]</span> <span class="n">arr</span><span class="o">;</span>
  <span class="kd">static</span> <span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
  <span class="kd">static</span> <span class="kt">int</span> <span class="n">w</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
  
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
    <span class="n">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="n">InputStreamReader</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
    
    <span class="k">try</span><span class="o">{</span>
      <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
      <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">][</span><span class="n">n</span><span class="o">];</span>
      <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
        <span class="n">String</span><span class="o">[]</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">" "</span><span class="o">);</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">j</span><span class="o">++){</span>
          <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">temp</span><span class="o">[</span><span class="n">j</span><span class="o">]);</span>
        <span class="o">}</span>
      <span class="o">}</span>
      <span class="n">solve</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">n</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">){}</span>
      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">w</span><span class="o">);</span>
  		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
  <span class="o">}</span>
  
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">solve</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">,</span> <span class="kt">int</span> <span class="n">size</span><span class="o">){</span>
    <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">x</span><span class="o">][</span><span class="n">y</span><span class="o">];</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">x</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">x</span><span class="o">+</span><span class="n">size</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
      <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">y</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">y</span><span class="o">+</span><span class="n">size</span><span class="o">;</span><span class="n">j</span><span class="o">++){</span>
        <span class="k">if</span><span class="o">(</span><span class="n">num</span> <span class="o">!=</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]){</span>
          <span class="n">solve</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">,</span> <span class="n">size</span><span class="o">/</span><span class="mi">2</span><span class="o">);</span>
          <span class="n">solve</span><span class="o">(</span><span class="n">x</span><span class="o">+</span><span class="n">size</span><span class="o">/</span><span class="mi">2</span><span class="o">,</span> <span class="n">y</span><span class="o">,</span> <span class="n">size</span><span class="o">/</span><span class="mi">2</span><span class="o">);</span>
          <span class="n">solve</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">+</span><span class="n">size</span><span class="o">/</span><span class="mi">2</span><span class="o">,</span> <span class="n">size</span><span class="o">/</span><span class="mi">2</span><span class="o">);</span>
          <span class="n">solve</span><span class="o">(</span><span class="n">x</span><span class="o">+</span><span class="n">size</span><span class="o">/</span><span class="mi">2</span><span class="o">,</span> <span class="n">y</span><span class="o">+</span><span class="n">size</span><span class="o">/</span><span class="mi">2</span><span class="o">,</span> <span class="n">size</span><span class="o">/</span><span class="mi">2</span><span class="o">);</span>
          <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>
      <span class="o">}</span>
    <span class="o">}</span>
    <span class="k">if</span><span class="o">(</span><span class="n">num</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span>
      <span class="n">b</span><span class="o">++;</span>
    <span class="k">else</span> 
      <span class="n">w</span><span class="o">++;</span>
    <span class="k">return</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><small>별건 아니고 이진트리에서 4개 버전이 쿼드 트리였다..</small></p>


	  ]]></description>
	</item>


</channel>
</rss>
