<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>yjksw.github.io/</title>
   
   <link></link>
   <description>A beautiful narrative written with the world's most elegant publishing platform. The story begins here.</description>
   <language>en-uk</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>[GitHub] Commit Message Convetion</title>
	  <link>//commit-message-convetion</link>
	  <author></author>
	  <pubDate>2020-11-29T10:18:00+00:00</pubDate>
	  <guid>//commit-message-convetion</guid>
	  <description><![CDATA[
	     <p><br /></p>

<p>Github에 익숙하지 않기 때문에 커밋은 나에게 push를 해서 업로드를 하기 위한 중간과정 중 하나였다. 하지만 다른 곳에서 깃헙이나 프로젝트 진행을 하면서 커밋을 하는 단위의 중요성과 깃헙의 최대 장점인 프로젝트를 되돌리기 위한 커밋 메세지의 중요성에 대해서 여러번 들었었다. 이번에 프리코스를 시작하면서 커밋 메세지에 대한 가이드를 읽고 정리해보기로 했다.</p>

<p><a href="[https://gist.github.com/stephenparish/9941e89d80e2bc58a153#recognizing-unimportant-commits](https://gist.github.com/stephenparish/9941e89d80e2bc58a153#recognizing-unimportant-commits)">참고 사이트</a></p>

<p><br /></p>

<p><br /></p>

<h2 id="changelogmd-생성하기">CHANGELOG.md 생성하기</h2>

<ul>
  <li>changelog에는 3개의 section이 있다: new features, bug fixes, breaking changes.</li>
  <li>이러한 정보들은 배포가 될 때 script로 생성이 되어야 하며 해당하는 commit과 함께 제공되어야 한다.</li>
  <li>해당 로그들을 보는 방법들은 다음과 같다.
    <ol>
      <li>
        <p>지난 release 이후에 발생한 모든 subject(커밋 메세지의 첫번째 라인) 조회:</p>

        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">git</span> <span class="n">log</span> <span class="o">&lt;</span><span class="n">lasg</span> <span class="n">tag</span><span class="o">&gt;</span> <span class="n">HEAD</span> <span class="o">--</span><span class="n">pretty</span><span class="o">=</span><span class="nl">format:</span><span class="n">$s</span>
</code></pre></div>        </div>
      </li>
      <li>
        <p>이번 release의 새로운 feature:</p>

        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">git</span> <span class="n">log</span> <span class="o">&lt;</span><span class="n">last</span> <span class="n">release</span><span class="o">&gt;</span> <span class="n">HEAD</span> <span class="o">--</span><span class="n">grep</span> <span class="n">feature</span>
</code></pre></div>        </div>
      </li>
    </ol>
  </li>
</ul>

<p><br /></p>

<h3 id="recognizing-unimportant-commits">Recognizing unimportant commits</h3>

<ul>
  <li>
    <p>사소한 버그 수정 등과 같이 중요하지 않은 커밋들을 걸러낼 수 있다. 코드의 logic이 수정된 부분들이 아닌 경우에는 다음과 같은 명령어로 무시할 수 있다.</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">git</span> <span class="n">bisect</span> <span class="n">skip</span> <span class="err">$</span><span class="o">(</span><span class="n">git</span> <span class="n">rev</span><span class="o">-</span><span class="n">list</span> <span class="o">--</span><span class="n">grep</span> <span class="n">irrelevant</span> <span class="o">&lt;</span><span class="n">good</span> <span class="n">place</span><span class="o">&gt;</span> <span class="n">HEAD</span><span class="o">)</span>
</code></pre></div>    </div>
  </li>
</ul>

<p><br /></p>

<h3 id="history-브라우징-시-정보-제공을-위한-커밋">History 브라우징 시 정보 제공을 위한 커밋</h3>

<ul>
  <li>커밋 메세지를 작성할 때 가능한 많은 정보들을 제공하는 것이 좋다.</li>
  <li>그렇기에 메세지로 무슨 변경이나 추가가 있었는지 확인 할 수 있는데, 해당 메세지가 일정한 convention을 지닐 필요가 있다.</li>
</ul>

<p><br /></p>

<h2 id="commit-message-형식">Commit Message 형식</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="n">type</span><span class="o">&gt;(&lt;</span><span class="n">scope</span><span class="o">&gt;):</span> <span class="o">&lt;</span><span class="n">subject</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="n">BLANK</span> <span class="n">LINE</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="n">body</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="n">BLANK</span> <span class="n">LINE</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="n">footer</span><span class="o">&gt;</span>
</code></pre></div></div>

<ul>
  <li>커밋 메세지는 100자를 넘지 않는다. 이래야지 깃헙이나 깃 툴을 사용할 때 메세지 읽기가 쉽다.</li>
</ul>

<p><br /></p>

<h3 id="subject-line">Subject line</h3>

<p>어떤 변경이 일어났는지에 대한 간단명료한 설명을 담고 있다. (커밋 메세지의 첫 줄)</p>

<ol>
  <li>Allowed <code class="highlighter-rouge">&lt;type&gt;</code>
    <ul>
      <li>feat (feature)</li>
      <li>fix (bug fix)</li>
      <li>docs (documentation)</li>
      <li>style (formatting, missing semi colons, …)</li>
      <li>refactor</li>
      <li>test (when adding missing tests)</li>
      <li>chore (maintain)</li>
    </ul>
  </li>
  <li>Allowed <code class="highlighter-rouge">&lt;scope&gt;</code>
    <ul>
      <li>적용 범위를 나타내는 것으로 커밋에 대한 부가적인 정보이다. (선택 사항)</li>
      <li>적용 범위에 대한 예시는 이러하다: $location, $browser, $compile, $rootScope, ngHref, ngClick, ngView, 등등</li>
    </ul>
  </li>
  <li><code class="highlighter-rouge">&lt;subject&gt;</code>
    <ul>
      <li>현재형으로 작성한다: “change” → x “changed” or “changes”</li>
      <li>첫 문자를 대문자로 작성하지 않는다.</li>
      <li>(.)을 작성하지 않는다.</li>
    </ul>
  </li>
  <li>해당 커밋에 major 한 변화가 있다면 큰 변화가 있기 때문에 호환이 안되는 부분들이 있을 수 있다. 해당 부분들을 footer에 반드시 작성하게 되는데, 해당 메세지를 확인하지 못할 수도 있기 때문에 다음과 같이 <code class="highlighter-rouge">BREAKING CHANGE: 설명</code> 있음을 표시한다.
    <ul>
      <li><code class="highlighter-rouge">예: fead(pipeling)!: Add pipeline function</code></li>
    </ul>
  </li>
</ol>

<p><br /></p>

<h3 id="message-body">Message body</h3>

<ul>
  <li>커밋 메세지와 같이 현재형 동사로 작성한다.</li>
  <li>수정의 동기화, 수정 이전과의 비교를 명시한다.</li>
  <li>본문에 여러개가 있을 경우에는 (-)로 구분한다.</li>
</ul>

<p><br /></p>

<h3 id="message-footer">Message footer</h3>

<ul>
  <li>커밋이 어떤 이슈에서 왔는지 촘조 정보들을 추가하는 용도로 사용.</li>
  <li>특정 이슈와의 연관을 표현하기 위해 <code class="highlighter-rouge">close #123 #245</code> 같이 커밋 메세지를 추가한다.</li>
  <li>
    <p>Breaking changes에 대해서 footer에 작성한다</p>

    <p>어떤 것이 수정되었는지, 수정이 된 정의, migration note 등이 추가되도록한다.</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">BREAKING</span> <span class="nl">CHANGE:</span> <span class="n">isolate</span> <span class="n">scope</span> <span class="n">bindings</span> <span class="n">definition</span> <span class="n">has</span> <span class="n">changed</span> <span class="n">and</span>
      <span class="n">the</span> <span class="n">inject</span> <span class="n">option</span> <span class="k">for</span> <span class="n">the</span> <span class="n">directive</span> <span class="n">controller</span> <span class="n">injection</span> <span class="n">was</span> <span class="n">removed</span><span class="o">.</span>
        
      <span class="n">To</span> <span class="n">migrate</span> <span class="n">the</span> <span class="n">code</span> <span class="n">follow</span> <span class="n">the</span> <span class="n">example</span> <span class="nl">below:</span>
        
      <span class="nl">Before:</span>
        
      <span class="nl">scope:</span> <span class="o">{</span>
        <span class="nl">myAttr:</span> <span class="err">'</span><span class="n">attribute</span><span class="err">'</span><span class="o">,</span>
        <span class="nl">myBind:</span> <span class="err">'</span><span class="n">bind</span><span class="err">'</span><span class="o">,</span>
        <span class="nl">myExpression:</span> <span class="err">'</span><span class="n">expression</span><span class="err">'</span><span class="o">,</span>
        <span class="nl">myEval:</span> <span class="err">'</span><span class="n">evaluate</span><span class="err">'</span><span class="o">,</span>
        <span class="nl">myAccessor:</span> <span class="err">'</span><span class="n">accessor</span><span class="err">'</span>
      <span class="o">}</span>
        
      <span class="nl">After:</span>
        
      <span class="nl">scope:</span> <span class="o">{</span>
        <span class="nl">myAttr:</span> <span class="sc">'@'</span><span class="o">,</span>
        <span class="nl">myBind:</span> <span class="sc">'@'</span><span class="o">,</span>
        <span class="nl">myExpression:</span> <span class="sc">'&amp;'</span><span class="o">,</span>
        <span class="c1">// myEval - usually not useful, but in cases where the expression is assignable, you can use '='</span>
        <span class="nl">myAccessor:</span> <span class="sc">'='</span> <span class="c1">// in directive's template change myAccessor() to myAccessor</span>
      <span class="o">}</span>
        
      <span class="n">The</span> <span class="n">removed</span> <span class="err">`</span><span class="n">inject</span><span class="err">`</span> <span class="n">wasn</span><span class="err">'</span><span class="n">t</span> <span class="n">generaly</span> <span class="n">useful</span> <span class="k">for</span> <span class="n">directives</span> <span class="n">so</span> <span class="n">there</span> <span class="n">should</span> <span class="n">be</span> <span class="n">no</span> <span class="n">code</span> <span class="n">using</span> <span class="n">it</span><span class="o">.</span>
</code></pre></div>    </div>
  </li>
</ul>

<p><br /></p>

<h2 id="예시">예시</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feat</span><span class="o">(</span><span class="n">$browser</span><span class="o">):</span> <span class="n">onUrlChange</span> <span class="nf">event</span> <span class="o">(</span><span class="n">popstate</span><span class="o">/</span><span class="n">hashchange</span><span class="o">/</span><span class="n">polling</span><span class="o">)</span>

<span class="n">Added</span> <span class="k">new</span> <span class="n">event</span> <span class="n">to</span> <span class="n">$browser</span><span class="o">:</span>
<span class="o">-</span> <span class="n">forward</span> <span class="n">popstate</span> <span class="n">event</span> <span class="k">if</span> <span class="n">available</span>
<span class="o">-</span> <span class="n">forward</span> <span class="n">hashchange</span> <span class="n">event</span> <span class="k">if</span> <span class="n">popstate</span> <span class="n">not</span> <span class="n">available</span>
<span class="o">-</span> <span class="k">do</span> <span class="n">polling</span> <span class="n">when</span> <span class="n">neither</span> <span class="n">popstate</span> <span class="n">nor</span> <span class="n">hashchange</span> <span class="n">available</span>

<span class="n">Breaks</span> <span class="n">$browser</span><span class="o">.</span><span class="na">onHashChange</span><span class="o">,</span> <span class="n">which</span> <span class="n">was</span> <span class="nf">removed</span> <span class="o">(</span><span class="n">use</span> <span class="n">onUrlChange</span> <span class="n">instead</span><span class="o">)</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fix</span><span class="o">(</span><span class="n">$compile</span><span class="o">):</span> <span class="n">couple</span> <span class="n">of</span> <span class="n">unit</span> <span class="n">tests</span> <span class="k">for</span> <span class="n">IE9</span>

<span class="n">Older</span> <span class="n">IEs</span> <span class="n">serialize</span> <span class="n">html</span> <span class="n">uppercased</span><span class="o">,</span> <span class="n">but</span> <span class="n">IE9</span> <span class="n">does</span> <span class="n">not</span><span class="o">...</span>
<span class="n">Would</span> <span class="n">be</span> <span class="n">better</span> <span class="n">to</span> <span class="n">expect</span> <span class="k">case</span> <span class="n">insensitive</span><span class="o">,</span> <span class="n">unfortunately</span> <span class="n">jasmine</span> <span class="n">does</span>
<span class="n">not</span> <span class="n">allow</span> <span class="n">to</span> <span class="n">user</span> <span class="n">regexps</span> <span class="k">for</span> <span class="k">throw</span> <span class="n">expectations</span><span class="o">.</span>

<span class="n">Closes</span> <span class="err">#</span><span class="mi">392</span>
<span class="n">Breaks</span> <span class="n">foo</span><span class="o">.</span><span class="na">bar</span> <span class="n">api</span><span class="o">,</span> <span class="n">foo</span><span class="o">.</span><span class="na">baz</span> <span class="n">should</span> <span class="n">be</span> <span class="n">used</span> <span class="n">instead</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">docs</span><span class="o">(</span><span class="n">guide</span><span class="o">):</span> <span class="n">updated</span> <span class="n">fixed</span> <span class="n">docs</span> <span class="n">from</span> <span class="n">Google</span> <span class="n">Docs</span>

<span class="n">Couple</span> <span class="n">of</span> <span class="n">typos</span> <span class="nl">fixed:</span>
<span class="o">-</span> <span class="n">indentation</span>
<span class="o">-</span> <span class="n">batchLogbatchLog</span> <span class="o">-&gt;</span> <span class="n">batchLog</span>
<span class="o">-</span> <span class="n">start</span> <span class="n">periodic</span> <span class="n">checking</span>
<span class="o">-</span> <span class="n">missing</span> <span class="n">brace</span>
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA] 구글에서 제공하는 Java Coding Convention Guide</title>
	  <link>//java-coding-convention</link>
	  <author></author>
	  <pubDate>2020-11-28T10:18:00+00:00</pubDate>
	  <guid>//java-coding-convention</guid>
	  <description><![CDATA[
	     <p><br /></p>

<p>프리코스를 진행하면서 구글에서 제공하는 javaGuide를 읽고 해당 convention을 따라서 코딩 하도록 하기 위해서 해당 문서를 정독했다. 원래 알고 있던 부분들도 있고 아닌 부분들도 있는데, 이렇게 잘 문서화 되어 있다는 것을 처음 알았다. 다음은 해당 문서를 읽으면서 두고두고 참고할 내용들을 정리한 것들이다.</p>

<p>다음 사이트 참고: <a href="https://google.github.io/styleguide/javaguide.html">Google Java Style Guide</a></p>

<h2 id="1-source-file-structure">1. Source file structure</h2>

<p>Java 소스 파일은 다음과 같은 구조를 가지고 있다. 순서에 유의하여 구조화 되어 있다.</p>

<ol>
  <li>만약 존재한다면, license or copyright information</li>
  <li>Package 명시</li>
  <li>Import statements</li>
  <li>단 하나의 top-level class</li>
</ol>

<p>→ 위의 4 section을 1줄 간격(exactly one blank)으로 나눈다.</p>

<p><br /></p>

<h3 id="1-1-copyright-information">1-1. copyright information</h3>

<p>소스파일 맨 위에 시작 주석으로 파일 클래스 이름, 버전 정보, 날짜, 저작권 주의를 보여주는 주석으로 시작한다.</p>

<h3 id="1-2-import-statements">1-2. Import Statements</h3>

<ol>
  <li>Wildcard imports는 지양한다.
    <ul>
      <li>(*) 추가해서 전체를 한꺼번에 import 하는 것.</li>
      <li><a href="https://medium.com/@tharakamd.12/is-it-bad-to-use-wildcard-imports-in-java-1b46a863b2be#:~:text=Wildcard%20imports%20tell%20java%20compiler,performance%20may%20lower%20a%20bit">관련 참고 사이트</a></li>
    </ul>
  </li>
  <li>한 줄이 너무 길어도 line wrapping 하지 않는다.</li>
  <li>static imports를 하나의 block에 non-static imports를 하나의 block에 넣고 두 block 사이만 한 줄 간격이 있다.</li>
  <li>각 block 내에서는 ASCII sort order에 따라서 정렬한다.</li>
  <li>class는 static import 가 아닌 normal import 한다.</li>
</ol>

<h3 id="1-3-class-declaration">1-3 Class Declaration</h3>

<ol>
  <li>Top-level 클래스는 각 소스파일 당 단 1개만 존재한다.</li>
</ol>

<p><br /></p>

<h2 id="2-formatting">2. Formatting</h2>

<h3 id="2-1-괄호">2-1. 괄호</h3>

<ol>
  <li>
    <p>optional인 경우에도 괄호를 쓴다.</p>

    <ul>
      <li><code class="highlighter-rouge">if, else, for, do, while</code> 이 비어 있거나 한 줄만 있더라도 괄호를 추가한다.</li>
    </ul>
  </li>
  <li>비어 있지 않은 블록의 경우 다음과 같이 한다.
    <ul>
      <li>’{‘ 앞에 줄 간격 두지 않는다.</li>
      <li>’{‘ 이후에  줄 간격 둔다.</li>
      <li>’}’ 이전에 줄 간격 둔다.</li>
      <li>’}’ 이후에 다음과 같은 경우에만 줄 간격을 둔다.
        <ul>
          <li>statement가 끝났을 때, 메소드, constructor, class가 끝났을 때</li>
          <li>, 나 else 가 그 다음에 나오는 경우에는 줄 간격을 두지 않는다.</li>
        </ul>
      </li>
    </ul>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">return</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="o">{</span>
   <span class="k">while</span> <span class="o">(</span><span class="n">condition</span><span class="o">())</span> <span class="o">{</span>
     <span class="n">method</span><span class="o">();</span>
   <span class="o">}</span>
 <span class="o">};</span>

 <span class="k">return</span> <span class="k">new</span> <span class="nf">MyClass</span><span class="o">()</span> <span class="o">{</span>
   <span class="nd">@Override</span> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">method</span><span class="o">()</span> <span class="o">{</span>
     <span class="k">if</span> <span class="o">(</span><span class="n">condition</span><span class="o">())</span> <span class="o">{</span>
       <span class="k">try</span> <span class="o">{</span>
         <span class="n">something</span><span class="o">();</span>
       <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ProblemException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
         <span class="n">recover</span><span class="o">();</span>
       <span class="o">}</span>
     <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">otherCondition</span><span class="o">())</span> <span class="o">{</span>
       <span class="n">somethingElse</span><span class="o">();</span>
     <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
       <span class="n">lastThing</span><span class="o">();</span>
     <span class="o">}</span>
   <span class="o">}</span>
 <span class="o">};</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>빈 블록의 경우:</p>

    <p>다음 두 경우 모드 가능하나, multi-block 인 경우에는 consice 하게 할 수 없다.</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c1">// This is acceptable</span>
   <span class="kt">void</span> <span class="nf">doNothing</span><span class="o">()</span> <span class="o">{}</span>

   <span class="c1">// This is equally acceptable</span>
   <span class="kt">void</span> <span class="nf">doNothingElse</span><span class="o">()</span> <span class="o">{</span>
   <span class="o">}</span>
</code></pre></div>    </div>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c1">// This is not acceptable: No concise empty blocks in a multi-block statement</span>
   <span class="k">try</span> <span class="o">{</span>
     <span class="n">doSomething</span><span class="o">();</span>
   <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{}</span>
</code></pre></div>    </div>
  </li>
</ol>

<h3 id="2-2-블록-indentation-2-spaces">2-2. 블록 indentation: +2 spaces</h3>

<ul>
  <li>새로운 블록일 경우 2 만큼 들여쓰기 한다.</li>
  <li>하지만 우테코에서는 +2 가 아니라 +4 만큼 들여쓰기 하도록 한다.</li>
</ul>

<h3 id="2-3-한-줄에-한-statement만-작성한다">2-3 한 줄에 한 statement만 작성한다.</h3>

<ul>
  <li>각 statement는 줄 간격을 둔다.</li>
</ul>

<h3 id="2-4-column-limit-100">2-4 Column limit: 100</h3>

<p>다음과 같은 경우가 아니라 한 줄에 100자가 넘지 않도록 line-wrapping을 한다.</p>

<ol>
  <li>line-wrapping이 불가능한 경우</li>
  <li>package / import 일 경우</li>
  <li>shell에 복사 붙여넣기 해야 하는 comment일 경우</li>
</ol>

<h3 id="2-5-line-wrapping">2-5 Line-wrapping</h3>

<ul>
  <li>다음과 같은 상황에서 line break를 하여 line-wrapping 한다.
    <ol>
      <li>
        <p>non-assignment operator일 경우 줄 간격은 해당 Operator 앞에서 break 한다.</p>

        <p>다음과 같은 것들에도 적용된다:</p>

        <ul>
          <li>dot separator (.)</li>
          <li>two colons of method reference (::)</li>
          <li>an ampersand in a type bound (&lt;T extends Foo &amp; Bar&gt;)</li>
          <li>
            <table>
              <tbody>
                <tr>
                  <td>pipe in a catch block ( catch (FooException</td>
                  <td>BarException e) )</td>
                </tr>
              </tbody>
            </table>
          </li>
        </ul>
      </li>
      <li>assignment-operator일 경우 해당 operator 다음에 line break 한다.</li>
      <li>( 앞에 있는 메소드나 constructor 이름은 붙어 있도록 한다.</li>
      <li>, 같은 경우 그 앞의 토큰과 붙어 있는다.</li>
      <li>
        <p>lambda 의 → 다음에는 line break 하지 않는데, lambda body가 single expression 인 경우를 제외하고는 반드시 ( 다음에 line break 해야 한다.</p>

        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">MyLambda</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Long</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">lambda</span> <span class="o">=</span>
     <span class="o">(</span><span class="n">String</span> <span class="n">label</span><span class="o">,</span> <span class="n">Long</span> <span class="n">value</span><span class="o">,</span> <span class="n">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
         <span class="o">...</span>
     <span class="o">};</span>

 <span class="n">Predicate</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">predicate</span> <span class="o">=</span> <span class="n">str</span> <span class="o">-&gt;</span>
     <span class="n">longExpressionInvolving</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
</code></pre></div>        </div>
      </li>
    </ol>
  </li>
  <li>line-wrapping 이후에는 +4 만큼의 들여쓰기를 한다.</li>
</ul>

<h3 id="2-6-공백-whitespace">2-6 공백 Whitespace</h3>

<ol>
  <li>Vertical Whitespace
    <ul>
      <li>다음과 같은 경우 빈 줄이 들어간다.
        <ol>
          <li>consecutive members 나 initializers of a class 사이에 빈 줄
            <ul>
              <li>필드, constructors, methods, nested classes, static initializer, instance initializer</li>
              <li>두 필드 사이에 공백은 선택이다.</li>
            </ul>
          </li>
        </ol>
      </li>
      <li>빈 줄은 가독성을 위해서 필요한 곳에 어디든 추가될 수 있다.</li>
    </ul>
  </li>
  <li>Horizontal whitespace
    <ol>
      <li>if, for, catch 뒤에 있는 ‘(‘ 사이에 공백</li>
      <li>else, catch 앞에 있는 ‘}’ 사이에 공백</li>
      <li>’{‘ 앞에 공백.
        <ul>
          <li>예외1: annotation 안에 있는 ‘{‘ 앞에는 공백 없음</li>
          <li>배열 안에 원소로 인한 ‘{‘ 앞에는 공백 없음</li>
        </ul>
      </li>
      <li>binary 나 ternary operator 앞 뒤로 공백 넣는다.
        <ul>
          <li>&lt;T extends Foo &amp; Bar&gt;</li>
          <li><code class="highlighter-rouge">catch (FooException | BarException e)</code></li>
          <li><code class="highlighter-rouge">(String str) -&gt; str.length()</code></li>
          <li>(::) 이나 (.) 앞 뒤에는 공백 없음</li>
        </ul>
      </li>
      <li>,:; 나 ‘)’ 뒤에 공백 있음.</li>
      <li>변수이름과 type 사이에 공백: List<String> list</String></li>
    </ol>
  </li>
</ol>

<p><br /></p>

<h2 id="3-naming">3. Naming</h2>

<h3 id="3-1-package-names">3-1. Package names</h3>

<ol>
  <li>패지키 이름은 Camel Case도 아니고 전부 소문자로 띄어쓰기 없이 이루어진다.</li>
</ol>

<h3 id="3-2-class-names">3-2. Class names</h3>

<ol>
  <li>클래스 이름은 UpperCamelCase로 이루어 진다.</li>
  <li>주로 noun이나 noun phase이다.</li>
  <li>Test 클래스의 경우 뒤에 Test가 붙는다.</li>
</ol>

<h3 id="3-3-method-names">3-3 Method names</h3>

<ol>
  <li>메소드 이름은 lowerCamelCase로 나타난다.</li>
  <li>주로 verb 이다.</li>
</ol>

<h3 id="3-4-constant-names">3-4 Constant names</h3>

<ol>
  <li>상수의 경우 CONSTANT_CASE 와 같이 전부 대문자, _ 로 구분되어 있다.</li>
  <li>여기서 상수라고 하는 것은 static final field 이며, 잘 변하지 않고, 메소드에 이거에 의한 부작용이 없는 숫자를 말한다.</li>
  <li>
    <p>예시:</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c1">// Constants</span>
 <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">NUMBER</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
 <span class="kd">static</span> <span class="kd">final</span> <span class="n">ImmutableList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">NAMES</span> <span class="o">=</span> <span class="n">ImmutableList</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"Ed"</span><span class="o">,</span> <span class="s">"Ann"</span><span class="o">);</span>
 <span class="kd">static</span> <span class="kd">final</span> <span class="n">ImmutableMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">AGES</span> <span class="o">=</span> <span class="n">ImmutableMap</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"Ed"</span><span class="o">,</span> <span class="mi">35</span><span class="o">,</span> <span class="s">"Ann"</span><span class="o">,</span> <span class="mi">32</span><span class="o">);</span>
 <span class="kd">static</span> <span class="kd">final</span> <span class="n">Joiner</span> <span class="n">COMMA_JOINER</span> <span class="o">=</span> <span class="n">Joiner</span><span class="o">.</span><span class="na">on</span><span class="o">(</span><span class="sc">','</span><span class="o">);</span> <span class="c1">// because Joiner is immutable</span>
 <span class="kd">static</span> <span class="kd">final</span> <span class="n">SomeMutableType</span><span class="o">[]</span> <span class="n">EMPTY_ARRAY</span> <span class="o">=</span> <span class="o">{};</span>
 <span class="kd">enum</span> <span class="n">SomeEnum</span> <span class="o">{</span> <span class="n">ENUM_CONSTANT</span> <span class="o">}</span>

 <span class="c1">// Not constants</span>
 <span class="kd">static</span> <span class="n">String</span> <span class="n">nonFinal</span> <span class="o">=</span> <span class="s">"non-final"</span><span class="o">;</span>
 <span class="kd">final</span> <span class="n">String</span> <span class="n">nonStatic</span> <span class="o">=</span> <span class="s">"non-static"</span><span class="o">;</span>
 <span class="kd">static</span> <span class="kd">final</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">mutableCollection</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
 <span class="kd">static</span> <span class="kd">final</span> <span class="n">ImmutableSet</span><span class="o">&lt;</span><span class="n">SomeMutableType</span><span class="o">&gt;</span> <span class="n">mutableElements</span> <span class="o">=</span> <span class="n">ImmutableSet</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">mutable</span><span class="o">);</span>
 <span class="kd">static</span> <span class="kd">final</span> <span class="n">ImmutableMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">SomeMutableType</span><span class="o">&gt;</span> <span class="n">mutableValues</span> <span class="o">=</span>
     <span class="n">ImmutableMap</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"Ed"</span><span class="o">,</span> <span class="n">mutableInstance</span><span class="o">,</span> <span class="s">"Ann"</span><span class="o">,</span> <span class="n">mutableInstance2</span><span class="o">);</span>
 <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">Logger</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">MyClass</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
 <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span><span class="o">[]</span> <span class="n">nonEmptyArray</span> <span class="o">=</span> <span class="o">{</span><span class="s">"these"</span><span class="o">,</span> <span class="s">"can"</span><span class="o">,</span> <span class="s">"change"</span><span class="o">};</span>
</code></pre></div>    </div>
  </li>
</ol>

<h3 id="3-5-non-cnastant-field-names">3-5 Non-cnastant field names</h3>

<ol>
  <li>Non-constant field(static 이거나 아니거나)의 경우 lowerCamelCase로 되어 있다. 주로 noun 이다.</li>
</ol>

<h3 id="3-6-이외의-다른-camelcase">3-6 이외의 다른 CamelCase</h3>

<ol>
  <li>Parameter, local variable, type variable 모두 lowCamelCase로 쓴다.</li>
</ol>

	  ]]></description>
	</item>

	<item>
	  <title>[이분탐색] 백준 1300 - k번째 수</title>
	  <link>//baek1300</link>
	  <author></author>
	  <pubDate>2020-10-11T10:18:00+00:00</pubDate>
	  <guid>//baek1300</guid>
	  <description><![CDATA[
	     <h3 id="문제">문제</h3>

<p><a href="https://www.acmicpc.net/problem/1300">문제 바로가기</a></p>

<h5 id="문제-분석-">문제 분석 &gt;</h5>

<p>크기가 NxN인 배열 A는 각각 A[i][j] = ixj 로 채워져 있다. 이 수를 NxN 크기의 일차원 배열 B에 오름차순 정렬하였을 때, B[k]의 값은 무엇인가?</p>

<p>배열 A, B의 index는 1부터 시작한다.</p>

<h5 id="입력-">입력 &gt;</h5>

<p>첫 줄에 배열의 크기 N ($0 \le N \le 10^5$) 과 둘째 줄에 k (min($10^9, N^2$)) 가 주어진다.</p>

<h5 id="출력-">출력 &gt;</h5>

<p>B[k] 값을 출력한다.</p>

<h3 id="예제">예제</h3>

<p>&lt;img src=”baek1300.png” width=70%/&gt;</p>

<h3 id="접근법">접근법</h3>

<ol>
  <li>배열 B에 들어가 있는 값의 범위는 1부터 N x N 이다.</li>
  <li>해당 범위를 이분탐색 하여 해당 숫자보다 작거나 같은 숫자가 몇개인지 구하여 배열 B에서의 index를 파악한다.</li>
  <li>해당 숫자보다 작거나 같은 숫자를 구하려면 숫자를 행마다 나눈 몫을 더하면 된다.
    <ul>
      <li>다만 주의할 것은 몫이 N 보다 크면 N으로 측정해야 한다.</li>
      <li>예를 들어, N이 5이고, 탐색 중인 숫자가 8일때, 8%1 = 8 이지만 N이 5 이므로 총 5개까지만 포함해야 한다.</li>
    </ul>
  </li>
  <li>index값이 k보다 크거나 같으면 이분할 한 왼쪽을 재탐색하고, index 값이 작으면 오른쪽을 재탐색한다.</li>
  <li>k에 대한 Lower bound를 이분탐색으로 찾아서 해당 값을 return 한다.</li>
</ol>

<h3 id="코드">코드</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.BufferedReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.InputStreamReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
    <span class="n">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="n">InputStreamReader</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
    
    <span class="kt">long</span> <span class="n">n</span><span class="o">,</span> <span class="n">k</span><span class="o">;</span>
    <span class="n">n</span> <span class="o">=</span> <span class="n">Long</span><span class="o">.</span><span class="na">parseLong</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
    <span class="n">k</span> <span class="o">=</span> <span class="n">Long</span><span class="o">.</span><span class="na">parseLong</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
    
    <span class="kt">long</span> <span class="n">left</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
    <span class="kt">long</span> <span class="n">right</span> <span class="o">=</span> <span class="n">n</span><span class="o">*</span><span class="n">n</span><span class="o">;</span>
    <span class="kt">long</span> <span class="n">mid</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    
    <span class="k">while</span><span class="o">(</span><span class="n">left</span><span class="o">&lt;=</span><span class="n">right</span><span class="o">)</span> <span class="o">{</span>
      <span class="n">mid</span> <span class="o">=</span> <span class="o">(</span><span class="n">left</span><span class="o">+</span><span class="n">right</span><span class="o">)/</span><span class="mi">2</span><span class="o">;</span>
     	<span class="kt">long</span> <span class="n">index</span> <span class="o">=</span> <span class="n">findIndex</span><span class="o">(</span><span class="n">mid</span><span class="o">,</span> <span class="n">n</span><span class="o">);</span>
      
      <span class="k">if</span><span class="o">(</span><span class="n">index</span><span class="o">&gt;=</span><span class="n">k</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">right</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
      <span class="o">}</span> <span class="k">else</span>
        <span class="n">left</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">left</span><span class="o">);</span>
    <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="k">return</span><span class="o">;</span>
  <span class="o">}</span>
  
  <span class="kd">public</span> <span class="kd">static</span> <span class="n">Long</span> <span class="nf">findIndex</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span><span class="o">,</span> <span class="n">in</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">long</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
      <span class="n">cnt</span> <span class="o">+=</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">n</span><span class="o">,</span> <span class="n">num</span><span class="o">/</span><span class="n">i</span><span class="o">);</span>
    <span class="o">}</span>
    
    <span class="k">return</span> <span class="n">cnt</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="유의할-점">유의할 점</h3>

<ol>
  <li>
    <p>여기서 이분탐색 범위 right에는 k값이 들어가도 되고, n*n 값이 들어가도 된다.</p>

    <ul>
      <li>
        <p>배열의 특성상, 앞에 중복되는 숫자가 많기 때문에 index k에 들어가는 값은 무조건 k보다 작은 수이기 때문이다.</p>
      </li>
      <li>
        <p>하지만 논리상으로 1부터 n*n까지를 탐색하는 것이기 때문에 어느 것이 들어가도 상관 없다 (k가 더 빠르긴 하다.)</p>
      </li>
    </ul>
  </li>
  <li>
    <p>1에서 right 값에 k값은 넣는다면 n이 int라도 상관이 없지만, n*n을 넣을 것이라면 right 변수가 Long 타입 이더라도 nxn을 하면서 int형으로 overflow가 발생하고 long 에 담기기 때문에 n이 long 타입으로 선언이 되어야 한다.</p>
  </li>
</ol>

<h3 id="느낀-점">느낀 점</h3>

<ul>
  <li>이분 탐색 문제들을 집중공략 하면서 이분탐색에 대해서 어느 정도 안다고 생각했다. 그리고 이 문제를 푸는데 오후 내내 이분탐색을 응용한 방법이 기억이 나질 않는 것이다…ㅠㅠ 아직 한쪽으로 밖에 생각하지 못하는 것 같다. 한 알고리즘을 익힐 때 여러 응용방법에 대해서 생각하는 힘을 기르기!</li>
  <li>이분 탐색은 할 때마다, 반복문을 빠져나왔을 때 내가 최종적으로 원하는 답이 right 인지 left 인지 헷갈려서 손으로 하나씩 해봐야지 알 수 있었다. 언제는 right 이고 언제는 left인데 분명 일관된 상황이 있을텐데.. 조금 더 분석을 해봐야겠다!!</li>
  <li>변수마다 overflow가 발생하는 시점에 대해서 아직도 모르다니.. java에 아직 미숙하다. int끼리 연산할 때 연산하는 중간에 int 범위를 넘으면 overflow가 발생한다니.. 앞으로 기억하자.</li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>[브루트포스] 백준 1018 - 체스판 다시 칠하기</title>
	  <link>//baek1018</link>
	  <author></author>
	  <pubDate>2020-10-03T10:18:00+00:00</pubDate>
	  <guid>//baek1018</guid>
	  <description><![CDATA[
	     <h2 id="문제">문제</h2>

<p><a href="https://www.acmicpc.net/problem/1018">문제 바로가기</a></p>

<h4 id="문제-분석-">문제 분석 &gt;</h4>

<p>각 칸에 검은색과 흰색이 섞여서 칠해있는 M x N 보드가 있을 때 해당 보드에서 검은색과 흰색이 칠해져 있는 8 x 8 체스판을 만들 때 최소로 다시 칠해야 하는 칸의 갯수는 얼마인지 구하라.</p>

<h4 id="입력-">입력 &gt;</h4>

<p>첫 줄에 N$(8\le N \le 50)$ 과 M$(8 \le M\le 50)$이 주어진다. 두번째 줄부터 보드의 각 행에 대한 정보가 주어진다. 검은색은 B, 흰색은 W로 나타난다.</p>

<h4 id="출력-">출력 &gt;</h4>

<p>다시 칠해야 하는 칸의 최솟값을 출력한다.</p>

<h2 id="예제">예제</h2>

<p><img src="https://user-images.githubusercontent.com/63405904/112264605-77645c80-8cb4-11eb-8409-c2dac955da02.png" alt="image" width="70%" /></p>

<h2 id="접근법">접근법</h2>

<ol>
  <li>8 x 8 체스판을 만들 수 있는 모든 경우의 수를 고려함.</li>
  <li>해당 8 x 8 체스판을 한칸씩 확인하면서 제대로 칠해져 있지 않은 칸 갯수를 구함.</li>
  <li>Min 변수와 비교하여 더 작은 숫자로 업데이트함.</li>
</ol>

<h2 id="코드">코드</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">Scanner</span> <span class="n">sc</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
    <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span> 
    <span class="kt">char</span><span class="o">[][]</span> <span class="n">board</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="o">[</span><span class="n">n</span><span class="o">][</span><span class="n">m</span><span class="o">];</span>
    
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
      <span class="n">String</span> <span class="n">input</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
      <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">m</span><span class="o">;</span><span class="n">j</span><span class="o">++){</span>
        <span class="n">board</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">input</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">);</span>
      <span class="o">}</span>
    <span class="o">}</span>
    
    <span class="kt">int</span> <span class="n">min</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">startX</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">startX</span><span class="o">&lt;</span><span class="n">n</span><span class="o">-</span><span class="mi">7</span><span class="o">;</span><span class="n">startX</span><span class="o">++){</span>
      <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">startY</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">startY</span><span class="o">&lt;</span><span class="n">m</span><span class="o">-</span><span class="mi">7</span><span class="o">;</span><span class="n">startY</span><span class="o">++){</span>
        <span class="kt">char</span> <span class="n">compare</span> <span class="o">=</span> <span class="sc">'B'</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">beginColor</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">beginColor</span><span class="o">&lt;</span><span class="mi">2</span><span class="o">;</span><span class="n">beginColor</span><span class="o">){</span>
          <span class="k">if</span><span class="o">(</span><span class="n">beginColor</span><span class="o">==</span><span class="mi">1</span><span class="o">)</span>
            <span class="n">compare</span> <span class="o">=</span> <span class="sc">'W'</span><span class="o">;</span>
          <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
          <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">k</span><span class="o">=</span><span class="n">startX</span><span class="o">;</span><span class="n">k</span><span class="o">&lt;</span><span class="n">startX</span><span class="o">+</span><span class="mi">8</span><span class="o">;</span><span class="n">k</span><span class="o">++){</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">l</span><span class="o">=</span><span class="n">startY</span><span class="o">;</span><span class="n">l</span><span class="o">&lt;</span><span class="n">startY</span><span class="o">+</span><span class="mi">8</span><span class="o">;</span><span class="n">l</span><span class="o">++){</span>
              <span class="k">if</span><span class="o">(</span><span class="n">board</span><span class="o">[</span><span class="n">k</span><span class="o">][</span><span class="n">l</span><span class="o">]!=</span><span class="n">compare</span><span class="o">)</span>
                <span class="n">count</span><span class="o">++;</span>
              <span class="k">if</span><span class="o">(</span><span class="n">compare</span> <span class="o">==</span> <span class="sc">'B'</span><span class="o">)</span>
                <span class="n">compare</span> <span class="o">=</span> <span class="sc">'W'</span><span class="o">;</span>
              <span class="k">else</span> 
                <span class="n">compare</span> <span class="o">=</span> <span class="sc">'B'</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">if</span><span class="o">(</span><span class="n">compare</span> <span class="o">==</span> <span class="sc">'B'</span><span class="o">)</span>
              <span class="n">compare</span> <span class="o">=</span> <span class="sc">'W'</span><span class="o">;</span>
            <span class="k">else</span>
              <span class="n">compare</span> <span class="o">=</span> <span class="sc">'B'</span><span class="o">;</span>
          <span class="o">}</span>
          <span class="n">min</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">min</span><span class="o">,</span> <span class="n">count</span><span class="o">);</span>
        <span class="o">}</span>
      <span class="o">}</span>
    <span class="o">}</span>
    
    <span class="n">sc</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">min</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="유의할-점">유의할 점</h2>

<ul>
  <li>8 x 8 체스판의 경우의 수를 찾을 때 n-7과 m-7까지만 고려하면 된다! 그 이상은 8 x 8 체스판을 생성하지 못하기 때문.</li>
  <li>체스판이 칠해질 수 있는 2가지 경우, B로 시작할 때와 W로 시작할 때 모두를 고려해야 한다.</li>
</ul>

<h2 id="느낀-점">느낀 점</h2>

<ul>
  <li>Brute force 답게 모든 경우를 다 고려해야만 풀 수 있는 문제였다.</li>
  <li>코드가 깔끔하지 않아서 더 좋은 방법이 있나 찾아보고 리팩토링 해보았지만 여기서 더 효율적인 방법은 찾지 못했다.</li>
  <li>이렇게까지 무식하게까지 비교라니…!!</li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>[알고리즘] 이분 탐색(Binary Search)응용 파라메트릭서치(Parametric Search)</title>
	  <link>//bin-search-parametric-Search</link>
	  <author></author>
	  <pubDate>2020-09-28T10:18:00+00:00</pubDate>
	  <guid>//bin-search-parametric-Search</guid>
	  <description><![CDATA[
	     <p>백준 이분탐색 알고리즘 <a href="https://www.acmicpc.net/problem/1654">문제</a>를 풀다가 <strong>Parametric Search</strong>라는 새로운 개념을 접하게 되었다. 처음 이 랜선 자르기 문제를 접했을 때, 어느 부분에서 이분탐색을 응용해야하는 건지 감이 잡히지 않았다. 아마도 sorting된 특정한 input에 특정한 값을 탐색하는 분야로만 이분탐색을 한정지어서 생각했기 때문에 그 틀에서 벗어난 응용을 생각하기 힘들었던 것 같다. 이런 것을 보면 아직 알고리즘 쪽으로 한참은 더 발전해야 한다고 생각한다.</p>

<h3 id="parametric-search파라메트릭-서치">Parametric Search(파라메트릭 서치)</h3>

<h5 id="이진탐색과의-차이점">이진탐색과의 차이점:</h5>

<ul>
  <li>
    <p>주어진 일련의 값들이 아니라, 주어진 범위 내에서 원하는 값이나 특정한 조건에 일치하는 값을 찾아내는 알고리즘.</p>

    <p>Ex. 이진 탐색 - 1~9에서 3이라는 값을 찾아내는 알고리즘</p>

    <p>​	   파라메트릭 서치 - 1~9 범위에서 어떠한 조건을 만족하는 3을 찾아가는 알고리즘.</p>
  </li>
</ul>

<h5 id="장점">장점:</h5>

<p>Parametric Search를 사용하면 최적화 문제를 결정 문제로 바꾸어 풀 수 있는 장점이 있다.</p>

<ul>
  <li>ex. 최대값, 최소값을 찾는 문제 -&gt; 특정 값이 어떤 조건을 만족하는지 확인하는 문제.</li>
</ul>

<h3 id="parametric-search를-응용한-랜선-자르기-풀이">Parametric Search를 응용한 [랜선 자르기] 풀이</h3>

<ul>
  <li>
    <p><strong>[문제 분석]</strong>: 오영식은 K개의 각기 다른 길이를 지닌 랜선을 가지고 있다. 이 랜선들을 가지고 N 개의 랜선을 만들고 싶을 때, N개 혹은 이상의 랜선을 맨들 수 있는 랜선의 최대 길이는 무엇인가?</p>
  </li>
  <li>
    <p><strong>[입력]</strong>: 랜선 갯수 k, 만들고 싶은 랜선 갯수 n</p>

    <p>​			k 번 동안 각 랜선의 길이</p>
  </li>
  <li>
    <p><strong>[문제풀이]</strong>:</p>

    <ol>
      <li>가장 긴 랜선의 길이를 범위로 &lt;1~랜선 길이&gt;를 범위로 parametric search를 한다.</li>
      <li>이분 탐색과 동일하게 탐색하지만, 같을 경우 해당 mid 값을 return 하는 것이 아니라, mid+1 부터 추가적으로 탐색을 진행해야 한다.
        <ul>
          <li>이것은 특정한 값을 찾는 것이 아니라, 최대 길이를 찾고 싶은 것이기 때문에 추가탐색을 해서 최대로 갈 수 있는 범위 까지 탐색해야하기 때문이다.</li>
        </ul>
      </li>
    </ol>

    <p>** 주의 사항: index가 합쳐지면서 long을 넘기 때문에 left, right, middle은 long을 사용해야 한다.</p>
  </li>
</ul>

<h4 id="코드">[코드]</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.BufferedReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.InputStreamReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.StringTokenizer</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span><span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">{</span>
    <span class="n">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="n">InputStreamReader</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
    <span class="n">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
    
    <span class="kt">int</span> <span class="n">k</span><span class="o">,</span> <span class="n">n</span><span class="o">;</span>
    <span class="n">k</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
    <span class="n">n</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
    
    <span class="kt">int</span><span class="o">[]</span> <span class="n">input</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">k</span><span class="o">];</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">k</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
      <span class="n">input</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
    <span class="o">}</span>
    <span class="n">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">input</span><span class="o">);</span>
    
    <span class="kt">long</span> <span class="n">left</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
    <span class="kt">long</span> <span class="n">right</span> <span class="o">=</span> <span class="n">input</span><span class="o">[</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="o">];</span>
    <span class="kt">long</span> <span class="n">middle</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    
    <span class="k">while</span><span class="o">(</span><span class="n">left</span><span class="o">&lt;=</span><span class="n">right</span><span class="o">)</span> <span class="o">{</span>
      <span class="n">middle</span> <span class="o">=</span> <span class="o">(</span><span class="n">left</span><span class="o">+</span><span class="n">right</span><span class="o">)/</span><span class="mi">2</span><span class="o">;</span>
      <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
      <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">k</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
        <span class="n">count</span> <span class="o">+=</span> <span class="n">input</span><span class="o">[</span><span class="n">i</span><span class="o">]/</span><span class="n">middle</span><span class="o">;</span>
      <span class="o">}</span>
      <span class="k">if</span><span class="o">(</span><span class="n">count</span><span class="o">&lt;</span><span class="n">n</span><span class="o">){</span>
        <span class="n">right</span> <span class="o">=</span> <span class="n">middle</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span>
      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
        <span class="n">left</span> <span class="o">=</span> <span class="n">middle</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span>
      <span class="o">}</span>
    <span class="o">}</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">right</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>


	  ]]></description>
	</item>

	<item>
	  <title>[동적계획법] 이항계수</title>
	  <link>//binomial-coefficient</link>
	  <author></author>
	  <pubDate>2020-09-24T10:18:00+00:00</pubDate>
	  <guid>//binomial-coefficient</guid>
	  <description><![CDATA[
	     <p>이런 말이 있다.</p>

<blockquote>
  <p>동적 계획법이라는 말은 전문가들이 전문가들처럼 보여줄 수 있도록 해주는 말이고 일반인들에게는 그냥 ‘기억해서 풀기’ 다.</p>
</blockquote>

<p>이항계수에 관련한 성질은 기억해두면 이후 코딩이나 알고리즘 문제를 풀 때 유용하기 때문에 기록해 준다. 이항계수를 풀 때 중요한 성질은 다음과 같다.</p>

<script type="math/tex; mode=display">{n \choose k} = {n \choose n-k}</script>

<script type="math/tex; mode=display">{n \choose k} = {n-1 \choose k} + {n-1 \choose k-1}</script>

<script type="math/tex; mode=display">\sum_{k=1}^n {n \choose k} = 2^n</script>

<p>위의 공식은 이항계수의 정의식을 참고해서 유도하는 방법으로 이항 계수의 정의식을 알고 있어야 한다.</p>

<script type="math/tex; mode=display">{n \choose k} = _{n}\mathrm{C}_{k} = \frac{n!}{(n-k)!k!}</script>

<h3 id="동적-계획법을-활용한-이항계수-풀이">동적 계획법을 활용한 이항계수 풀이</h3>

<p>이항계수에 관련한 알고리즘 문제를 풀기 위해서 이항계수의 2번째 성질을 이용하기로 한다. 그 이유는 2번째 성질이 동적 계획법 활용에 알맞게 더 작은 부분으로 분할하여 정복 할 수 있는 성질을 잘 드러내고 있기 때문이다. 다음 방법을 사용해서 알고리즘을 풀어보자.</p>

<p>여기서 일반 재귀나 분할 정복보다 동적 계획법에 알맞게 진행하기 위해서 memoization을 사용한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//DAC</span>
<span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span><span class="o">{</span>
	<span class="kd">static</span> <span class="kt">long</span><span class="o">[][]</span> <span class="n">value</span><span class="o">;</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
		<span class="n">Scanner</span> <span class="n">sc</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
		<span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>

		<span class="n">value</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">long</span><span class="o">[</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="o">][</span><span class="n">k</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>

		<span class="n">coef</span><span class="o">(</span><span class="n">n</span><span class="o">,</span> <span class="n">k</span><span class="o">);</span>
		<span class="kt">long</span> <span class="n">result</span> <span class="o">=</span> <span class="n">value</span><span class="o">[</span><span class="n">n</span><span class="o">][</span><span class="n">k</span><span class="o">];</span>
		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">coef</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">){</span>
		<span class="k">if</span> <span class="o">(</span><span class="n">a</span><span class="o">==</span><span class="n">b</span><span class="o">){</span>
			<span class="n">value</span><span class="o">[</span><span class="n">a</span><span class="o">][</span><span class="n">b</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
			<span class="k">return</span><span class="o">;</span>
		<span class="o">}</span>
		<span class="k">if</span> <span class="o">(</span><span class="n">b</span><span class="o">==</span><span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">value</span><span class="o">[</span><span class="n">a</span><span class="o">][</span><span class="n">b</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
			<span class="k">return</span><span class="o">;</span>
		<span class="o">}</span>
		<span class="k">else</span> <span class="o">{</span>
      
			<span class="k">if</span><span class="o">(</span><span class="n">value</span><span class="o">[</span><span class="n">a</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="n">b</span><span class="o">]</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
				<span class="n">coef</span><span class="o">(</span><span class="n">a</span><span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="n">b</span><span class="o">);</span>
			<span class="k">if</span><span class="o">(</span><span class="n">value</span><span class="o">[</span><span class="n">a</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="n">b</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> 
				<span class="n">coef</span><span class="o">(</span><span class="n">a</span><span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="n">b</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span>
			<span class="n">value</span><span class="o">[</span><span class="n">a</span><span class="o">][</span><span class="n">b</span><span class="o">]</span> <span class="o">=</span> <span class="n">value</span><span class="o">[</span><span class="n">a</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="n">b</span><span class="o">]</span> <span class="o">+</span> <span class="n">value</span><span class="o">[</span><span class="n">a</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="n">b</span><span class="o">-</span><span class="mi">1</span><span class="o">];</span>
			<span class="k">return</span><span class="o">;</span>
		<span class="o">}</span>
	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<p>단순히 이항계수의 정의를 이용한 유도식을 재귀를 통해서 구현한 것이다. 다음과 같이 구현하면 작은 숫자들에 대해서는 충분히 답을 낼 수 있지만 숫자가 커지게 되면 할당해야 하는 배열의 크기가 기하급수적으로 커지게되고, 그 결과 값 또한 long 타입으로도 담을 수 없기 때문에 매우 제한적이다. 따라서 <a href="https://www.acmicpc.net/problem/11401">백준 11401</a>에서는 이항계수를 소수인 1,000,000,007로 나눈 프로그램을 작성하도록 되어 있다. 그 연산에 대해서는 2가지 접근 방법이 있다.</p>

<p>우선, 왜 위에서 소개한 이항계수 정의식에 바로 % 1,000,000,007을 하지 않는지에 대한 이유를 짚고 넘어가야 한다. 이항계수 정의식은 분수꼴이기 때문에 소수 p로 % 연산을 했을 때 분자와 분모에 나뉘어서 적용되지 않는다.</p>

<script type="math/tex; mode=display">\frac{N!}{K!(N-K)!}\%p\qquad  \Longrightarrow \qquad \text{나뉘어서 적용 불가}</script>

<h3 id="접근-방법--1-확장-유클리드-알고리즘">접근 방법  1. 확장 유클리드 알고리즘</h3>

<p>확장 유클리드 알고리즘은 기본 원리로 유클리드 호제법으로 GCD를 구하는 것을 따라가며, 두 정수 A,B가 주어졌을 때, 베주 항등식인 $Ax+By=gcd(A,B)$ 에서 gcd(A,B)를 구하고 정수해 (x,y)를 구하는 알고리즘이다.</p>

<p>여기서 사용하고 싶은 확장 유클리드 알고리즘의 항을 써보면 다음과 같다.</p>

<script type="math/tex; mode=display">(AB^{-1}) \% p</script>

<p>위에서 말했던 이항계수 정의식을 보면 $A$와 $B$에 각각 무엇이 대입되는지 알 수 있다. 여기서 확장 유클리드 알고리즘을 사용하는데, 확장 유클리드 알고리즘은 두 수의 최대공약수와 베주 항등식의 $x$와 $y$까지 구할 수 있는 알고리즘이다.</p>

<script type="math/tex; mode=display">Bx + py =1 \qquad (i)</script>

<script type="math/tex; mode=display">Bx \equiv 1 \pmod{p} \qquad (ii)</script>

<p>위의 (i)에서 확장 유클리드 알고리즘으로 정수해 $(x, y)$를 구할 수 있는데 그럼 다음 식에 대입하면 원하는 식을 구할 수 있다.</p>

<script type="math/tex; mode=display">(AB^{-1}) \% p \\= (AB^{-1} \cdot 1) \%p\\=(AB^{-1} \cdot Bx)\%p\\=Ax\%p</script>

<p>결론은, <strong>베주 항등식에서 구한 $x$와 정의식에서 정의한 $A$를 곱한 것을 $p$로 modular 하면 원하는 식을 구할 수 있다.</strong></p>

<p>여기서 확장 유클리드 알고리즘을 이해하고 최종적으로 $x$를 구하는 것이 어렵게 느껴졌는데, 구현해보니 지나치게 길거나 복잡하지는 않았다. 재귀를 사용해서 구현하였다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">euc</span><span class="o">(</span><span class="kt">long</span> <span class="n">p</span><span class="o">,</span> <span class="kt">long</span> <span class="n">B</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">if</span><span class="o">(</span><span class="n">p</span><span class="o">%</span><span class="n">B</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">){</span>
    <span class="n">euc</span><span class="o">(</span><span class="n">B</span><span class="o">,</span> <span class="n">p</span><span class="o">%</span><span class="n">B</span><span class="o">);</span>
    <span class="n">temp</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
    <span class="n">y</span> <span class="o">=</span> <span class="n">x</span> <span class="o">-</span> <span class="o">(</span><span class="n">p</span><span class="o">/</span><span class="n">B</span><span class="o">)</span> <span class="o">*</span> <span class="n">y</span><span class="o">;</span>
    <span class="n">x</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>
  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
    <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="n">y</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong><small>[참고 자료]: https://onsil-thegreenhouse.github.io/programming/problem/2018/04/02/problem_combination/</small></strong></p>

	  ]]></description>
	</item>

	<item>
	  <title>[알고리즘]분할정복 - 백준 2261 가장 가까운 두 점</title>
	  <link>//dac-closestPoint</link>
	  <author></author>
	  <pubDate>2020-09-17T10:18:00+00:00</pubDate>
	  <guid>//dac-closestPoint</guid>
	  <description><![CDATA[
	     <p>분할정복 알고리즘을 배울 때 나오는 유명한 문제 중 하나이다. 하지만 난이도가 굉장히 높기 때문에 쉽게 접근하기 어려웠는데, 분할 정복에 남은 마지막 문제를 그냥 안풀고 넘어가기엔 마음에 걸려서 마음먹고 공부해보기로 했다.</p>

<p>백준 사이트에서도 검색을 추천하여 알고리즘을 공부하기를 권하기 때문에 검색을 통해 <a href="https://octorbirth.tistory.com/274">좋은 글</a>을 발견했다. 그리고 해당 문제의 솔루션을 이해하는데만 집중했다.</p>

<p>분할정복 문제를 반복해서 풀어보니 분할정복은 DP 만큼이나 여러가지 형태의 문제가 있으니 최대한 많은 문제들을 풀어보는 것이 중요하다는 것을 알 수 있었다. 그리고 여러 문제를 풀어 본 결과 다음을 깨달을 수 있었다.</p>

<ul>
  <li>분할정복에서 분할을 하는 이유 중 하나는 <strong>굳이 필요 없는 연산/비교 등을 하지 않기 위해서</strong>이다.</li>
</ul>

<p>다르게 이야기하면 <strong>쓸데없는 것을 쳐내기 위해서</strong> 특정 기준에 따라서 계속 분할을 하는 것이다. <a href="https://www.acmicpc.net/problem/2261">백준 2261</a> 문제를 보면 어떤 의미인지 알 수 있다. 이 사실이 나로 하여금 더 구현을 잘하게 해주지는 못하지만 <em>개발자 마인드</em>를 갖추는데 어느 정도 일조했다고 생각한다. 알고리즘 문제들을 풀면 풀수록 쌓이는 <em>개발자 마인드</em> 룰을 통해서 새로운 문제를 바라보더라도 개발자스럽게 생각해야지 적합한 알고리즘을 찾을 수 있다.</p>

<p>이렇게 지나지게 많은 비교 연산을 해야할 때 필요 없는 것이 무엇인지부터 접근해야 한다.</p>

<h2 id="문제-해결">문제 해결</h2>

<p>가장 가까운 두 점 문제의 솔루션을 요약하면 다음과 같다.</p>

<ol>
  <li>x값 기준으로 정렬.</li>
  <li>중간을 기준으로 왼쪽과 오른쪽을 나눔.</li>
  <li>왼쪽 가장 가까운 거리 d1, 오른쪽 가장 가까운 거리 d2 찾아냄.</li>
  <li>d1과 d2 중 더 최소값을 d 에다가 저장함.</li>
  <li>중간으로 가로지르는 점들 중 중앙과 d 이상 차이나는 점들을 제외함.</li>
  <li>해당 점들을 y 기준으로 정렬해서 위의 점과 높이가 d 이상 차이나는 점들을 제외하여 비교하여 d3을 구함.</li>
</ol>

<p><img src="https://user-images.githubusercontent.com/63405904/111621456-5c649900-882b-11eb-9fc0-3f1dbdaca71e.png" alt="image" /></p>

<p>위의 그림을 보면 보다 직관적으로 이해할 수 있다. 위 과정을 반복하면서 최소값을 지속적으로 업데이트하면 최종적으로 최소값을 찾을 수 있다.</p>

<p>이렇게 x 값을 기준으로 정렬해서 제외한 후에, 아래 사진과 같이 y 값을 기준으로 또 정렬하여 제외시키면 된다.</p>

<p><img src="https://user-images.githubusercontent.com/63405904/111621504-69818800-882b-11eb-9fb4-7be3a658c7b8.png" alt="image" /></p>

<h2 id="솔루션-구현">솔루션 구현</h2>

<p>다음 솔루션을 구현하기 위해서 이해하거나 응용하면 좋을 개념들은 다음과 같다.</p>

<ol>
  <li>JAVA comparator</li>
  <li>재귀</li>
  <li>객체 생성</li>
</ol>

<p>“완전히 모르는 건 아닌데?” 라고 생각하기 쉽지만 제대로 생각해보면 나는 잘 활용하지 않았던 개념들이 있었다. 예를 들어, comparator를 생성하여 정렬하기 보다 조금 돌아가지만 이전에 하던 방식으로 일일이 정렬하는 방법을 주로 사용하고, 객체를 생성하여 코드가 직관적이게 되기 보다 배열에 나만 아는 규칙으로 끼워 넣는 경우가 많았던 것 같다. 한번 이 모든 개념들을 제대로 응용해서 좋은 코드를 짜보자.</p>

<p>아래의 대부분의 코드는 <a href="https://octorbirth.tistory.com/274">사이트</a>에서 참고하고 내가 조금의 업그레이드를 시킨 정도이다.</p>

<h4 id="java-comparator">JAVA Comparator</h4>

<p>JAVA Comparator는 배열이나 객체 등을 sorting 하기 위해서 매우 유용한 인터페이스이다. 숫자가 아닌 무언가, 또는 조금 다른 기준을 통해서 정렬을 하기 원할 때, 이 comparator를 정의하여 사용하면 매우 유용하다.</p>

<p>기본적인 사용방법은 다음과 같다.</p>

<ol>
  <li>Comparator를 implement 한 class 정의</li>
  <li><code class="highlighter-rouge">Arrays.sort</code>나, <code class="highlighter-rouge">Collections.sort</code>에서 내부 정렬 기준을 구현 하면됨.</li>
</ol>

<p>비슷한 기능을 하는 인터페이스로는 Comparable이 있다. 이것은 어떠한 클래스에서 implement 하여 내부에 있는 compareTo 함수를 통해 클래스 기본 정렬 기준을 설정하는 것이다.</p>

<table>
  <thead>
    <tr>
      <th>Comparable</th>
      <th>클래스의 기본 정렬 기준을 설정하는 인터페이스</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Comparator</td>
      <td>기본 정렬 기준과는 다르게 정렬하고 싶을 때 이용하는 클래스</td>
    </tr>
  </tbody>
</table>

<p>이번에 <strong>가장 가까운 두 점</strong> 문제에서는 Comparator를 사용하여 sort 메소드를 통해서 사용할 예정이다. 우선 점들을 x좌표 기준으로 정렬하고, 이후에 y 기준으로 정렬하는 2가지 기준으로 정렬하는 클래스를 생성한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">xComparator</span> <span class="kd">implements</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Point</span><span class="o">&gt;</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="n">Point</span> <span class="n">p1</span><span class="o">,</span> <span class="n">Point</span> <span class="n">p2</span><span class="o">){</span>
    <span class="k">return</span> <span class="n">p1</span><span class="o">.</span><span class="na">x</span> <span class="o">-</span> <span class="n">p2</span><span class="o">.</span><span class="na">x</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">yComparator</span> <span class="kd">implements</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Point</span><span class="o">&gt;</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="n">Point</span> <span class="n">p1</span><span class="o">,</span> <span class="n">Point</span> <span class="n">p2</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">p1</span><span class="o">.</span><span class="na">y</span> <span class="o">-</span> <span class="n">p2</span><span class="o">.</span><span class="na">y</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="재귀-recursion">재귀 Recursion</h4>

<p>거의 모든 알고리즘 문제의 일부분이 되는 재귀이지만 이번 문제에서 재귀를 활용하면서 재귀에 대해서 한층 더 이해할 수 있었다. 재귀에도 tail-recursion과 head-recursion이 나누어져 있고, 코드가 복잡해 질수록 더더욱 어느 타이밍에 재귀를 호출하는지가 매우 중요하다.</p>

<p>이번 풀이에서는 앞서 소개한 문제해결 방식을 재귀적으로 반복하여 매번 왼쪽, 오른쪽, 중간 가로지르는 부분으로 분할해 최소 거리를 찾도록 하였다. 이렇게 head-recursion으로 호출한 후에 return 된 최소 거리를 저장하고 이후에 처리해야 할 코드를 수행한다.</p>

<h4 id="객체-생성">객체 생성</h4>

<p>매번 이런 두 점과 같은 문제가 나올 때, 2차원 배열을 생성해서 수행했었다. 물론 그래도 아무 문제가 없고 이런 경우가 메모리나 속도 측면에서 더욱 효율적인 경우가 많다. 하지만 객체를 생성해서 데이터를 저장해야만 할 때가 있는데, 객체 생성을 해서 저장하는게 익숙하지 못해서 하지 못하는 경우가 많기 때문에 이번 문제에서 점의 좌표를 클래스 객체에 한번 담에 보았다. 생각보다 매우 간단하지만 첫 걸음이 어려워서 자주 사용하지 못했다고 생각한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Point</span> <span class="o">{</span>
  <span class="kt">int</span> <span class="n">x</span><span class="o">;</span>
  <span class="kt">int</span> <span class="n">y</span><span class="o">;</span>
  
  <span class="kd">public</span> <span class="nf">Point</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">){</span>
    <span class="k">this</span><span class="o">.</span><span class="na">x</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">y</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="전체-코드">전체 코드</h4>

<p>다음과 같은 구성을 가지고 있다.</p>

<ol>
  <li>점들 사이의 최소값을 분할정복으로 찾는 minDistance()</li>
  <li>특정 기준 이하의 점들 사이의 최소값을 brute-force로 찾는 searchMin()</li>
  <li>점들 사이의 거리를 계산하는 distance()</li>
  <li>xComparator와 yComparator</li>
  <li>Point 클래스 객체</li>
</ol>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.BufferedReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.InputStreamReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Comparator</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.StringTokenizer</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Collections</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
  <span class="kd">static</span> <span class="n">Point</span><span class="o">[]</span> <span class="n">value</span><span class="o">;</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
    <span class="n">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="n">InputStreamReader</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
    <span class="n">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    
    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
    <span class="n">value</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Point</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
    
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
      <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
      <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
      <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
      <span class="n">value</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Point</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">);</span>
    <span class="o">}</span>
    
    <span class="n">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">value</span><span class="o">,</span> <span class="k">new</span> <span class="n">xComparator</span><span class="o">());</span>
    
    <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="n">minDistance</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">answer</span><span class="o">);</span>
    <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    
    <span class="k">return</span><span class="o">;</span>
  <span class="o">}</span>
  
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">minDistance</span><span class="o">(</span><span class="kt">int</span> <span class="n">begin</span><span class="o">,</span> <span class="kt">int</span> <span class="n">end</span><span class="o">){</span>
    <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="n">end</span><span class="o">-</span><span class="n">begin</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span>
    <span class="k">if</span><span class="o">(</span><span class="n">size</span><span class="o">&lt;=</span><span class="mi">3</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">return</span> <span class="nf">searchMin</span><span class="o">(</span><span class="n">begin</span><span class="o">,</span> <span class="n">end</span><span class="o">);</span>
    <span class="o">}</span>
    
    <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="o">(</span><span class="n">begin</span><span class="o">+</span><span class="n">end</span><span class="o">)/</span><span class="mi">2</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">d1</span> <span class="o">=</span> <span class="n">minDistance</span><span class="o">(</span><span class="n">begin</span><span class="o">,</span> <span class="n">mid</span><span class="o">);</span>
    <span class="kt">int</span> <span class="n">d2</span> <span class="o">=</span> <span class="n">minDistance</span><span class="o">(</span><span class="n">mid</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">end</span><span class="o">);</span>
    
    <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">d1</span><span class="o">,</span> <span class="n">d2</span><span class="o">);</span>
    
    <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Point</span><span class="o">&gt;</span> <span class="n">mid_list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
    
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">mid</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">&gt;=</span><span class="n">begin</span><span class="o">;</span><span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
      <span class="kt">int</span> <span class="n">xDist</span> <span class="o">=</span> <span class="n">value</span><span class="o">[</span><span class="n">mid</span><span class="o">].</span><span class="na">x</span> <span class="o">-</span> <span class="n">value</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">x</span><span class="o">;</span>
      <span class="k">if</span><span class="o">((</span><span class="n">xDist</span><span class="o">*</span><span class="n">xDist</span><span class="o">)</span> <span class="o">&lt;</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">mid_list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">value</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
      <span class="o">}</span> <span class="k">else</span>
        <span class="k">break</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">mid</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">end</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
      <span class="kt">int</span> <span class="n">xDist</span> <span class="o">=</span> <span class="n">value</span><span class="o">[</span><span class="n">mid</span><span class="o">].</span><span class="na">x</span> <span class="o">-</span> <span class="n">value</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">x</span><span class="o">;</span>
      <span class="k">if</span><span class="o">((</span><span class="n">xDist</span><span class="o">*</span><span class="n">xDist</span><span class="o">)</span> <span class="o">&lt;</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">mid_list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">value</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
      <span class="o">}</span> <span class="k">else</span>
        <span class="k">break</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="n">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">mid_list</span><span class="o">,</span> <span class="k">new</span> <span class="n">yComparator</span><span class="o">());</span>
    <span class="kt">int</span> <span class="n">mlist_size</span> <span class="o">=</span> <span class="n">mid_list</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
    
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">mlist_size</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
      <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">mlist_size</span><span class="o">;</span><span class="n">j</span><span class="o">++){</span>
        <span class="kt">int</span> <span class="n">yDist</span> <span class="o">=</span> <span class="n">mid_list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="na">y</span> <span class="o">-</span> <span class="n">mid_list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">j</span><span class="o">).</span><span class="na">y</span><span class="o">;</span>
        <span class="k">if</span><span class="o">(</span><span class="n">yDist</span><span class="o">*</span><span class="n">yDist</span> <span class="o">&lt;</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
          <span class="kt">int</span> <span class="n">dist</span> <span class="o">=</span> <span class="n">distance</span><span class="o">(</span><span class="n">mid_list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">),</span> <span class="n">mid_list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">j</span><span class="o">));</span>
          <span class="k">if</span><span class="o">(</span><span class="n">dist</span> <span class="o">&lt;</span> <span class="n">result</span><span class="o">)</span>
            <span class="n">result</span> <span class="o">=</span> <span class="n">dist</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">else</span>
          <span class="k">break</span><span class="o">;</span>
      <span class="o">}</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
  <span class="o">}</span>
  
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">distance</span><span class="o">(</span><span class="n">Point</span> <span class="n">a</span><span class="o">,</span> <span class="n">Point</span> <span class="n">b</span><span class="o">){</span>
    <span class="k">return</span><span class="o">(</span><span class="n">a</span><span class="o">.</span><span class="na">x</span><span class="o">-</span><span class="n">b</span><span class="o">.</span><span class="na">x</span><span class="o">)*(</span><span class="n">a</span><span class="o">.</span><span class="na">x</span><span class="o">-</span><span class="n">b</span><span class="o">.</span><span class="na">x</span><span class="o">)</span> <span class="o">+</span> <span class="o">(</span><span class="n">a</span><span class="o">.</span><span class="na">y</span><span class="o">-</span><span class="n">b</span><span class="o">.</span><span class="na">y</span><span class="o">)*(</span><span class="n">a</span><span class="o">.</span><span class="na">y</span><span class="o">-</span><span class="n">b</span><span class="o">.</span><span class="na">y</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
  
<span class="kd">class</span> <span class="nc">xComparator</span> <span class="kd">implements</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Point</span><span class="o">&gt;</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="n">Point</span> <span class="n">p1</span><span class="o">,</span> <span class="n">Point</span> <span class="n">p2</span><span class="o">){</span>
    <span class="k">return</span> <span class="n">p1</span><span class="o">.</span><span class="na">x</span> <span class="o">-</span> <span class="n">p2</span><span class="o">.</span><span class="na">x</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">yComparator</span> <span class="kd">implements</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Point</span><span class="o">&gt;</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="n">Point</span> <span class="n">p1</span><span class="o">,</span> <span class="n">Point</span> <span class="n">p2</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">p1</span><span class="o">.</span><span class="na">y</span> <span class="o">-</span> <span class="n">p2</span><span class="o">.</span><span class="na">y</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Point</span> <span class="o">{</span>
  <span class="kt">int</span> <span class="n">x</span><span class="o">;</span>
  <span class="kt">int</span> <span class="n">y</span><span class="o">;</span>
  
  <span class="kd">public</span> <span class="nf">Point</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">){</span>
    <span class="k">this</span><span class="o">.</span><span class="na">x</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">y</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>


	  ]]></description>
	</item>

	<item>
	  <title>순열과 조합</title>
	  <link>//permutation-n-combination</link>
	  <author></author>
	  <pubDate>2020-09-12T10:18:00+00:00</pubDate>
	  <guid>//permutation-n-combination</guid>
	  <description><![CDATA[
	     <p>Back-tracking 알고리즘을 공부할 때 제일 먼저 구현하는 것이 순열과 조합이다.</p>

<p>Back-tracking 알고리즘에 대해서 입문하고 감을 잡기 위해서 시작하기 좋은 코드이다. 따라서 순열과 조합을 구하는 코드를 보고 외워서 머릿속에 저장해두는 것을 추천한다.</p>

<blockquote>
  <p>순열과 조합의 차이점:</p>

  <ul>
    <li>순열: 순열은 순서가 있는 조합이다.(A Permutation is an ordered Combination)</li>
    <li>조합: 조합은 순서를 생각하지 않고 선택만 한다.</li>
  </ul>
</blockquote>

<h5 id="순열-코드">순열 코드</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//Back-tracking 알고리즘</span>
<span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Stack</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Iterator</span><span class="o">;</span>
<span class="kd">class</span> <span class="nc">Main</span><span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="n">Stack</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Stack</span><span class="o">&lt;&gt;();</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
  
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
    <span class="n">Scanner</span> <span class="n">sc</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
    
    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
    <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
    <span class="n">sc</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="n">DFS</span><span class="o">(</span><span class="n">n</span><span class="o">,</span><span class="n">m</span><span class="o">);</span>
  <span class="o">}</span>
  
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">DFS</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span><span class="o">,</span> <span class="kt">int</span> <span class="n">count</span><span class="o">){</span>
    <span class="k">if</span><span class="o">(</span><span class="n">cnt</span><span class="o">==</span><span class="n">count</span><span class="o">){</span>
      <span class="n">print</span><span class="o">();</span>
      <span class="k">return</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">num</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
      <span class="k">if</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">search</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span>
        <span class="k">continue</span><span class="o">;</span>
      <span class="n">st</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
      <span class="n">cnt</span><span class="o">++;</span>
      <span class="n">DFS</span><span class="o">(</span><span class="n">num</span><span class="o">,</span> <span class="n">count</span><span class="o">);</span>
      <span class="n">st</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
      <span class="n">cnt</span><span class="o">--;</span>
    <span class="o">}</span>
  <span class="o">}</span>
 
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">(){</span>
    <span class="n">Iterator</span> <span class="n">value</span> <span class="o">=</span> <span class="n">st</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>
    <span class="k">while</span><span class="o">(</span><span class="n">value</span><span class="o">.</span><span class="na">hasNext</span><span class="o">()){</span>
      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"%d "</span><span class="o">,</span> <span class="n">value</span><span class="o">.</span><span class="na">next</span><span class="o">());</span> 
    <span class="o">}</span>   
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"\n"</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h5 id="조합-코드">조합 코드</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//Back-tracking 알고리즘</span>
<span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Stack</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Iterator</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span><span class="o">{</span>
  <span class="kd">static</span> <span class="n">Stack</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Stack</span><span class="o">&lt;&gt;();</span>
  <span class="kd">static</span> <span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
  
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
    <span class="n">Scanner</span> <span class="n">sc</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
    <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
    <span class="n">sc</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    
    <span class="n">DFS</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">n</span><span class="o">,</span> <span class="n">m</span><span class="o">);</span>
  <span class="o">}</span>
  
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">DFS</span><span class="o">(</span><span class="kt">int</span> <span class="n">idx</span><span class="o">,</span> <span class="kt">int</span> <span class="n">num</span><span class="o">,</span> <span class="kt">int</span> <span class="n">count</span><span class="o">){</span>
    <span class="k">if</span><span class="o">(</span><span class="n">cnt</span> <span class="o">==</span> <span class="n">count</span><span class="o">){</span>
      <span class="n">print</span><span class="o">();</span>
      <span class="k">return</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="n">idx</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">num</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
      <span class="k">if</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">search</span><span class="o">(</span><span class="n">i</span><span class="o">)!=-</span><span class="mi">1</span><span class="o">)</span>
        <span class="k">continue</span><span class="o">;</span>
      <span class="n">st</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
      <span class="n">cnt</span><span class="o">++;</span>
      <span class="n">DFS</span><span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">num</span><span class="o">,</span> <span class="n">count</span><span class="o">);</span>
      <span class="n">st</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
      <span class="n">cnt</span><span class="o">--;</span>
    <span class="o">}</span>
  <span class="o">}</span>
  
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">(){</span>
    <span class="n">Iterator</span> <span class="n">value</span> <span class="o">=</span> <span class="n">st</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>
    <span class="k">while</span><span class="o">(</span><span class="n">value</span><span class="o">.</span><span class="na">hasNext</span><span class="o">()){</span>
      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"%d "</span><span class="o">,</span> <span class="n">value</span><span class="o">.</span><span class="na">next</span><span class="o">());</span>
    <span class="o">}</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"\n"</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>


	  ]]></description>
	</item>

	<item>
	  <title>재귀 vs. 반복</title>
	  <link>//recursion</link>
	  <author></author>
	  <pubDate>2020-09-11T10:18:00+00:00</pubDate>
	  <guid>//recursion</guid>
	  <description><![CDATA[
	     <p><strong>Binary Search</strong> 이분탐색을 구현하면서, 계속 런타임 에러가 났다. 처음에 재귀로 구현을 시작했는데, 재귀에 너무 큰 값이 들어오면서 stack overflow 에러가 났나 싶어서 다시 while 문으로 구현했다. 하지만 while 문으로 구현한 이후에도 계속 런타임 에러가 떠서 확인해보니, n과 m을 헷갈려서 잘못 적었던 것이었다.</p>

<p>이왕 while 문으로 구현해서 맞은 거, 재귀와 비교해 보자 해서 재귀를 돌려 보았더니, 재귀가 훨씬 빠르고 메모리 효율도 좋은 것이었다. 일반적으로 생각했을 때, 재귀는 매번 메모리를 할당하면서 새로운 함수를 call 해주어야 하고, 또 그만큼의 시간과 공간이 더 필요해서 반복문에 비해 성능이 다소 떨어진다고 알고 있었지만, 훨씬 빠르고 메모리 효율도 좋아서 그 이유에 대해서 찾아보게 되었다. 정답은 <strong>Tail-recursion.</strong></p>

<h2 id="tail-recursion">Tail-Recursion</h2>

<h3 id="tail-recursion이란">Tail-Recursion이란?</h3>

<p>Tail-Recursion이란 recursion 함수에서 가장 나중에 실행되는 명령어를 뜻한다. 마지막 시행 명령이 재귀 호출이라면, 해당 함수는 tail-recursion의 형태를 가지고 있다고 할 수 있다.</p>

<h3 id="tail-recursion의-효능">Tail-Recursion의 효능</h3>

<p>Tail-recursion은 주로 non tail recursion에 비교해서 성능이 더 좋은 것으로 나타난다. 마지막 recursion을 call 하고, 해당 호출에 연산이 포함되어 있지 않는다면 컴파일러에 의해서 해당 tail-recursion 함수는 optimize 된다. 이 이유는, tail-recursion 함수의 경우, 함수의 가장 마지막으로 실행하는 것이 recursive call이기 때문에 현재 머물고 있는 함수에 더 이상 진행할 instruction이 없고 따라서 현재 함수를 stack에 저장하지 않아도 된다. 때문에 non tail recursion 보다 더 빠르고, stack 메모리를 사용하지 않는 장점을 지닌다.</p>

<p>주의할 것은 다음과 같이 마지막에 recursive 함수 호출은 한다고 하더라도, 연산이 끼어 있다면, optimize 될 수 없다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">static</span> <span class="kt">int</span> <span class="nf">fac</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span><span class="o">){</span>
	<span class="k">if</span><span class="o">(</span><span class="n">num</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
		<span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
	
	<span class="k">return</span> <span class="n">n</span><span class="o">*</span><span class="n">fac</span><span class="o">(</span><span class="n">num</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="결과-비교">결과 비교</h3>

<p>백준 이분 탐색을 풀었을 때 결과 화면이다.</p>

<p>첫번째 실행이 tail recursion을 사용하여 구현했을 때이고, 두번째가 while 반복문을 사용하여서 구현한 것인데 tail recursion이 재귀를 사용했음에도 불구하고 그 시간이 현저히 빠르고 메모리 효율 또한 좋은 것을 확인할 수 있다.</p>

<p><img src="https://user-images.githubusercontent.com/63405904/111058336-470d0900-84d1-11eb-9272-ebb0632be6b4.png" alt="image" /></p>


	  ]]></description>
	</item>

	<item>
	  <title>[알고리즘] 세그먼트 트리를 활용한 히스토그램 문제 풀이_2</title>
	  <link>//segment-tree2</link>
	  <author></author>
	  <pubDate>2020-09-10T10:18:00+00:00</pubDate>
	  <guid>//segment-tree2</guid>
	  <description><![CDATA[
	     <p>앞서 <a href="https://www.acmicpc.net/problem/6549">히스토그램 문제</a>에 대한 접근 방법을 간단하게 설명하고 세그먼트 트리를 히스토그램에 맞추어서 설명했다. 이번 글에서는 구체적으로 어떻게 세그먼트 트리를 구현하여 히스토그램 문제를 푸는데까지 이어지는지 다루어 보도록 하겠다.</p>

<p>이 문제는 레벨이 높은 문제이긴 하지만 아이디어 자체가 굉장히 어렵거나 하진 않다. 다만 시간 복잡도 측면에서 효율적으로 접근하기 위해 세그먼트 트리를 활용하는게 좀 낯설어서 어려웠던 것 같다.</p>

<h6 id="segment-tree-구현">Segment Tree 구현</h6>

<p>Segment Tree를 구현할 때 배열을 사용해서 구현하도록 할텐데 segment tree는 다음과 같은 성질을 가지고 있다.</p>

<ul>
  <li>세그먼트 트리는 거의 Full Binary Tree(비슷한 형태를 지님)의 모습을 하고 있다.</li>
  <li>왼쪽 자식: 부모노트 * 2</li>
  <li>오른쪽 자식: 부모노드 * 2 + 1</li>
  <li>높이: lgN</li>
</ul>

<p>배열을 통해서 tree를 구현하려면 사전에 tree의 노드 갯수를 파악해서 배열의 크기를 지정해야한다. 위의 성질들을 이용하면 해당 tree의 크기를 계산할 수 있다. 예를 들어 기존 배열의 개수가 <strong>2의 제곱인 경우</strong>에는 높기가 lgN 이므로 필요한 노드의 갯수는 <code class="highlighter-rouge">2*N-1</code> 이다. <strong>2의 제곱이 아닌 경우</strong>에는 N보다 큰지만 가장 가까운 2의 제곱을 찾으면 된다. 따라서 그 경우 노드의 갯수는 <code class="highlighter-rouge">2*2^(lgN+2)-1</code>이 된다.</p>

<p>이렇게 크기를 지정해서 배열을 생성한 이후에 재귀 함수를 사용해서 이전 포스트에서 이야기 했던 부분을 구현하면 된다. 재귀를 잘 이해했다면 segment tree 생성은 크게 어렵지 않다.</p>

<p><strong>코드:</strong></p>

<p>먼저 segment tree를 저장할 배열 공간을 할당한다.  다음은 구현할 때 유용한 몇가지 JAVA 함수를 소개해준다.</p>

<ul>
  <li>Ceil: 올림 숫자</li>
  <li>Math.log10(n)/Math.log10(2) = log2n</li>
</ul>

<p>Segment Tree의 index는 1부터 시작해야 한다. 그래야지 <code class="highlighter-rouge">2*i, 2*i+1</code>로 왼쪽 자식노드와 오른쪽 자식노드를 구별할 수 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
  <span class="o">...</span>
  <span class="kt">int</span> <span class="n">height</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">Math</span><span class="o">.</span><span class="na">ceil</span><span class="o">(</span><span class="n">Math</span><span class="o">.</span><span class="na">log10</span><span class="o">(</span><span class="n">n</span><span class="o">)/</span><span class="n">Math</span><span class="o">.</span><span class="na">log10</span><span class="o">(</span><span class="mi">2</span><span class="o">));</span>
  <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">Math</span><span class="o">.</span><span class="na">pow</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="n">height</span><span class="o">+</span><span class="mi">1</span><span class="o">);</span>
  
  <span class="kt">int</span><span class="o">[]</span> <span class="n">binTree</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">size</span><span class="o">];</span>
  <span class="n">init</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>다음은 segment tree에 값을 할당하는 부분이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">static</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">(</span><span class="kt">int</span> <span class="n">start</span><span class="o">,</span> <span class="kt">int</span> <span class="n">end</span><span class="o">,</span> <span class="kt">int</span> <span class="n">index</span><span class="o">){</span>
  <span class="k">if</span><span class="o">(</span><span class="n">start</span><span class="o">==</span><span class="n">end</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">binTree</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">=</span> <span class="n">start</span><span class="o">;</span>
    <span class="k">return</span><span class="o">;</span>
  <span class="o">}</span>
  <span class="n">init</span><span class="o">(</span><span class="n">start</span><span class="o">,</span> <span class="o">(</span><span class="n">start</span><span class="o">+</span><span class="n">end</span><span class="o">)/</span><span class="mi">2</span><span class="o">,</span> <span class="n">index</span><span class="o">*</span><span class="mi">2</span><span class="o">);</span>
  <span class="n">init</span><span class="o">((</span><span class="n">start</span><span class="o">+</span><span class="n">end</span><span class="o">)/</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">end</span><span class="o">,</span> <span class="n">index</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="o">);</span>
  <span class="k">if</span><span class="o">(</span><span class="n">value</span><span class="o">[</span><span class="n">binTree</span><span class="o">[</span><span class="n">index</span><span class="o">*</span><span class="mi">2</span><span class="o">]]&lt;=</span><span class="n">value</span><span class="o">[</span><span class="n">binTree</span><span class="o">[</span><span class="n">index</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="o">]])</span>
    <span class="n">binTree</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">=</span> <span class="n">binTree</span><span class="o">[</span><span class="n">index</span><span class="o">*</span><span class="mi">2</span><span class="o">];</span>
  <span class="k">else</span>
    <span class="n">binTree</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">=</span> <span class="n">binTree</span><span class="o">[</span><span class="n">index</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
  <span class="k">return</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<h6 id="segment-tree-탐색">Segment Tree 탐색</h6>

<p>Segment Tree를 생성했으면 이제 각 구간을 순회하며 해당 구간의 최소값을 구해야 한다. 일반적인 세그먼트 트리의 예시에서 구간합을 구할 경우 각 segment tree에 있는 값의 합을 구하면 되지만, 히스토그램 문제에서는 최소값을 찾아야 하니, 한번 더 참조해야 하는 부분이 있다.</p>

<p>이 부분은 세그먼트 트리에 대해서 설명해놓은 <a href="https://www.acmicpc.net/blog/view/9">백준 블로그</a>를 참조하면서 이해 했는데 매우 잘 설명이 되어 있다. 세그먼트의 해당 노드가 담당하고 있는 구간을 [start, end]로, 합을 구하는 목적 구간을 [left, right]로 놓았을 때 다음 4가지 경우가 있다.</p>

<ol>
  <li>합을 구해야하는 [left, right]와 현재 노드가 담당하고 있는 [start, end]가 겹치지 않는 경우</li>
  <li>합을 구해야하는 [left, right]가 현재 노드가 담당하고 있는 [start, end]를 완전히 포함하는 경우</li>
  <li>현재 노드가 담당하고 있는 [start, end]가 [left, right]를 완전히 포함하는 경우</li>
  <li>[left, right]와 [start, end]가 겹쳐져 있는 경우 (1, 2, 3을 제외한 나머지)</li>
</ol>

<p>위의 4가지 경우에 대해서 다음과 같이 처리한다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1번 경우: if(left &gt; end || right &lt; start) 
	- 겹치지 않으므로 탐색할 필요 없음
2번 경우: if(left &lt;= start &amp;&amp; end &lt;= right)
	- 해당 노드의 값을 리턴함
3,4번 경우:
	- 각각 왼쪽, 오른쪽 자식 노드에서 탐색함. 
</code></pre></div></div>

<p>히스토그램 문제에서는 최소값을 찾아야 하는 것이기 때문에 왼쪽과 오른쪽 자식 노드로 나누어서 들어갈 때, 배열을 한번 더 참조해서 구간에서 최종 최소값이 있는 위치를 찾아야 한다.</p>

<p><strong>코드:</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">static</span> <span class="kt">int</span> <span class="nf">findMin</span><span class="o">(</span><span class="kt">int</span> <span class="n">start</span><span class="o">,</span> <span class="kt">int</span> <span class="n">last</span><span class="o">,</span> <span class="kt">int</span> <span class="n">left</span><span class="o">,</span> <span class="kt">int</span> <span class="n">right</span><span class="o">,</span> <span class="kt">int</span> <span class="n">index</span><span class="o">){</span>
  <span class="k">if</span><span class="o">(</span><span class="n">left</span><span class="o">&gt;</span><span class="n">last</span> <span class="o">||</span> <span class="n">right</span><span class="o">&lt;</span><span class="n">start</span><span class="o">)</span>
    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
  <span class="k">if</span><span class="o">(</span><span class="n">left</span><span class="o">&lt;=</span><span class="n">start</span> <span class="o">&amp;&amp;</span> <span class="n">right</span><span class="o">&gt;=</span><span class="n">last</span><span class="o">)</span>
    <span class="k">return</span> <span class="n">binTree</span><span class="o">[</span><span class="n">index</span><span class="o">];</span>
  <span class="k">else</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">temp1</span> <span class="o">=</span> <span class="n">findMin</span><span class="o">(</span><span class="n">start</span><span class="o">,(</span><span class="n">start</span><span class="o">+</span><span class="n">last</span><span class="o">)/</span><span class="mi">2</span><span class="o">,</span> <span class="n">left</span><span class="o">,</span> <span class="n">right</span><span class="o">,</span> <span class="n">index</span><span class="o">*</span><span class="mi">2</span><span class="o">);</span>
    <span class="kt">int</span> <span class="n">temp2</span> <span class="o">=</span> <span class="n">findMin</span><span class="o">((</span><span class="n">start</span><span class="o">+</span><span class="n">last</span><span class="o">/</span><span class="mi">2</span><span class="o">)+</span><span class="mi">1</span><span class="o">,</span> <span class="n">last</span><span class="o">,</span> <span class="n">left</span><span class="o">,</span> <span class="n">right</span><span class="o">,</span> <span class="n">index</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="o">);</span>
    <span class="k">if</span><span class="o">(</span><span class="n">temp1</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span>
      <span class="k">return</span> <span class="n">temp2</span><span class="o">;</span>
    <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">temp2</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span>
      <span class="k">return</span> <span class="n">temp1</span><span class="o">;</span>
    <span class="k">else</span> <span class="o">{</span>
      <span class="k">if</span><span class="o">(</span><span class="n">value</span><span class="o">[</span><span class="n">temp1</span><span class="o">]</span> <span class="o">&lt;=</span> <span class="n">value</span><span class="o">[</span><span class="n">temp2</span><span class="o">])</span>
        <span class="k">return</span> <span class="n">temp1</span><span class="o">;</span>
      <span class="k">return</span> <span class="n">temp2</span><span class="o">;</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h6 id="히스토그램-풀이">히스토그램 풀이</h6>

<p>위의 세그먼트 트리 생성과 탐색 방법을 사용해서 최소값을 찾는 부분을 구현했다면 이제 답을 구현하도록 해보자. 앞의 포스트에서 언급했던 방법은 아래이다.</p>

<blockquote>
  <p>먼저 <a href="https://www.acmicpc.net/problem/6549">문제</a>의 해결 방법을 요약하면 다음과 같다.</p>

  <blockquote>
    <ol>
      <li>히스토그램 중, 높이가 가장 낮은 min 값과 해당 너비값을 곱하여 넓이를 구함.</li>
      <li>해당 최소값을 기준으로 히스토램을 나누어서 1번을 반복함.</li>
      <li>더 이상 나눌 수 없을 때까지 반복하며 매번 넓이의 max 값을 업데이트 함.</li>
    </ol>
  </blockquote>
</blockquote>

<p>위의 방법이 분할정복인 이유는 반복적으로 나뉘어지는 구간에서의 직사각형을 계속 비교하면서 최대 크기를 찾기 때문이다. 세그먼트 트리에 저장된 최소값의 위치를 활용해서 해당 기준으로 나누고, 나눈 구간에서의 직사각형 넓이 구할 때 사용하도록 한다.</p>

<p><strong>코드:</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">static</span> <span class="kt">void</span> <span class="nf">solve</span><span class="o">(</span><span class="kt">int</span> <span class="n">startIndex</span><span class="o">,</span> <span class="kt">int</span> <span class="n">lastIndex</span><span class="o">){</span>
  <span class="kt">long</span> <span class="n">area</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
  <span class="k">if</span><span class="o">(</span><span class="n">startIndex</span> <span class="o">==</span> <span class="n">lastIndex</span><span class="o">){</span>
    <span class="n">area</span> <span class="o">=</span> <span class="n">value</span><span class="o">[</span><span class="n">startIndex</span><span class="o">];</span>
    <span class="k">if</span><span class="o">(</span><span class="n">area</span><span class="o">&gt;</span><span class="n">max</span><span class="o">)</span>
      <span class="n">max</span> <span class="o">=</span> <span class="n">area</span><span class="o">;</span>
    <span class="k">return</span><span class="o">;</span>
  <span class="o">}</span>
  <span class="kt">int</span> <span class="n">minIndex</span> <span class="o">=</span> <span class="n">findMin</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="n">startIndex</span><span class="o">,</span> <span class="n">lastIndex</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
  <span class="kt">long</span> <span class="n">min</span> <span class="o">=</span> <span class="n">value</span><span class="o">[</span><span class="n">minIndex</span><span class="o">];</span>
  
  <span class="k">if</span><span class="o">(</span><span class="n">area</span><span class="o">&gt;</span><span class="n">max</span><span class="o">)</span>
    <span class="n">max</span> <span class="o">=</span> <span class="n">area</span><span class="o">;</span>
  
  <span class="k">if</span><span class="o">(</span><span class="n">minIndex</span> <span class="o">==</span> <span class="n">startIndex</span><span class="o">)</span>
    <span class="n">solve</span><span class="o">(</span><span class="n">minIndex</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">lastIndex</span><span class="o">);</span>
  <span class="k">else</span> <span class="nf">if</span><span class="o">(</span><span class="n">minIndex</span> <span class="o">&gt;=</span> <span class="n">lastIndex</span><span class="o">)</span>
    <span class="n">solve</span><span class="o">(</span><span class="n">startIndex</span><span class="o">,</span> <span class="n">minIndex</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span>
  <span class="k">else</span> <span class="o">{</span>
    <span class="n">solve</span><span class="o">(</span><span class="n">startIndex</span><span class="o">,</span> <span class="n">minIndex</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span>
    <span class="n">solve</span><span class="o">(</span><span class="n">minIndex</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">lastIndex</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong><small>[참고 자료]: https://www.acmicpc.net/blog/view/12, https://www.crocus.co.kr/648, https://www.acmicpc.net/blog/view/9 </small></strong></p>


	  ]]></description>
	</item>


</channel>
</rss>
