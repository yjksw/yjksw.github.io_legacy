<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>yjksw.github.io/</title>
   
   <link></link>
   <description>A beautiful narrative written with the world's most elegant publishing platform. The story begins here.</description>
   <language>en-uk</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>[GitHub] Commit Message Convetion</title>
	  <link>//commit-message-convetion</link>
	  <author></author>
	  <pubDate>2020-11-29T10:18:00+00:00</pubDate>
	  <guid>//commit-message-convetion</guid>
	  <description><![CDATA[
	     <p><br /></p>

<p>Github에 익숙하지 않기 때문에 커밋은 나에게 push를 해서 업로드를 하기 위한 중간과정 중 하나였다. 하지만 다른 곳에서 깃헙이나 프로젝트 진행을 하면서 커밋을 하는 단위의 중요성과 깃헙의 최대 장점인 프로젝트를 되돌리기 위한 커밋 메세지의 중요성에 대해서 여러번 들었었다. 이번에 프리코스를 시작하면서 커밋 메세지에 대한 가이드를 읽고 정리해보기로 했다.</p>

<p><a href="[https://gist.github.com/stephenparish/9941e89d80e2bc58a153#recognizing-unimportant-commits](https://gist.github.com/stephenparish/9941e89d80e2bc58a153#recognizing-unimportant-commits)">참고 사이트</a></p>

<p><br /></p>

<p><br /></p>

<h2 id="changelogmd-생성하기">CHANGELOG.md 생성하기</h2>

<ul>
  <li>changelog에는 3개의 section이 있다: new features, bug fixes, breaking changes.</li>
  <li>이러한 정보들은 배포가 될 때 script로 생성이 되어야 하며 해당하는 commit과 함께 제공되어야 한다.</li>
  <li>해당 로그들을 보는 방법들은 다음과 같다.
    <ol>
      <li>
        <p>지난 release 이후에 발생한 모든 subject(커밋 메세지의 첫번째 라인) 조회:</p>

        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">git</span> <span class="n">log</span> <span class="o">&lt;</span><span class="n">lasg</span> <span class="n">tag</span><span class="o">&gt;</span> <span class="n">HEAD</span> <span class="o">--</span><span class="n">pretty</span><span class="o">=</span><span class="nl">format:</span><span class="n">$s</span>
</code></pre></div>        </div>
      </li>
      <li>
        <p>이번 release의 새로운 feature:</p>

        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">git</span> <span class="n">log</span> <span class="o">&lt;</span><span class="n">last</span> <span class="n">release</span><span class="o">&gt;</span> <span class="n">HEAD</span> <span class="o">--</span><span class="n">grep</span> <span class="n">feature</span>
</code></pre></div>        </div>
      </li>
    </ol>
  </li>
</ul>

<p><br /></p>

<h3 id="recognizing-unimportant-commits">Recognizing unimportant commits</h3>

<ul>
  <li>
    <p>사소한 버그 수정 등과 같이 중요하지 않은 커밋들을 걸러낼 수 있다. 코드의 logic이 수정된 부분들이 아닌 경우에는 다음과 같은 명령어로 무시할 수 있다.</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">git</span> <span class="n">bisect</span> <span class="n">skip</span> <span class="err">$</span><span class="o">(</span><span class="n">git</span> <span class="n">rev</span><span class="o">-</span><span class="n">list</span> <span class="o">--</span><span class="n">grep</span> <span class="n">irrelevant</span> <span class="o">&lt;</span><span class="n">good</span> <span class="n">place</span><span class="o">&gt;</span> <span class="n">HEAD</span><span class="o">)</span>
</code></pre></div>    </div>
  </li>
</ul>

<p><br /></p>

<h3 id="history-브라우징-시-정보-제공을-위한-커밋">History 브라우징 시 정보 제공을 위한 커밋</h3>

<ul>
  <li>커밋 메세지를 작성할 때 가능한 많은 정보들을 제공하는 것이 좋다.</li>
  <li>그렇기에 메세지로 무슨 변경이나 추가가 있었는지 확인 할 수 있는데, 해당 메세지가 일정한 convention을 지닐 필요가 있다.</li>
</ul>

<p><br /></p>

<h2 id="commit-message-형식">Commit Message 형식</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="n">type</span><span class="o">&gt;(&lt;</span><span class="n">scope</span><span class="o">&gt;):</span> <span class="o">&lt;</span><span class="n">subject</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="n">BLANK</span> <span class="n">LINE</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="n">body</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="n">BLANK</span> <span class="n">LINE</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="n">footer</span><span class="o">&gt;</span>
</code></pre></div></div>

<ul>
  <li>커밋 메세지는 100자를 넘지 않는다. 이래야지 깃헙이나 깃 툴을 사용할 때 메세지 읽기가 쉽다.</li>
</ul>

<p><br /></p>

<h3 id="subject-line">Subject line</h3>

<p>어떤 변경이 일어났는지에 대한 간단명료한 설명을 담고 있다. (커밋 메세지의 첫 줄)</p>

<ol>
  <li>Allowed <code class="highlighter-rouge">&lt;type&gt;</code>
    <ul>
      <li>feat (feature)</li>
      <li>fix (bug fix)</li>
      <li>docs (documentation)</li>
      <li>style (formatting, missing semi colons, …)</li>
      <li>refactor</li>
      <li>test (when adding missing tests)</li>
      <li>chore (maintain)</li>
    </ul>
  </li>
  <li>Allowed <code class="highlighter-rouge">&lt;scope&gt;</code>
    <ul>
      <li>적용 범위를 나타내는 것으로 커밋에 대한 부가적인 정보이다. (선택 사항)</li>
      <li>적용 범위에 대한 예시는 이러하다: $location, $browser, $compile, $rootScope, ngHref, ngClick, ngView, 등등</li>
    </ul>
  </li>
  <li><code class="highlighter-rouge">&lt;subject&gt;</code>
    <ul>
      <li>현재형으로 작성한다: “change” → x “changed” or “changes”</li>
      <li>첫 문자를 대문자로 작성하지 않는다.</li>
      <li>(.)을 작성하지 않는다.</li>
    </ul>
  </li>
  <li>해당 커밋에 major 한 변화가 있다면 큰 변화가 있기 때문에 호환이 안되는 부분들이 있을 수 있다. 해당 부분들을 footer에 반드시 작성하게 되는데, 해당 메세지를 확인하지 못할 수도 있기 때문에 다음과 같이 <code class="highlighter-rouge">BREAKING CHANGE: 설명</code> 있음을 표시한다.
    <ul>
      <li><code class="highlighter-rouge">예: fead(pipeling)!: Add pipeline function</code></li>
    </ul>
  </li>
</ol>

<p><br /></p>

<h3 id="message-body">Message body</h3>

<ul>
  <li>커밋 메세지와 같이 현재형 동사로 작성한다.</li>
  <li>수정의 동기화, 수정 이전과의 비교를 명시한다.</li>
  <li>본문에 여러개가 있을 경우에는 (-)로 구분한다.</li>
</ul>

<p><br /></p>

<h3 id="message-footer">Message footer</h3>

<ul>
  <li>커밋이 어떤 이슈에서 왔는지 촘조 정보들을 추가하는 용도로 사용.</li>
  <li>특정 이슈와의 연관을 표현하기 위해 <code class="highlighter-rouge">close #123 #245</code> 같이 커밋 메세지를 추가한다.</li>
  <li>
    <p>Breaking changes에 대해서 footer에 작성한다</p>

    <p>어떤 것이 수정되었는지, 수정이 된 정의, migration note 등이 추가되도록한다.</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">BREAKING</span> <span class="nl">CHANGE:</span> <span class="n">isolate</span> <span class="n">scope</span> <span class="n">bindings</span> <span class="n">definition</span> <span class="n">has</span> <span class="n">changed</span> <span class="n">and</span>
      <span class="n">the</span> <span class="n">inject</span> <span class="n">option</span> <span class="k">for</span> <span class="n">the</span> <span class="n">directive</span> <span class="n">controller</span> <span class="n">injection</span> <span class="n">was</span> <span class="n">removed</span><span class="o">.</span>
        
      <span class="n">To</span> <span class="n">migrate</span> <span class="n">the</span> <span class="n">code</span> <span class="n">follow</span> <span class="n">the</span> <span class="n">example</span> <span class="nl">below:</span>
        
      <span class="nl">Before:</span>
        
      <span class="nl">scope:</span> <span class="o">{</span>
        <span class="nl">myAttr:</span> <span class="err">'</span><span class="n">attribute</span><span class="err">'</span><span class="o">,</span>
        <span class="nl">myBind:</span> <span class="err">'</span><span class="n">bind</span><span class="err">'</span><span class="o">,</span>
        <span class="nl">myExpression:</span> <span class="err">'</span><span class="n">expression</span><span class="err">'</span><span class="o">,</span>
        <span class="nl">myEval:</span> <span class="err">'</span><span class="n">evaluate</span><span class="err">'</span><span class="o">,</span>
        <span class="nl">myAccessor:</span> <span class="err">'</span><span class="n">accessor</span><span class="err">'</span>
      <span class="o">}</span>
        
      <span class="nl">After:</span>
        
      <span class="nl">scope:</span> <span class="o">{</span>
        <span class="nl">myAttr:</span> <span class="sc">'@'</span><span class="o">,</span>
        <span class="nl">myBind:</span> <span class="sc">'@'</span><span class="o">,</span>
        <span class="nl">myExpression:</span> <span class="sc">'&amp;'</span><span class="o">,</span>
        <span class="c1">// myEval - usually not useful, but in cases where the expression is assignable, you can use '='</span>
        <span class="nl">myAccessor:</span> <span class="sc">'='</span> <span class="c1">// in directive's template change myAccessor() to myAccessor</span>
      <span class="o">}</span>
        
      <span class="n">The</span> <span class="n">removed</span> <span class="err">`</span><span class="n">inject</span><span class="err">`</span> <span class="n">wasn</span><span class="err">'</span><span class="n">t</span> <span class="n">generaly</span> <span class="n">useful</span> <span class="k">for</span> <span class="n">directives</span> <span class="n">so</span> <span class="n">there</span> <span class="n">should</span> <span class="n">be</span> <span class="n">no</span> <span class="n">code</span> <span class="n">using</span> <span class="n">it</span><span class="o">.</span>
</code></pre></div>    </div>
  </li>
</ul>

<p><br /></p>

<h2 id="예시">예시</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feat</span><span class="o">(</span><span class="n">$browser</span><span class="o">):</span> <span class="n">onUrlChange</span> <span class="nf">event</span> <span class="o">(</span><span class="n">popstate</span><span class="o">/</span><span class="n">hashchange</span><span class="o">/</span><span class="n">polling</span><span class="o">)</span>

<span class="n">Added</span> <span class="k">new</span> <span class="n">event</span> <span class="n">to</span> <span class="n">$browser</span><span class="o">:</span>
<span class="o">-</span> <span class="n">forward</span> <span class="n">popstate</span> <span class="n">event</span> <span class="k">if</span> <span class="n">available</span>
<span class="o">-</span> <span class="n">forward</span> <span class="n">hashchange</span> <span class="n">event</span> <span class="k">if</span> <span class="n">popstate</span> <span class="n">not</span> <span class="n">available</span>
<span class="o">-</span> <span class="k">do</span> <span class="n">polling</span> <span class="n">when</span> <span class="n">neither</span> <span class="n">popstate</span> <span class="n">nor</span> <span class="n">hashchange</span> <span class="n">available</span>

<span class="n">Breaks</span> <span class="n">$browser</span><span class="o">.</span><span class="na">onHashChange</span><span class="o">,</span> <span class="n">which</span> <span class="n">was</span> <span class="nf">removed</span> <span class="o">(</span><span class="n">use</span> <span class="n">onUrlChange</span> <span class="n">instead</span><span class="o">)</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fix</span><span class="o">(</span><span class="n">$compile</span><span class="o">):</span> <span class="n">couple</span> <span class="n">of</span> <span class="n">unit</span> <span class="n">tests</span> <span class="k">for</span> <span class="n">IE9</span>

<span class="n">Older</span> <span class="n">IEs</span> <span class="n">serialize</span> <span class="n">html</span> <span class="n">uppercased</span><span class="o">,</span> <span class="n">but</span> <span class="n">IE9</span> <span class="n">does</span> <span class="n">not</span><span class="o">...</span>
<span class="n">Would</span> <span class="n">be</span> <span class="n">better</span> <span class="n">to</span> <span class="n">expect</span> <span class="k">case</span> <span class="n">insensitive</span><span class="o">,</span> <span class="n">unfortunately</span> <span class="n">jasmine</span> <span class="n">does</span>
<span class="n">not</span> <span class="n">allow</span> <span class="n">to</span> <span class="n">user</span> <span class="n">regexps</span> <span class="k">for</span> <span class="k">throw</span> <span class="n">expectations</span><span class="o">.</span>

<span class="n">Closes</span> <span class="err">#</span><span class="mi">392</span>
<span class="n">Breaks</span> <span class="n">foo</span><span class="o">.</span><span class="na">bar</span> <span class="n">api</span><span class="o">,</span> <span class="n">foo</span><span class="o">.</span><span class="na">baz</span> <span class="n">should</span> <span class="n">be</span> <span class="n">used</span> <span class="n">instead</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">docs</span><span class="o">(</span><span class="n">guide</span><span class="o">):</span> <span class="n">updated</span> <span class="n">fixed</span> <span class="n">docs</span> <span class="n">from</span> <span class="n">Google</span> <span class="n">Docs</span>

<span class="n">Couple</span> <span class="n">of</span> <span class="n">typos</span> <span class="nl">fixed:</span>
<span class="o">-</span> <span class="n">indentation</span>
<span class="o">-</span> <span class="n">batchLogbatchLog</span> <span class="o">-&gt;</span> <span class="n">batchLog</span>
<span class="o">-</span> <span class="n">start</span> <span class="n">periodic</span> <span class="n">checking</span>
<span class="o">-</span> <span class="n">missing</span> <span class="n">brace</span>
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>[JAVA] 구글에서 제공하는 Java Coding Convention Guide</title>
	  <link>//java-coding-convention</link>
	  <author></author>
	  <pubDate>2020-11-28T10:18:00+00:00</pubDate>
	  <guid>//java-coding-convention</guid>
	  <description><![CDATA[
	     <p><br /></p>

<p>프리코스를 진행하면서 구글에서 제공하는 javaGuide를 읽고 해당 convention을 따라서 코딩 하도록 하기 위해서 해당 문서를 정독했다. 원래 알고 있던 부분들도 있고 아닌 부분들도 있는데, 이렇게 잘 문서화 되어 있다는 것을 처음 알았다. 다음은 해당 문서를 읽으면서 두고두고 참고할 내용들을 정리한 것들이다.</p>

<p>다음 사이트 참고: <a href="https://google.github.io/styleguide/javaguide.html">Google Java Style Guide</a></p>

<h2 id="1-source-file-structure">1. Source file structure</h2>

<p>Java 소스 파일은 다음과 같은 구조를 가지고 있다. 순서에 유의하여 구조화 되어 있다.</p>

<ol>
  <li>만약 존재한다면, license or copyright information</li>
  <li>Package 명시</li>
  <li>Import statements</li>
  <li>단 하나의 top-level class</li>
</ol>

<p>→ 위의 4 section을 1줄 간격(exactly one blank)으로 나눈다.</p>

<p><br /></p>

<h3 id="1-1-copyright-information">1-1. copyright information</h3>

<p>소스파일 맨 위에 시작 주석으로 파일 클래스 이름, 버전 정보, 날짜, 저작권 주의를 보여주는 주석으로 시작한다.</p>

<h3 id="1-2-import-statements">1-2. Import Statements</h3>

<ol>
  <li>Wildcard imports는 지양한다.
    <ul>
      <li>(*) 추가해서 전체를 한꺼번에 import 하는 것.</li>
      <li><a href="https://medium.com/@tharakamd.12/is-it-bad-to-use-wildcard-imports-in-java-1b46a863b2be#:~:text=Wildcard%20imports%20tell%20java%20compiler,performance%20may%20lower%20a%20bit">관련 참고 사이트</a></li>
    </ul>
  </li>
  <li>한 줄이 너무 길어도 line wrapping 하지 않는다.</li>
  <li>static imports를 하나의 block에 non-static imports를 하나의 block에 넣고 두 block 사이만 한 줄 간격이 있다.</li>
  <li>각 block 내에서는 ASCII sort order에 따라서 정렬한다.</li>
  <li>class는 static import 가 아닌 normal import 한다.</li>
</ol>

<h3 id="1-3-class-declaration">1-3 Class Declaration</h3>

<ol>
  <li>Top-level 클래스는 각 소스파일 당 단 1개만 존재한다.</li>
</ol>

<p><br /></p>

<h2 id="2-formatting">2. Formatting</h2>

<h3 id="2-1-괄호">2-1. 괄호</h3>

<ol>
  <li>
    <p>optional인 경우에도 괄호를 쓴다.</p>

    <ul>
      <li><code class="highlighter-rouge">if, else, for, do, while</code> 이 비어 있거나 한 줄만 있더라도 괄호를 추가한다.</li>
    </ul>
  </li>
  <li>비어 있지 않은 블록의 경우 다음과 같이 한다.
    <ul>
      <li>’{‘ 앞에 줄 간격 두지 않는다.</li>
      <li>’{‘ 이후에  줄 간격 둔다.</li>
      <li>’}’ 이전에 줄 간격 둔다.</li>
      <li>’}’ 이후에 다음과 같은 경우에만 줄 간격을 둔다.
        <ul>
          <li>statement가 끝났을 때, 메소드, constructor, class가 끝났을 때</li>
          <li>, 나 else 가 그 다음에 나오는 경우에는 줄 간격을 두지 않는다.</li>
        </ul>
      </li>
    </ul>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">return</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="o">{</span>
   <span class="k">while</span> <span class="o">(</span><span class="n">condition</span><span class="o">())</span> <span class="o">{</span>
     <span class="n">method</span><span class="o">();</span>
   <span class="o">}</span>
 <span class="o">};</span>

 <span class="k">return</span> <span class="k">new</span> <span class="nf">MyClass</span><span class="o">()</span> <span class="o">{</span>
   <span class="nd">@Override</span> <span class="kd">public</span> <span class="kt">void</span> <span class="nf">method</span><span class="o">()</span> <span class="o">{</span>
     <span class="k">if</span> <span class="o">(</span><span class="n">condition</span><span class="o">())</span> <span class="o">{</span>
       <span class="k">try</span> <span class="o">{</span>
         <span class="n">something</span><span class="o">();</span>
       <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ProblemException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
         <span class="n">recover</span><span class="o">();</span>
       <span class="o">}</span>
     <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">otherCondition</span><span class="o">())</span> <span class="o">{</span>
       <span class="n">somethingElse</span><span class="o">();</span>
     <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
       <span class="n">lastThing</span><span class="o">();</span>
     <span class="o">}</span>
   <span class="o">}</span>
 <span class="o">};</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>빈 블록의 경우:</p>

    <p>다음 두 경우 모드 가능하나, multi-block 인 경우에는 consice 하게 할 수 없다.</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c1">// This is acceptable</span>
   <span class="kt">void</span> <span class="nf">doNothing</span><span class="o">()</span> <span class="o">{}</span>

   <span class="c1">// This is equally acceptable</span>
   <span class="kt">void</span> <span class="nf">doNothingElse</span><span class="o">()</span> <span class="o">{</span>
   <span class="o">}</span>
</code></pre></div>    </div>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c1">// This is not acceptable: No concise empty blocks in a multi-block statement</span>
   <span class="k">try</span> <span class="o">{</span>
     <span class="n">doSomething</span><span class="o">();</span>
   <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{}</span>
</code></pre></div>    </div>
  </li>
</ol>

<h3 id="2-2-블록-indentation-2-spaces">2-2. 블록 indentation: +2 spaces</h3>

<ul>
  <li>새로운 블록일 경우 2 만큼 들여쓰기 한다.</li>
  <li>하지만 우테코에서는 +2 가 아니라 +4 만큼 들여쓰기 하도록 한다.</li>
</ul>

<h3 id="2-3-한-줄에-한-statement만-작성한다">2-3 한 줄에 한 statement만 작성한다.</h3>

<ul>
  <li>각 statement는 줄 간격을 둔다.</li>
</ul>

<h3 id="2-4-column-limit-100">2-4 Column limit: 100</h3>

<p>다음과 같은 경우가 아니라 한 줄에 100자가 넘지 않도록 line-wrapping을 한다.</p>

<ol>
  <li>line-wrapping이 불가능한 경우</li>
  <li>package / import 일 경우</li>
  <li>shell에 복사 붙여넣기 해야 하는 comment일 경우</li>
</ol>

<h3 id="2-5-line-wrapping">2-5 Line-wrapping</h3>

<ul>
  <li>다음과 같은 상황에서 line break를 하여 line-wrapping 한다.
    <ol>
      <li>
        <p>non-assignment operator일 경우 줄 간격은 해당 Operator 앞에서 break 한다.</p>

        <p>다음과 같은 것들에도 적용된다:</p>

        <ul>
          <li>dot separator (.)</li>
          <li>two colons of method reference (::)</li>
          <li>an ampersand in a type bound (&lt;T extends Foo &amp; Bar&gt;)</li>
          <li>
            <table>
              <tbody>
                <tr>
                  <td>pipe in a catch block ( catch (FooException</td>
                  <td>BarException e) )</td>
                </tr>
              </tbody>
            </table>
          </li>
        </ul>
      </li>
      <li>assignment-operator일 경우 해당 operator 다음에 line break 한다.</li>
      <li>( 앞에 있는 메소드나 constructor 이름은 붙어 있도록 한다.</li>
      <li>, 같은 경우 그 앞의 토큰과 붙어 있는다.</li>
      <li>
        <p>lambda 의 → 다음에는 line break 하지 않는데, lambda body가 single expression 인 경우를 제외하고는 반드시 ( 다음에 line break 해야 한다.</p>

        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">MyLambda</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Long</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">lambda</span> <span class="o">=</span>
     <span class="o">(</span><span class="n">String</span> <span class="n">label</span><span class="o">,</span> <span class="n">Long</span> <span class="n">value</span><span class="o">,</span> <span class="n">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
         <span class="o">...</span>
     <span class="o">};</span>

 <span class="n">Predicate</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">predicate</span> <span class="o">=</span> <span class="n">str</span> <span class="o">-&gt;</span>
     <span class="n">longExpressionInvolving</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
</code></pre></div>        </div>
      </li>
    </ol>
  </li>
  <li>line-wrapping 이후에는 +4 만큼의 들여쓰기를 한다.</li>
</ul>

<h3 id="2-6-공백-whitespace">2-6 공백 Whitespace</h3>

<ol>
  <li>Vertical Whitespace
    <ul>
      <li>다음과 같은 경우 빈 줄이 들어간다.
        <ol>
          <li>consecutive members 나 initializers of a class 사이에 빈 줄
            <ul>
              <li>필드, constructors, methods, nested classes, static initializer, instance initializer</li>
              <li>두 필드 사이에 공백은 선택이다.</li>
            </ul>
          </li>
        </ol>
      </li>
      <li>빈 줄은 가독성을 위해서 필요한 곳에 어디든 추가될 수 있다.</li>
    </ul>
  </li>
  <li>Horizontal whitespace
    <ol>
      <li>if, for, catch 뒤에 있는 ‘(‘ 사이에 공백</li>
      <li>else, catch 앞에 있는 ‘}’ 사이에 공백</li>
      <li>’{‘ 앞에 공백.
        <ul>
          <li>예외1: annotation 안에 있는 ‘{‘ 앞에는 공백 없음</li>
          <li>배열 안에 원소로 인한 ‘{‘ 앞에는 공백 없음</li>
        </ul>
      </li>
      <li>binary 나 ternary operator 앞 뒤로 공백 넣는다.
        <ul>
          <li>&lt;T extends Foo &amp; Bar&gt;</li>
          <li><code class="highlighter-rouge">catch (FooException | BarException e)</code></li>
          <li><code class="highlighter-rouge">(String str) -&gt; str.length()</code></li>
          <li>(::) 이나 (.) 앞 뒤에는 공백 없음</li>
        </ul>
      </li>
      <li>,:; 나 ‘)’ 뒤에 공백 있음.</li>
      <li>변수이름과 type 사이에 공백: List<String> list</String></li>
    </ol>
  </li>
</ol>

<p><br /></p>

<h2 id="3-naming">3. Naming</h2>

<h3 id="3-1-package-names">3-1. Package names</h3>

<ol>
  <li>패지키 이름은 Camel Case도 아니고 전부 소문자로 띄어쓰기 없이 이루어진다.</li>
</ol>

<h3 id="3-2-class-names">3-2. Class names</h3>

<ol>
  <li>클래스 이름은 UpperCamelCase로 이루어 진다.</li>
  <li>주로 noun이나 noun phase이다.</li>
  <li>Test 클래스의 경우 뒤에 Test가 붙는다.</li>
</ol>

<h3 id="3-3-method-names">3-3 Method names</h3>

<ol>
  <li>메소드 이름은 lowerCamelCase로 나타난다.</li>
  <li>주로 verb 이다.</li>
</ol>

<h3 id="3-4-constant-names">3-4 Constant names</h3>

<ol>
  <li>상수의 경우 CONSTANT_CASE 와 같이 전부 대문자, _ 로 구분되어 있다.</li>
  <li>여기서 상수라고 하는 것은 static final field 이며, 잘 변하지 않고, 메소드에 이거에 의한 부작용이 없는 숫자를 말한다.</li>
  <li>
    <p>예시:</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c1">// Constants</span>
 <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">NUMBER</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
 <span class="kd">static</span> <span class="kd">final</span> <span class="n">ImmutableList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">NAMES</span> <span class="o">=</span> <span class="n">ImmutableList</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"Ed"</span><span class="o">,</span> <span class="s">"Ann"</span><span class="o">);</span>
 <span class="kd">static</span> <span class="kd">final</span> <span class="n">ImmutableMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">AGES</span> <span class="o">=</span> <span class="n">ImmutableMap</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"Ed"</span><span class="o">,</span> <span class="mi">35</span><span class="o">,</span> <span class="s">"Ann"</span><span class="o">,</span> <span class="mi">32</span><span class="o">);</span>
 <span class="kd">static</span> <span class="kd">final</span> <span class="n">Joiner</span> <span class="n">COMMA_JOINER</span> <span class="o">=</span> <span class="n">Joiner</span><span class="o">.</span><span class="na">on</span><span class="o">(</span><span class="sc">','</span><span class="o">);</span> <span class="c1">// because Joiner is immutable</span>
 <span class="kd">static</span> <span class="kd">final</span> <span class="n">SomeMutableType</span><span class="o">[]</span> <span class="n">EMPTY_ARRAY</span> <span class="o">=</span> <span class="o">{};</span>
 <span class="kd">enum</span> <span class="n">SomeEnum</span> <span class="o">{</span> <span class="n">ENUM_CONSTANT</span> <span class="o">}</span>

 <span class="c1">// Not constants</span>
 <span class="kd">static</span> <span class="n">String</span> <span class="n">nonFinal</span> <span class="o">=</span> <span class="s">"non-final"</span><span class="o">;</span>
 <span class="kd">final</span> <span class="n">String</span> <span class="n">nonStatic</span> <span class="o">=</span> <span class="s">"non-static"</span><span class="o">;</span>
 <span class="kd">static</span> <span class="kd">final</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">mutableCollection</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
 <span class="kd">static</span> <span class="kd">final</span> <span class="n">ImmutableSet</span><span class="o">&lt;</span><span class="n">SomeMutableType</span><span class="o">&gt;</span> <span class="n">mutableElements</span> <span class="o">=</span> <span class="n">ImmutableSet</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">mutable</span><span class="o">);</span>
 <span class="kd">static</span> <span class="kd">final</span> <span class="n">ImmutableMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">SomeMutableType</span><span class="o">&gt;</span> <span class="n">mutableValues</span> <span class="o">=</span>
     <span class="n">ImmutableMap</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"Ed"</span><span class="o">,</span> <span class="n">mutableInstance</span><span class="o">,</span> <span class="s">"Ann"</span><span class="o">,</span> <span class="n">mutableInstance2</span><span class="o">);</span>
 <span class="kd">static</span> <span class="kd">final</span> <span class="n">Logger</span> <span class="n">logger</span> <span class="o">=</span> <span class="n">Logger</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="n">MyClass</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
 <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span><span class="o">[]</span> <span class="n">nonEmptyArray</span> <span class="o">=</span> <span class="o">{</span><span class="s">"these"</span><span class="o">,</span> <span class="s">"can"</span><span class="o">,</span> <span class="s">"change"</span><span class="o">};</span>
</code></pre></div>    </div>
  </li>
</ol>

<h3 id="3-5-non-cnastant-field-names">3-5 Non-cnastant field names</h3>

<ol>
  <li>Non-constant field(static 이거나 아니거나)의 경우 lowerCamelCase로 되어 있다. 주로 noun 이다.</li>
</ol>

<h3 id="3-6-이외의-다른-camelcase">3-6 이외의 다른 CamelCase</h3>

<ol>
  <li>Parameter, local variable, type variable 모두 lowCamelCase로 쓴다.</li>
</ol>

	  ]]></description>
	</item>

	<item>
	  <title>[이분탐색] 백준 1300 - k번째 수</title>
	  <link>//baek1300</link>
	  <author></author>
	  <pubDate>2020-10-11T10:18:00+00:00</pubDate>
	  <guid>//baek1300</guid>
	  <description><![CDATA[
	     <h3 id="문제">문제</h3>

<p><a href="https://www.acmicpc.net/problem/1300">문제 바로가기</a></p>

<h5 id="문제-분석-">문제 분석 &gt;</h5>

<p>크기가 NxN인 배열 A는 각각 A[i][j] = ixj 로 채워져 있다. 이 수를 NxN 크기의 일차원 배열 B에 오름차순 정렬하였을 때, B[k]의 값은 무엇인가?</p>

<p>배열 A, B의 index는 1부터 시작한다.</p>

<h5 id="입력-">입력 &gt;</h5>

<p>첫 줄에 배열의 크기 N ($0 \le N \le 10^5$) 과 둘째 줄에 k (min($10^9, N^2$)) 가 주어진다.</p>

<h5 id="출력-">출력 &gt;</h5>

<p>B[k] 값을 출력한다.</p>

<h3 id="예제">예제</h3>

<p>&lt;img src=”baek1300.png” width=70%/&gt;</p>

<h3 id="접근법">접근법</h3>

<ol>
  <li>배열 B에 들어가 있는 값의 범위는 1부터 N x N 이다.</li>
  <li>해당 범위를 이분탐색 하여 해당 숫자보다 작거나 같은 숫자가 몇개인지 구하여 배열 B에서의 index를 파악한다.</li>
  <li>해당 숫자보다 작거나 같은 숫자를 구하려면 숫자를 행마다 나눈 몫을 더하면 된다.
    <ul>
      <li>다만 주의할 것은 몫이 N 보다 크면 N으로 측정해야 한다.</li>
      <li>예를 들어, N이 5이고, 탐색 중인 숫자가 8일때, 8%1 = 8 이지만 N이 5 이므로 총 5개까지만 포함해야 한다.</li>
    </ul>
  </li>
  <li>index값이 k보다 크거나 같으면 이분할 한 왼쪽을 재탐색하고, index 값이 작으면 오른쪽을 재탐색한다.</li>
  <li>k에 대한 Lower bound를 이분탐색으로 찾아서 해당 값을 return 한다.</li>
</ol>

<h3 id="코드">코드</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.BufferedReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.InputStreamReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
    <span class="n">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="n">InputStreamReader</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
    
    <span class="kt">long</span> <span class="n">n</span><span class="o">,</span> <span class="n">k</span><span class="o">;</span>
    <span class="n">n</span> <span class="o">=</span> <span class="n">Long</span><span class="o">.</span><span class="na">parseLong</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
    <span class="n">k</span> <span class="o">=</span> <span class="n">Long</span><span class="o">.</span><span class="na">parseLong</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
    
    <span class="kt">long</span> <span class="n">left</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
    <span class="kt">long</span> <span class="n">right</span> <span class="o">=</span> <span class="n">n</span><span class="o">*</span><span class="n">n</span><span class="o">;</span>
    <span class="kt">long</span> <span class="n">mid</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    
    <span class="k">while</span><span class="o">(</span><span class="n">left</span><span class="o">&lt;=</span><span class="n">right</span><span class="o">)</span> <span class="o">{</span>
      <span class="n">mid</span> <span class="o">=</span> <span class="o">(</span><span class="n">left</span><span class="o">+</span><span class="n">right</span><span class="o">)/</span><span class="mi">2</span><span class="o">;</span>
     	<span class="kt">long</span> <span class="n">index</span> <span class="o">=</span> <span class="n">findIndex</span><span class="o">(</span><span class="n">mid</span><span class="o">,</span> <span class="n">n</span><span class="o">);</span>
      
      <span class="k">if</span><span class="o">(</span><span class="n">index</span><span class="o">&gt;=</span><span class="n">k</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">right</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
      <span class="o">}</span> <span class="k">else</span>
        <span class="n">left</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">left</span><span class="o">);</span>
    <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="k">return</span><span class="o">;</span>
  <span class="o">}</span>
  
  <span class="kd">public</span> <span class="kd">static</span> <span class="n">Long</span> <span class="nf">findIndex</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span><span class="o">,</span> <span class="n">in</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">long</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
      <span class="n">cnt</span> <span class="o">+=</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">n</span><span class="o">,</span> <span class="n">num</span><span class="o">/</span><span class="n">i</span><span class="o">);</span>
    <span class="o">}</span>
    
    <span class="k">return</span> <span class="n">cnt</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="유의할-점">유의할 점</h3>

<ol>
  <li>
    <p>여기서 이분탐색 범위 right에는 k값이 들어가도 되고, n*n 값이 들어가도 된다.</p>

    <ul>
      <li>
        <p>배열의 특성상, 앞에 중복되는 숫자가 많기 때문에 index k에 들어가는 값은 무조건 k보다 작은 수이기 때문이다.</p>
      </li>
      <li>
        <p>하지만 논리상으로 1부터 n*n까지를 탐색하는 것이기 때문에 어느 것이 들어가도 상관 없다 (k가 더 빠르긴 하다.)</p>
      </li>
    </ul>
  </li>
  <li>
    <p>1에서 right 값에 k값은 넣는다면 n이 int라도 상관이 없지만, n*n을 넣을 것이라면 right 변수가 Long 타입 이더라도 nxn을 하면서 int형으로 overflow가 발생하고 long 에 담기기 때문에 n이 long 타입으로 선언이 되어야 한다.</p>
  </li>
</ol>

<h3 id="느낀-점">느낀 점</h3>

<ul>
  <li>이분 탐색 문제들을 집중공략 하면서 이분탐색에 대해서 어느 정도 안다고 생각했다. 그리고 이 문제를 푸는데 오후 내내 이분탐색을 응용한 방법이 기억이 나질 않는 것이다…ㅠㅠ 아직 한쪽으로 밖에 생각하지 못하는 것 같다. 한 알고리즘을 익힐 때 여러 응용방법에 대해서 생각하는 힘을 기르기!</li>
  <li>이분 탐색은 할 때마다, 반복문을 빠져나왔을 때 내가 최종적으로 원하는 답이 right 인지 left 인지 헷갈려서 손으로 하나씩 해봐야지 알 수 있었다. 언제는 right 이고 언제는 left인데 분명 일관된 상황이 있을텐데.. 조금 더 분석을 해봐야겠다!!</li>
  <li>변수마다 overflow가 발생하는 시점에 대해서 아직도 모르다니.. java에 아직 미숙하다. int끼리 연산할 때 연산하는 중간에 int 범위를 넘으면 overflow가 발생한다니.. 앞으로 기억하자.</li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>[브루트포스] 백준 1018 - 체스판 다시 칠하기</title>
	  <link>//baek1018</link>
	  <author></author>
	  <pubDate>2020-10-03T10:18:00+00:00</pubDate>
	  <guid>//baek1018</guid>
	  <description><![CDATA[
	     <h2 id="문제">문제</h2>

<p><a href="https://www.acmicpc.net/problem/1018">문제 바로가기</a></p>

<h4 id="문제-분석-">문제 분석 &gt;</h4>

<p>각 칸에 검은색과 흰색이 섞여서 칠해있는 M x N 보드가 있을 때 해당 보드에서 검은색과 흰색이 칠해져 있는 8 x 8 체스판을 만들 때 최소로 다시 칠해야 하는 칸의 갯수는 얼마인지 구하라.</p>

<h4 id="입력-">입력 &gt;</h4>

<p>첫 줄에 N$(8\le N \le 50)$ 과 M$(8 \le M\le 50)$이 주어진다. 두번째 줄부터 보드의 각 행에 대한 정보가 주어진다. 검은색은 B, 흰색은 W로 나타난다.</p>

<h4 id="출력-">출력 &gt;</h4>

<p>다시 칠해야 하는 칸의 최솟값을 출력한다.</p>

<h2 id="예제">예제</h2>

<p><img src="https://user-images.githubusercontent.com/63405904/112264605-77645c80-8cb4-11eb-8409-c2dac955da02.png" alt="image" width="70%" /></p>

<h2 id="접근법">접근법</h2>

<ol>
  <li>8 x 8 체스판을 만들 수 있는 모든 경우의 수를 고려함.</li>
  <li>해당 8 x 8 체스판을 한칸씩 확인하면서 제대로 칠해져 있지 않은 칸 갯수를 구함.</li>
  <li>Min 변수와 비교하여 더 작은 숫자로 업데이트함.</li>
</ol>

<h2 id="코드">코드</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">Scanner</span> <span class="n">sc</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
    <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
    <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span> 
    <span class="kt">char</span><span class="o">[][]</span> <span class="n">board</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="o">[</span><span class="n">n</span><span class="o">][</span><span class="n">m</span><span class="o">];</span>
    
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
      <span class="n">String</span> <span class="n">input</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
      <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">m</span><span class="o">;</span><span class="n">j</span><span class="o">++){</span>
        <span class="n">board</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">input</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">);</span>
      <span class="o">}</span>
    <span class="o">}</span>
    
    <span class="kt">int</span> <span class="n">min</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">startX</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">startX</span><span class="o">&lt;</span><span class="n">n</span><span class="o">-</span><span class="mi">7</span><span class="o">;</span><span class="n">startX</span><span class="o">++){</span>
      <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">startY</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">startY</span><span class="o">&lt;</span><span class="n">m</span><span class="o">-</span><span class="mi">7</span><span class="o">;</span><span class="n">startY</span><span class="o">++){</span>
        <span class="kt">char</span> <span class="n">compare</span> <span class="o">=</span> <span class="sc">'B'</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">beginColor</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">beginColor</span><span class="o">&lt;</span><span class="mi">2</span><span class="o">;</span><span class="n">beginColor</span><span class="o">){</span>
          <span class="k">if</span><span class="o">(</span><span class="n">beginColor</span><span class="o">==</span><span class="mi">1</span><span class="o">)</span>
            <span class="n">compare</span> <span class="o">=</span> <span class="sc">'W'</span><span class="o">;</span>
          <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
          <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">k</span><span class="o">=</span><span class="n">startX</span><span class="o">;</span><span class="n">k</span><span class="o">&lt;</span><span class="n">startX</span><span class="o">+</span><span class="mi">8</span><span class="o">;</span><span class="n">k</span><span class="o">++){</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">l</span><span class="o">=</span><span class="n">startY</span><span class="o">;</span><span class="n">l</span><span class="o">&lt;</span><span class="n">startY</span><span class="o">+</span><span class="mi">8</span><span class="o">;</span><span class="n">l</span><span class="o">++){</span>
              <span class="k">if</span><span class="o">(</span><span class="n">board</span><span class="o">[</span><span class="n">k</span><span class="o">][</span><span class="n">l</span><span class="o">]!=</span><span class="n">compare</span><span class="o">)</span>
                <span class="n">count</span><span class="o">++;</span>
              <span class="k">if</span><span class="o">(</span><span class="n">compare</span> <span class="o">==</span> <span class="sc">'B'</span><span class="o">)</span>
                <span class="n">compare</span> <span class="o">=</span> <span class="sc">'W'</span><span class="o">;</span>
              <span class="k">else</span> 
                <span class="n">compare</span> <span class="o">=</span> <span class="sc">'B'</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">if</span><span class="o">(</span><span class="n">compare</span> <span class="o">==</span> <span class="sc">'B'</span><span class="o">)</span>
              <span class="n">compare</span> <span class="o">=</span> <span class="sc">'W'</span><span class="o">;</span>
            <span class="k">else</span>
              <span class="n">compare</span> <span class="o">=</span> <span class="sc">'B'</span><span class="o">;</span>
          <span class="o">}</span>
          <span class="n">min</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">min</span><span class="o">,</span> <span class="n">count</span><span class="o">);</span>
        <span class="o">}</span>
      <span class="o">}</span>
    <span class="o">}</span>
    
    <span class="n">sc</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">min</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="유의할-점">유의할 점</h2>

<ul>
  <li>8 x 8 체스판의 경우의 수를 찾을 때 n-7과 m-7까지만 고려하면 된다! 그 이상은 8 x 8 체스판을 생성하지 못하기 때문.</li>
  <li>체스판이 칠해질 수 있는 2가지 경우, B로 시작할 때와 W로 시작할 때 모두를 고려해야 한다.</li>
</ul>

<h2 id="느낀-점">느낀 점</h2>

<ul>
  <li>Brute force 답게 모든 경우를 다 고려해야만 풀 수 있는 문제였다.</li>
  <li>코드가 깔끔하지 않아서 더 좋은 방법이 있나 찾아보고 리팩토링 해보았지만 여기서 더 효율적인 방법은 찾지 못했다.</li>
  <li>이렇게까지 무식하게까지 비교라니…!!</li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>[알고리즘] 이분 탐색(Binary Search)응용 파라메트릭서치(Parametric Search)</title>
	  <link>//bin-search-parametric-Search</link>
	  <author></author>
	  <pubDate>2020-09-28T10:18:00+00:00</pubDate>
	  <guid>//bin-search-parametric-Search</guid>
	  <description><![CDATA[
	     <p>백준 이분탐색 알고리즘 <a href="https://www.acmicpc.net/problem/1654">문제</a>를 풀다가 <strong>Parametric Search</strong>라는 새로운 개념을 접하게 되었다. 처음 이 랜선 자르기 문제를 접했을 때, 어느 부분에서 이분탐색을 응용해야하는 건지 감이 잡히지 않았다. 아마도 sorting된 특정한 input에 특정한 값을 탐색하는 분야로만 이분탐색을 한정지어서 생각했기 때문에 그 틀에서 벗어난 응용을 생각하기 힘들었던 것 같다. 이런 것을 보면 아직 알고리즘 쪽으로 한참은 더 발전해야 한다고 생각한다.</p>

<h3 id="parametric-search파라메트릭-서치">Parametric Search(파라메트릭 서치)</h3>

<h5 id="이진탐색과의-차이점">이진탐색과의 차이점:</h5>

<ul>
  <li>
    <p>주어진 일련의 값들이 아니라, 주어진 범위 내에서 원하는 값이나 특정한 조건에 일치하는 값을 찾아내는 알고리즘.</p>

    <p>Ex. 이진 탐색 - 1~9에서 3이라는 값을 찾아내는 알고리즘</p>

    <p>​	   파라메트릭 서치 - 1~9 범위에서 어떠한 조건을 만족하는 3을 찾아가는 알고리즘.</p>
  </li>
</ul>

<h5 id="장점">장점:</h5>

<p>Parametric Search를 사용하면 최적화 문제를 결정 문제로 바꾸어 풀 수 있는 장점이 있다.</p>

<ul>
  <li>ex. 최대값, 최소값을 찾는 문제 -&gt; 특정 값이 어떤 조건을 만족하는지 확인하는 문제.</li>
</ul>

<h3 id="parametric-search를-응용한-랜선-자르기-풀이">Parametric Search를 응용한 [랜선 자르기] 풀이</h3>

<ul>
  <li>
    <p><strong>[문제 분석]</strong>: 오영식은 K개의 각기 다른 길이를 지닌 랜선을 가지고 있다. 이 랜선들을 가지고 N 개의 랜선을 만들고 싶을 때, N개 혹은 이상의 랜선을 맨들 수 있는 랜선의 최대 길이는 무엇인가?</p>
  </li>
  <li>
    <p><strong>[입력]</strong>: 랜선 갯수 k, 만들고 싶은 랜선 갯수 n</p>

    <p>​			k 번 동안 각 랜선의 길이</p>
  </li>
  <li>
    <p><strong>[문제풀이]</strong>:</p>

    <ol>
      <li>가장 긴 랜선의 길이를 범위로 &lt;1~랜선 길이&gt;를 범위로 parametric search를 한다.</li>
      <li>이분 탐색과 동일하게 탐색하지만, 같을 경우 해당 mid 값을 return 하는 것이 아니라, mid+1 부터 추가적으로 탐색을 진행해야 한다.
        <ul>
          <li>이것은 특정한 값을 찾는 것이 아니라, 최대 길이를 찾고 싶은 것이기 때문에 추가탐색을 해서 최대로 갈 수 있는 범위 까지 탐색해야하기 때문이다.</li>
        </ul>
      </li>
    </ol>

    <p>** 주의 사항: index가 합쳐지면서 long을 넘기 때문에 left, right, middle은 long을 사용해야 한다.</p>
  </li>
</ul>

<h4 id="코드">[코드]</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.BufferedReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.InputStreamReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.StringTokenizer</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span><span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">{</span>
    <span class="n">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="n">InputStreamReader</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
    <span class="n">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
    
    <span class="kt">int</span> <span class="n">k</span><span class="o">,</span> <span class="n">n</span><span class="o">;</span>
    <span class="n">k</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
    <span class="n">n</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
    
    <span class="kt">int</span><span class="o">[]</span> <span class="n">input</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">k</span><span class="o">];</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">k</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
      <span class="n">input</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
    <span class="o">}</span>
    <span class="n">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">input</span><span class="o">);</span>
    
    <span class="kt">long</span> <span class="n">left</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
    <span class="kt">long</span> <span class="n">right</span> <span class="o">=</span> <span class="n">input</span><span class="o">[</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="o">];</span>
    <span class="kt">long</span> <span class="n">middle</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    
    <span class="k">while</span><span class="o">(</span><span class="n">left</span><span class="o">&lt;=</span><span class="n">right</span><span class="o">)</span> <span class="o">{</span>
      <span class="n">middle</span> <span class="o">=</span> <span class="o">(</span><span class="n">left</span><span class="o">+</span><span class="n">right</span><span class="o">)/</span><span class="mi">2</span><span class="o">;</span>
      <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
      <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">k</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
        <span class="n">count</span> <span class="o">+=</span> <span class="n">input</span><span class="o">[</span><span class="n">i</span><span class="o">]/</span><span class="n">middle</span><span class="o">;</span>
      <span class="o">}</span>
      <span class="k">if</span><span class="o">(</span><span class="n">count</span><span class="o">&lt;</span><span class="n">n</span><span class="o">){</span>
        <span class="n">right</span> <span class="o">=</span> <span class="n">middle</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span>
      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
        <span class="n">left</span> <span class="o">=</span> <span class="n">middle</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span>
      <span class="o">}</span>
    <span class="o">}</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">right</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>


	  ]]></description>
	</item>

	<item>
	  <title>JPA의 연관관계 설정</title>
	  <link>//jpa-relation</link>
	  <author></author>
	  <pubDate>2020-09-24T10:18:00+00:00</pubDate>
	  <guid>//jpa-relation</guid>
	  <description><![CDATA[
	     <p><br />
<img src="https://user-images.githubusercontent.com/63405904/114411529-37273880-9be7-11eb-8acf-9af446138fe8.png" alt="image" /></p>

<h3 id="관계-예시">관계 예시</h3>

<p><img src="https://user-images.githubusercontent.com/63405904/114411303-02b37c80-9be7-11eb-937a-c8fd90afae89.png" alt="image" /></p>

<ul>
  <li>한명의 사람이 여러 아이템을 쇼핑할 때</li>
  <li>1대다 관계</li>
</ul>

<p><img src="https://user-images.githubusercontent.com/63405904/114411402-1b239700-9be7-11eb-8f48-141af4cfed11.png" alt="image" /></p>

<ul>
  <li>Item table에 user_id가 들어가면 한 아이템당 하나의 유저id 만 쓸 수 있으므로 불가하다.</li>
  <li>User 테이블에 item_id가 들어가면 한 유저당 아이템을 1개밖에 못사기 때문에 불가하다.</li>
</ul>

<p><strong>해결 방법</strong></p>

<p><img src="https://user-images.githubusercontent.com/63405904/114411426-1eb71e00-9be7-11eb-920a-f3319c9936da.png" alt="image" /></p>

<ul>
  <li>중간에 ‘주문내역’ 테이블을 생성하여 두 가지를 연결시켜 줄 수 있다.</li>
  <li>유저 한명당 여러가지 주문 내역을 가질 수 있기 때문에 1대N 관계로 존재한다. 한 유저가 몇개의 아이템을 샀는지 확인할 수 있다.</li>
  <li>아이템에 대해서도 1대N 관계를 가지면 해당 아이템을 몇명의 유저들이 주문했는지 등에 대한 정보를 알 수 있으므로 효율적이다.</li>
</ul>

<h4 id="mysql-workbench에서-erd-로-테이블-생성하기">MySQL Workbench에서 ERD 로 테이블 생성하기</h4>

<p>상단에 Database → Reverse Engineer → Continue 누리고 Execute → ERD 할 수 있는 다이어그램 생성.</p>

<ul>
  <li>Reverse Engineer: 테이블 → ERD</li>
  <li>Forward Engineer: ERD → 테이블</li>
</ul>

<h4 id="실습-user-와-item-테이블을-연결하는-주문내역-database-생성하기">실습: User 와 Item 테이블을 연결하는 주문내역 database 생성하기</h4>

<ol>
  <li>
    <p>Item 테이블과 order_detail 테이블을 필요한 columns 과 맞게 생성한다.</p>
  </li>
  <li>
    <p>order_detail에 user_id와 item_id 칼럼을 직접 생성해 줄 수 있지만 ERD 관계선을 사용해서 정의하도록 한다 ⇒ 점선 1:N 관계로 User:order_detail &amp; item:order_detail을 연결해준다.</p>

    <ul>
      <li>실선(Identifying): 식별관계</li>
    </ul>

    <p>부모 테이블의 PK가 자식 테이블의 FK/PK 가 되는 경우</p>

    <p>부모가 있어야지 자식이 생기는 경우</p>

    <ul>
      <li>점선(Non-identifying): 비식별관계</li>
    </ul>

    <p>부모 테이블의 PK가 자식 테이블의 일반속성인 경우</p>

    <p>부모가 없어도 자식이 생기는 경우</p>
  </li>
  <li>
    <p>Forward Enginner를 통해서 ERD 다이아그램을 테이블로 생성한다.</p>
  </li>
</ol>

<blockquote>
  <p>ERD를 통해서 데이터베이스를 생성하는 방법이고, 직접 테이블을 생성해도 가능하다!</p>
</blockquote>

	  ]]></description>
	</item>

	<item>
	  <title>JPA 연관관계 설정 코딩하기-2</title>
	  <link>//jpa-relation-code-2</link>
	  <author></author>
	  <pubDate>2020-09-24T10:18:00+00:00</pubDate>
	  <guid>//jpa-relation-code-2</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h3 id="annotation으로-연관관계-설정하기">Annotation으로 연관관계 설정하기</h3>

<ul>
  <li>목표는 1:N 관계 설정이다.</li>
  <li>현재 상태:
    <ol>
      <li>User와 OrderDetail이라는 테이블이 1:N 관계가 설정되어 있다.</li>
    </ol>
  </li>
</ul>

<p><br /></p>

<h4 id="user-table-과-orderdetail-table-1n-관계-설정하기">User Table 과 OrderDetail Table 1:N 관계 설정하기</h4>

<ul>
  <li>OrderDetail 테이블의 입장에서 ManyToOne 이므로,
    <ol>
      <li>OrderDetail 에 <strong>private Long UserId → private User user</strong> 로 변경.</li>
      <li>해당 변수 위에 <strong>@ManyToOne</strong> 추가</li>
    </ol>
  </li>
  <li>User 테이블의 입장에서 OneToMany 이므로,
    <ol>
      <li>User 클래스에 orderDetailList를 받을 List<OrderDetail> 변수를 생성.</OrderDetail></li>
    </ol>

    <p>private List<OrderDetail> orderDetailList;</OrderDetail></p>
  </li>
</ul>

<ol>
  <li>
    <p><strong>@OneToMany</strong>를 변수 위에 추가.</p>

    <p>@OneToMany(fetch = FetchType.LAZY, mappedBy = “user”)</p>

    <p>OrderDetail이라는 클래스 안에 “user”라는 변수와 매칭시키겠다는 것.</p>
  </li>
</ol>

<hr />

<p><strong>연관관계 설정 간단 정리:</strong></p>

<ol>
  <li>먼저 변수가 있는 Class에 가서 현재 있는 Class 기준으로 어떤 관계인지 파악 후, 해당 변수 위에 annotation을 추가함.</li>
  <li>이후 Long 등이 아니라, 객체로 연결해야 함.</li>
  <li>One 입장인 Class에 가서 상대는 Many이기 때문에 List로 받는다는 변수를 추가함.</li>
  <li>Annotation을 추가하고, fetch type, mapped by 등등을 추가함.</li>
</ol>

<p><br /></p>

<h4 id="연관관계-설정-test-하기">연관관계 설정 Test 하기</h4>

<ul>
  <li>UserRepositoryTest에 가서 read() 함수에 대한 test를 작성해보자.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Test</span>
    <span class="nd">@Transactional</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">read</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">Optional</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;</span> <span class="n">user</span> <span class="o">=</span> <span class="n">userRepository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="mi">4L</span><span class="o">);</span>

        <span class="n">user</span><span class="o">.</span><span class="na">ifPresent</span><span class="o">(</span><span class="n">selectUser</span><span class="o">-&gt;</span> <span class="o">{</span>
            <span class="n">selectUser</span><span class="o">.</span><span class="na">getOrderDetailList</span><span class="o">().</span><span class="na">stream</span><span class="o">().</span><span class="na">forEach</span><span class="o">(</span><span class="n">detail</span> <span class="o">-&gt;</span> <span class="o">{</span>
                <span class="n">Item</span> <span class="n">item</span> <span class="o">=</span> <span class="n">detail</span><span class="o">.</span><span class="na">getItem</span><span class="o">();</span>
                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">item</span><span class="o">);</span>
            <span class="o">});</span>
        <span class="o">});</span>
    <span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>이렇게 하면, item에 대한 결과값이 String으로 나오게 됌</li>
</ul>

<blockquote>
  <p>주의사항: Lombok을 사용할 때, 여기서 toString을 사용하게 되면, OrderDetail class에서 User, Item에 대한 객체에 대해서도 toString을 실행하기 때문에 overflow가 발생해서 상충하여 오류가 남.</p>
</blockquote>

<p><strong>OrderDetail</strong> 에서 다음을 추가해서 제외 시키는 제어문을 넣어주어야 함.</p>

<p>@ToString(exclude={“user”, “item”);</p>

	  ]]></description>
	</item>

	<item>
	  <title>JPA 연관관계 설정 코딩하기-1</title>
	  <link>//jpa-relation-code-1</link>
	  <author></author>
	  <pubDate>2020-09-24T10:18:00+00:00</pubDate>
	  <guid>//jpa-relation-code-1</guid>
	  <description><![CDATA[
	     <p><br /></p>
<h3 id="실습을-통해서-jpa-연관관계-intellij-프로젝트에-적용하기">실습을 통해서 JPA 연관관계 Intellij 프로젝트에 적용하기</h3>

<p>테이블을 생성하게 되면 거기에 맞는 entity를 프로젝트에 추가해 주어야 한다.</p>

<p><br /></p>

<h4 id="entity-생성">Entity 생성</h4>

<ol>
  <li>Java → model 패키지 → Entity 패키지 → 새로운 테이블에 대한 Class 생성</li>
  <li><strong>@Data</strong> 와 <strong>@Entity annotation</strong>을 추가</li>
  <li>테이블에 있는 컬럼들과 같은 이름을 가진 변수들 생성.</li>
  <li>Primary 키(Id)에 대해서 <strong>@Id</strong> 와 <strong>@GeneratedValue(strategy=GenerationType.IDENTITY)</strong> 를 추가</li>
  <li>
    <p>모든 생성자, 기본 생성자에 대한 annotation을 추가:</p>

    <p>@AllArgsConstructor @NoArgsConstructor</p>
  </li>
</ol>

<h4 id="repository-생성">Repository 생성</h4>

<ul>
  <li>각 Entity 당 repository 가 있어야 한다.</li>
</ul>

<ol>
  <li>Java → model 패키지 → Repository 패키지 → ItemRepository,,등등 이름을 가진 Interface 생성</li>
  <li><strong>@Repository</strong> 추가</li>
  <li>아래 JpaRepository extend.</li>
</ol>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ItemRepository</span> <span class="kd">extends</span> <span class="n">JpaRepository</span><span class="o">&lt;</span><span class="n">T</span><span class="o">,</span> <span class="n">idType</span><span class="o">&gt;</span> <span class="o">{}</span>
</code></pre></div></div>

<h4 id="entity와-repository-동작확인">Entity와 Repository 동작확인</h4>

<ol>
  <li>test → java → repository → ItemRepositoryTest/OrderDetailRepositoryTest 생성</li>
  <li><strong>extends StudyApplicationTests</strong> 상속 받기</li>
  <li>test 할 repository 변수 생성하고, <strong>@Autowired</strong> 추가</li>
</ol>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Autowired</span>
<span class="kd">private</span> <span class="n">ItemRepository</span> <span class="n">itemRepository</span><span class="o">;</span>
</code></pre></div></div>

<ol>
  <li>test 할 메소드들 만들고, @Test annotation 반드시 달기.</li>
</ol>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ex</span><span class="o">.</span> <span class="n">create</span> <span class="err">일</span> <span class="err">경우</span><span class="o">,</span>

<span class="nd">@Test</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">create</span><span class="o">()</span> <span class="o">{</span>
	<span class="n">Item</span> <span class="n">item</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Item</span><span class="o">();</span>
	<span class="n">item</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"노트북"</span><span class="o">);</span>
	<span class="n">item</span><span class="o">.</span><span class="na">setPrice</span><span class="o">(</span><span class="mi">100000</span><span class="o">);</span>
	<span class="n">item</span><span class="o">.</span><span class="na">setContent</span><span class="o">(</span><span class="s">"삼성 노트북"</span><span class="o">);</span>

	<span class="n">Item</span> <span class="n">newItem</span> <span class="o">=</span> <span class="n">itemRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">item</span><span class="o">);</span>
	<span class="n">Assert</span><span class="o">.</span><span class="na">assertNotNull</span><span class="o">(</span><span class="n">newItem</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<p><br /></p>

<ul>
  <li><strong>참고</strong>: Intellij 에서 Junit 클래스 Assert를 사용하기 위해서는 Gradle에 다음 dependency를 추가해야 한다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">testImplementation</span> <span class="err">'</span><span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">jupiter</span><span class="o">:</span><span class="n">junit</span><span class="o">-</span><span class="n">jupiter</span><span class="o">-</span><span class="nl">api:</span><span class="mf">5.6</span><span class="o">.</span><span class="mi">0</span><span class="err">'</span>
<span class="n">testRuntimeOnly</span> <span class="err">'</span><span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">jupiter</span><span class="o">:</span><span class="n">junit</span><span class="o">-</span><span class="n">jupiter</span><span class="o">-</span><span class="n">engine</span><span class="err">'</span>
</code></pre></div></div>

	  ]]></description>
	</item>

	<item>
	  <title>[동적계획법] 이항계수</title>
	  <link>//binomial-coefficient</link>
	  <author></author>
	  <pubDate>2020-09-24T10:18:00+00:00</pubDate>
	  <guid>//binomial-coefficient</guid>
	  <description><![CDATA[
	     <p>이런 말이 있다.</p>

<blockquote>
  <p>동적 계획법이라는 말은 전문가들이 전문가들처럼 보여줄 수 있도록 해주는 말이고 일반인들에게는 그냥 ‘기억해서 풀기’ 다.</p>
</blockquote>

<p>이항계수에 관련한 성질은 기억해두면 이후 코딩이나 알고리즘 문제를 풀 때 유용하기 때문에 기록해 준다. 이항계수를 풀 때 중요한 성질은 다음과 같다.</p>

<script type="math/tex; mode=display">{n \choose k} = {n \choose n-k}</script>

<script type="math/tex; mode=display">{n \choose k} = {n-1 \choose k} + {n-1 \choose k-1}</script>

<script type="math/tex; mode=display">\sum_{k=1}^n {n \choose k} = 2^n</script>

<p>위의 공식은 이항계수의 정의식을 참고해서 유도하는 방법으로 이항 계수의 정의식을 알고 있어야 한다.</p>

<script type="math/tex; mode=display">{n \choose k} = _{n}\mathrm{C}_{k} = \frac{n!}{(n-k)!k!}</script>

<h3 id="동적-계획법을-활용한-이항계수-풀이">동적 계획법을 활용한 이항계수 풀이</h3>

<p>이항계수에 관련한 알고리즘 문제를 풀기 위해서 이항계수의 2번째 성질을 이용하기로 한다. 그 이유는 2번째 성질이 동적 계획법 활용에 알맞게 더 작은 부분으로 분할하여 정복 할 수 있는 성질을 잘 드러내고 있기 때문이다. 다음 방법을 사용해서 알고리즘을 풀어보자.</p>

<p>여기서 일반 재귀나 분할 정복보다 동적 계획법에 알맞게 진행하기 위해서 memoization을 사용한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//DAC</span>
<span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Main</span><span class="o">{</span>
	<span class="kd">static</span> <span class="kt">long</span><span class="o">[][]</span> <span class="n">value</span><span class="o">;</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
		<span class="n">Scanner</span> <span class="n">sc</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
		<span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
		<span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>

		<span class="n">value</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">long</span><span class="o">[</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="o">][</span><span class="n">k</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>

		<span class="n">coef</span><span class="o">(</span><span class="n">n</span><span class="o">,</span> <span class="n">k</span><span class="o">);</span>
		<span class="kt">long</span> <span class="n">result</span> <span class="o">=</span> <span class="n">value</span><span class="o">[</span><span class="n">n</span><span class="o">][</span><span class="n">k</span><span class="o">];</span>
		<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">coef</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">){</span>
		<span class="k">if</span> <span class="o">(</span><span class="n">a</span><span class="o">==</span><span class="n">b</span><span class="o">){</span>
			<span class="n">value</span><span class="o">[</span><span class="n">a</span><span class="o">][</span><span class="n">b</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
			<span class="k">return</span><span class="o">;</span>
		<span class="o">}</span>
		<span class="k">if</span> <span class="o">(</span><span class="n">b</span><span class="o">==</span><span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">value</span><span class="o">[</span><span class="n">a</span><span class="o">][</span><span class="n">b</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
			<span class="k">return</span><span class="o">;</span>
		<span class="o">}</span>
		<span class="k">else</span> <span class="o">{</span>
      
			<span class="k">if</span><span class="o">(</span><span class="n">value</span><span class="o">[</span><span class="n">a</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="n">b</span><span class="o">]</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
				<span class="n">coef</span><span class="o">(</span><span class="n">a</span><span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="n">b</span><span class="o">);</span>
			<span class="k">if</span><span class="o">(</span><span class="n">value</span><span class="o">[</span><span class="n">a</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="n">b</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> 
				<span class="n">coef</span><span class="o">(</span><span class="n">a</span><span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="n">b</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span>
			<span class="n">value</span><span class="o">[</span><span class="n">a</span><span class="o">][</span><span class="n">b</span><span class="o">]</span> <span class="o">=</span> <span class="n">value</span><span class="o">[</span><span class="n">a</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="n">b</span><span class="o">]</span> <span class="o">+</span> <span class="n">value</span><span class="o">[</span><span class="n">a</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="n">b</span><span class="o">-</span><span class="mi">1</span><span class="o">];</span>
			<span class="k">return</span><span class="o">;</span>
		<span class="o">}</span>
	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<p>단순히 이항계수의 정의를 이용한 유도식을 재귀를 통해서 구현한 것이다. 다음과 같이 구현하면 작은 숫자들에 대해서는 충분히 답을 낼 수 있지만 숫자가 커지게 되면 할당해야 하는 배열의 크기가 기하급수적으로 커지게되고, 그 결과 값 또한 long 타입으로도 담을 수 없기 때문에 매우 제한적이다. 따라서 <a href="https://www.acmicpc.net/problem/11401">백준 11401</a>에서는 이항계수를 소수인 1,000,000,007로 나눈 프로그램을 작성하도록 되어 있다. 그 연산에 대해서는 2가지 접근 방법이 있다.</p>

<p>우선, 왜 위에서 소개한 이항계수 정의식에 바로 % 1,000,000,007을 하지 않는지에 대한 이유를 짚고 넘어가야 한다. 이항계수 정의식은 분수꼴이기 때문에 소수 p로 % 연산을 했을 때 분자와 분모에 나뉘어서 적용되지 않는다.</p>

<script type="math/tex; mode=display">\frac{N!}{K!(N-K)!}\%p\qquad  \Longrightarrow \qquad \text{나뉘어서 적용 불가}</script>

<h3 id="접근-방법--1-확장-유클리드-알고리즘">접근 방법  1. 확장 유클리드 알고리즘</h3>

<p>확장 유클리드 알고리즘은 기본 원리로 유클리드 호제법으로 GCD를 구하는 것을 따라가며, 두 정수 A,B가 주어졌을 때, 베주 항등식인 $Ax+By=gcd(A,B)$ 에서 gcd(A,B)를 구하고 정수해 (x,y)를 구하는 알고리즘이다.</p>

<p>여기서 사용하고 싶은 확장 유클리드 알고리즘의 항을 써보면 다음과 같다.</p>

<script type="math/tex; mode=display">(AB^{-1}) \% p</script>

<p>위에서 말했던 이항계수 정의식을 보면 $A$와 $B$에 각각 무엇이 대입되는지 알 수 있다. 여기서 확장 유클리드 알고리즘을 사용하는데, 확장 유클리드 알고리즘은 두 수의 최대공약수와 베주 항등식의 $x$와 $y$까지 구할 수 있는 알고리즘이다.</p>

<script type="math/tex; mode=display">Bx + py =1 \qquad (i)</script>

<script type="math/tex; mode=display">Bx \equiv 1 \pmod{p} \qquad (ii)</script>

<p>위의 (i)에서 확장 유클리드 알고리즘으로 정수해 $(x, y)$를 구할 수 있는데 그럼 다음 식에 대입하면 원하는 식을 구할 수 있다.</p>

<script type="math/tex; mode=display">(AB^{-1}) \% p \\= (AB^{-1} \cdot 1) \%p\\=(AB^{-1} \cdot Bx)\%p\\=Ax\%p</script>

<p>결론은, <strong>베주 항등식에서 구한 $x$와 정의식에서 정의한 $A$를 곱한 것을 $p$로 modular 하면 원하는 식을 구할 수 있다.</strong></p>

<p>여기서 확장 유클리드 알고리즘을 이해하고 최종적으로 $x$를 구하는 것이 어렵게 느껴졌는데, 구현해보니 지나치게 길거나 복잡하지는 않았다. 재귀를 사용해서 구현하였다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">euc</span><span class="o">(</span><span class="kt">long</span> <span class="n">p</span><span class="o">,</span> <span class="kt">long</span> <span class="n">B</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">if</span><span class="o">(</span><span class="n">p</span><span class="o">%</span><span class="n">B</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">){</span>
    <span class="n">euc</span><span class="o">(</span><span class="n">B</span><span class="o">,</span> <span class="n">p</span><span class="o">%</span><span class="n">B</span><span class="o">);</span>
    <span class="n">temp</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
    <span class="n">y</span> <span class="o">=</span> <span class="n">x</span> <span class="o">-</span> <span class="o">(</span><span class="n">p</span><span class="o">/</span><span class="n">B</span><span class="o">)</span> <span class="o">*</span> <span class="n">y</span><span class="o">;</span>
    <span class="n">x</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>
  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
    <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="n">y</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong><small>[참고 자료]: https://onsil-thegreenhouse.github.io/programming/problem/2018/04/02/problem_combination/</small></strong></p>

	  ]]></description>
	</item>

	<item>
	  <title>[백엔드] JPA 란?</title>
	  <link>//jpa</link>
	  <author></author>
	  <pubDate>2020-09-23T10:18:00+00:00</pubDate>
	  <guid>//jpa</guid>
	  <description><![CDATA[
	     <p><br /></p>

<h4 id="jpajava-persistent-api">JPA(Java Persistent API)</h4>

<ul>
  <li>ORM(Object Relational Mapping)으로, RDB 데이터 베이스의 정보를 객체지향으로 활용할 수 있도록 해주는 도구.</li>
  <li>Object(자바 객체)와 Relation(관계형 데이터베이스) 간의 맵핑을 통해서 손쉽게 기술을 적용할 수 있도록 함.</li>
  <li>쿼리에 집중하기 보다, 객체에 집중하므로 프로그래밍으로 많이 활용 가능.</li>
</ul>

<h4 id="mysql-workbench-에서-테이블-생성하기">MySQL Workbench 에서 테이블 생성하기</h4>

<ol>
  <li>Mysql.server start 통해서 서버가 실행되고 있는지 확인.</li>
  <li>MySql workbench에서 스키마로 가서 스키마 생성 후 테이블을 생성</li>
  <li>각 테이블에 column 들을 정의함.</li>
</ol>

<h4 id="intellij-에서-jpa-설정하기">Intellij 에서 JPA 설정하기</h4>

<ol>
  <li>build.gradle에 가서 dependency 추가.
    <ul>
      <li>이후 오른쪽에 gradle &gt; build &gt; clean 누른 후에, dependencies가 추가되는 것을 확인.</li>
    </ul>
  </li>
  <li>Resource &gt; <a href="http://application.properties">application.properties</a> &gt; db source url, response name, response password 입력(yjsql)</li>
  <li>다시 실행해서 실행되는 것 확인함.</li>
</ol>


	  ]]></description>
	</item>


</channel>
</rss>
