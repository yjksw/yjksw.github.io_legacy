<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>yjksw.github.io/</title>
   
   <link></link>
   <description>A beautiful narrative written with the world's most elegant publishing platform. The story begins here.</description>
   <language>en-uk</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>TDD, 리펙토링이란?</title>
	  <link>//tdd</link>
	  <author></author>
	  <pubDate>2021-02-21T10:18:00+00:00</pubDate>
	  <guid>//tdd</guid>
	  <description><![CDATA[
	     <h2 id="test-driven-development테스트-주도-개발-tdd">Test Driven Development(테스트 주도 개발, TDD)</h2>

<ul>
  <li>Production Code : 프로그램 구현을 담당하는 부분으로 사용자가 사용하는 소스 코드</li>
  <li>Test code : 프로덕션 코드가 정상적으로 동작하는지 확인하는 코드</li>
</ul>

<h3 id="tdd란">TDD란?</h3>

<p>TDD = TFD(Test First Development) + 리팩토링</p>

<p>설계를 한번에 몰아서 하는 것이 아니라, 작은 단위로 자주 하자는 것</p>

<p>TDD를 잘 하려면 먼저 요구사항 분석을 잘 해야 한다 → TDD는 테스트 기술이 아니다 !</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">TDD</span><span class="err">는</span> <span class="err">분석</span> <span class="err">기술이며</span> <span class="err">설게</span> <span class="err">기술이기도</span> <span class="err">하다</span><span class="o">.</span> 
<span class="n">TDD</span><span class="err">란</span> <span class="err">프로그래밍</span> <span class="err">의사결정과</span> <span class="err">피드백</span> <span class="err">사이의</span> <span class="err">간극을</span> <span class="err">의식하고</span> <span class="err">이를</span> <span class="err">제어하는</span> <span class="err">기술이다</span><span class="o">.</span> 
</code></pre></div></div>

<p><img src="TDD,%20%E1%84%85%E1%85%B5%E1%84%91%E1%85%A6%E1%86%A8%E1%84%90%E1%85%A9%E1%84%85%E1%85%B5%E1%86%BC%E1%84%8B%E1%85%B5%E1%84%85%E1%85%A1%E1%86%AB%20eebf5e3b124e4a9cb8805add9639afcf/_2021-02-16__11.43.25.png" alt="TDD,%20%E1%84%85%E1%85%B5%E1%84%91%E1%85%A6%E1%86%A8%E1%84%90%E1%85%A9%E1%84%85%E1%85%B5%E1%86%BC%E1%84%8B%E1%85%B5%E1%84%85%E1%85%A1%E1%86%AB%20eebf5e3b124e4a9cb8805add9639afcf/_2021-02-16__11.43.25.png" /></p>

<ul>
  <li>TDD 원칙
    <ol>
      <li>실패하는 단위 테스트를 작성할 때까지 프로덕션 코드를 작성하지 않음</li>
      <li>컴파일은 실패하지 않으면서 실행에 실패하는 정도로만 단위 테스트를 작성</li>
      <li>현재 실패하는 테스트를 통과할 정도로만 실제 코드를 작성</li>
    </ol>
  </li>
</ul>

<h3 id="tdd에-집착하는-이유">TDD에 집착하는 이유</h3>

<ul>
  <li>요구사항 추가, 변경 때문에 소스코드를 수정하면서 불안하게 살지 않을 수 있다</li>
  <li>주로 한번에 한 가지만 집중할 수 있다</li>
  <li>
    <p>처음부터 완벽한 설계를 하는 것보다 점진적으로 설계를 개선해 나갈 수 있다</p>
  </li>
  <li>
    <p>Test Fail → Test pass 가 되면 우선 심리적 안정감을 느낀다</p>

    <p>⇒ 이때 창의적으로 안정적인 설계 리팩토링을 할 수 있다.</p>
  </li>
  <li>빠른 피드백으로 개발 효율성을 높인다
    <ul>
      <li>버그를 찾는 시점이 매우 빨라진다</li>
      <li>일정한 리듬을 통해서 프로그래밍에 재미를 느낄 수 있다</li>
      <li>더 많은 삽질을 할 수 있다 → 더 많은 것을 배울 수 있다 (ㅋㅋ)</li>
    </ul>
  </li>
  <li>수동 테스트, 배포에 대한 부담을 줄이면서 핵심적인 비지니스 로직 구현에 집중할 수 있다</li>
</ul>

<p>지금 필요한 것은 새로운 접근방식에 도전할 수 있는 용기 😃</p>

<h2 id="tdd로-자동차-경주-게임-구현">TDD로 자동차 경주 게임 구현</h2>

<hr />

<h3 id="처음-tdd-단위-테스트를-시작할-때-">처음 TDD, 단위 테스트를 시작할 때 …</h3>

<p>도대체, 어디서, 어떻게, 무엇으로 시작해야할지 모르겠다 ! 감이 안 잡힌다 !</p>

<h3 id="자동차-경주-게임에-적용하기">자동차 경주 게임에 적용하기</h3>

<ul>
  <li>먼저 요구사항 분석으로 대략적인 설계를 한다 ⇒ 객체를 추출</li>
  <li>UI, DB와 의존관계를 가지지 않는 핵심 도메인 모델(핵심 비지니스 로직을 가지는) 영역에 집중
    <ul>
      <li>일단 뷰나 컨트롤러에 대한 테스트는 어렵고 지금 단계에서는 안해도 될 것 같다 (1차적으로)</li>
    </ul>
  </li>
</ul>

<ol>
  <li><strong>우선 구현할 기능 목록 작성하기</strong></li>
  <li>그래도 막막하다면,,
    <ul>
      <li>우선 일단 구현하고, 도메인 지식을 쌓는다</li>
      <li>이후에 구현한 코드를 버리고, 다시 기능 목록 작성 및 TDD 구현으로 시작한다.</li>
      <li>코드를 버리는 것을 아까워 하지 마라!</li>
      <li>아무것도 없는 상태에서 새롭게 구현하는 것이 레거시 코드를 리팩토링 하는 것보다 쉽다</li>
    </ul>
  </li>
</ol>

<h3 id="실제-자동차-게임-구현해보기">실제 자동차 게임 구현해보기</h3>

<ol>
  <li>일단 구현해보기</li>
  <li>TDD가 가능한 부분을 찾아서 단위 테스트 하기
    <ul>
      <li>자동차 이동 유무 등등</li>
    </ul>
  </li>
  <li>테스트하기 어려운 부분을 찾아서 가능한 구조로 개선하기
    <ul>
      <li>어떻게 판단하느냐?
        <ul>
          <li>Object Graph에서 다른 Object에 의존하지 않는 가장 마지막 노드를 찾는다.</li>
          <li>예) RacingMain → RacingGame → Car에서 Car 가 테스트 가능 한가?</li>
          <li>만약 Car에서 랜덤 인풋을 사용한다면 테스트하기 어렵다.</li>
        </ul>
      </li>
      <li>해결책
        <ul>
          <li>테스트가 어려운 코드의 의존관계를 object graph의 상위로 이동한다.</li>
          <li>즉, 언젠가는 테스트 하기 어려운 코드가 생기지만, 테스트 할 수 있는 영역이 넓어진다</li>
        </ul>
      </li>
    </ul>
  </li>
</ol>

<p><img src="TDD,%20%E1%84%85%E1%85%B5%E1%84%91%E1%85%A6%E1%86%A8%E1%84%90%E1%85%A9%E1%84%85%E1%85%B5%E1%86%BC%E1%84%8B%E1%85%B5%E1%84%85%E1%85%A1%E1%86%AB%20eebf5e3b124e4a9cb8805add9639afcf/_2021-02-16__12.13.25.png" alt="TDD,%20%E1%84%85%E1%85%B5%E1%84%91%E1%85%A6%E1%86%A8%E1%84%90%E1%85%A9%E1%84%85%E1%85%B5%E1%86%BC%E1%84%8B%E1%85%B5%E1%84%85%E1%85%A1%E1%86%AB%20eebf5e3b124e4a9cb8805add9639afcf/_2021-02-16__12.13.25.png" /></p>

<ul>
  <li>테스트하기 어려운 코드들
    <ul>
      <li>내부 API
        <ul>
          <li>외부 세계 : 외부 REST API, 데베 API</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="라이브-코딩으로-tdd-학습하기">라이브 코딩으로 TDD 학습하기</h2>

<hr />

<ol>
  <li>
    <p>먼저 Test Code를 작성한다</p>

    <ul>
      <li>이때 당연하게 컴파일 에러가 생긴다</li>
    </ul>
  </li>
  <li>
    <p>우선 존재하는 컴파일 에러를 모두 해결한다.</p>

    <ul>
      <li>이후에 실행해보면 우선 테스트는 실패한다! (1단계 : 실패하는 테스트)</li>
    </ul>
  </li>
  <li>이후에 우선 테스트를 패스하도록 한다.
    <ul>
      <li>제대로된 로직을 구현하지 않아도 꼼수를 통해서 우선 패스 하도록 한다</li>
      <li>최대한 초록불을 빨리 보자! (2단계 : 테스트 패스)</li>
    </ul>
  </li>
  <li>리팩토링 하도록 한다
    <ul>
      <li>이름 바꾸기 등등</li>
    </ul>

    <p>처음에만 ctrl shitf R이고 이후에는 ctrl R 만 누르면 직전 코드를 실행한다.</p>
  </li>
  <li>추가 다른 경우 테스트를 추가했을 때 실패하게 된다. 이때 이제 로직을 점차적으로 수정해간다.
    <ul>
      <li>설계 개선을 고민한다!!</li>
      <li>이때 설계를 개선한다.</li>
      <li>이때 생각을 바꾸는 과정을 거치는 것이다. (어렵다.. ㅠ)</li>
    </ul>

    <p>테스트 코드도 리팩토링이 필요하다 ! 중복을 없애고 더 효율적으로 개선하라.</p>
  </li>
</ol>

<p>만약 프로덕션 코드를 구현하는 도중에 크게 리팩토링 해야할 부분들이 보이면 꾹 참고 다음에 해야할까? 까먹으면 어쩌죠?</p>
<ul>
  <li>TODO 리스트를 만들어서 지속적으로 업데이트 하는 것을 추천 한다.</li>
  <li>처음에 한번만 만들어서 그것만 해치우는 것이 아니라 중간에 생긴 것들을 추가하여 구현하도록 한다.</li>
</ul>

<p>안좋은 커밋 습관이 컴파일 되지 않는 코드를 커밋하는 것이다. 
기본 규칙은 반드시 컴파일 되는 코드를 커밋하는 것이다. 
리팩토링 연습을 위한 커밋 단위도 추천한다 
→ 대대적인 리팩토링을 하기 전에 커밋을 하여, 실패했을 경우 다시 되돌려서 다시 리팩토링을 할 수 있으니까!</p>

	  ]]></description>
	</item>

	<item>
	  <title>[알고리즘] 이진탐색 응용: UpperBound와 LowerBound</title>
	  <link>//bin-search-bound</link>
	  <author></author>
	  <pubDate>2020-09-04T10:18:00+00:00</pubDate>
	  <guid>//bin-search-bound</guid>
	  <description><![CDATA[
	     <p>이진탐색의 응용 버전으로 상/하한선을 찾는 알고리즘이다. 이를 응용한 <a href="https://www.acmicpc.net/problem/10816">문제</a>를 풀면서 배운 개념을 정리해둔다.</p>

<p>이진탐색을 사용하면 모든 요소들을 다 방문하면서 탐색하는 것보다 훨씬 더 효율적으로 원하는 요소를 탐색할 수 있다. 하지만 이진탐색의 경우, <u>중복되지 않은 값이 주어진 경우</u>이거나, <u>해당 요소의 존재 여부</u>만을 가리기 위해서 일 경우에만 사용이 가능하다. 위의 문제의 경우, 중복되는 값들이 존재하며 그 값들이 총 몇개가 있는지도 확인할 수 있어야 하기 때문에 일반적인 이진탐색을 통해서는 답을 도출할 수 없다. 그래서 찾은 알고리즘 <mark>Upper Bound</mark> 와 <mark>Lower Bound</mark> 알고리즘 이다. <strong>이진탐색에서 살짝 변형되어서 중복된 자료가 있을 때 유용하게 탐색할 수 있는 알고리즘</strong>이다.</p>

<p>아래 그림을 보면 lower bound와 upper bound에 대해서 더 잘 이해할 수 있다.</p>

<p><img src="https://user-images.githubusercontent.com/63405904/111030306-c4d70300-8444-11eb-8b82-7ad2c3cc0ec1.png" alt="image" /></p>

<h3 id="upper-bound-algorithm">Upper Bound Algorithm</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; Upper Bound Theory:
	K 값보다 큰 값(&gt;)이 처음 나오는 위치를 리턴해주는 알고리즘. 
</code></pre></div></div>

<p>구현은 이진 탐색과 매우 유사하지만 약간의 변형이 있다.</p>

<ol>
  <li><strong>탐색의 범위를 크기가 n일 때:</strong> index만큼인 n-1까지 탐색하는 것이 아니라, n까지 탐색해야 함.</li>
  <li><strong>탐색하는 숫자 k를 찾았거나, mid 값보다 k가 작을 경우:</strong>  해당 값이나 위치를 return하는 것이 아니라, 중간 값 이후부터 분할한 오른쪽 부분을 재 탐색함.</li>
  <li><strong>탐색하는 숫자 k보다 mid에 있는 값이 클 경우:</strong> 본래 mid를 제외한 start~mid-1까지를 탐색했으나, 여기서는 start~mid 탐색해 mid값을 재포함 함.</li>
</ol>

<p>여기서 1번을 시행하는 이유는 만약 배열에 있는 모든 요소, 혹은 마지막 요소보다 큰 값에 대해서 return 해야할 경우, 배열의 크기 만큼을 리턴해야 하므로 end 요소에 이진 탐색처럼 <code class="highlighter-rouge">array.length-1</code>이 아닌 <code class="highlighter-rouge">array.length</code>가 들어가야 한다.</p>

<p>2번의 경우에는 해당 값 k를 찾았을 때도, <em><u>k보다 큰 값이 처음 등장하는 위치</u></em> 를 찾아야 하기 때문에, 해당 다음 위치부터 end index에 대해서 마지막 하나 남을 때까지 재탐색 해야 한다.</p>

<p>3번의 경우 mid 인덱스를 재포함하는 이유는 해당 mid에 있는 값이 upper bound 일 수 있으나, 탐색 숫자 k보다 <u>큰 첫번째 숫자임을 보장할 수 없기 때문에</u> 탐색을 이어서 진행하는 것이다.</p>

<p><strong>코드:</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">static</span> <span class="kt">int</span> <span class="nf">searchUpper</span><span class="o">(</span><span class="kt">int</span> <span class="n">start</span><span class="o">,</span> <span class="kt">int</span> <span class="n">end</span><span class="o">,</span> <span class="kt">int</span> <span class="n">num</span><span class="o">){</span>
  <span class="k">if</span><span class="o">(</span><span class="n">start</span><span class="o">&gt;=</span><span class="n">end</span><span class="o">)</span>
    <span class="k">return</span> <span class="n">start</span><span class="o">;</span>
  
  <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="o">(</span><span class="n">start</span><span class="o">+</span><span class="n">end</span><span class="o">)/</span><span class="mi">2</span><span class="o">;</span>
  
  <span class="k">if</span><span class="o">(</span><span class="n">num_list</span><span class="o">[</span><span class="n">mid</span><span class="o">]&lt;=</span><span class="n">num</span><span class="o">){</span>
    <span class="k">return</span> <span class="nf">searchUpper</span><span class="o">(</span><span class="n">mid</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">end</span><span class="o">,</span> <span class="n">num</span><span class="o">);</span>
  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nf">searchUpper</span><span class="o">(</span><span class="n">start</span><span class="o">,</span> <span class="n">mid</span><span class="o">,</span> <span class="n">num</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="lower-bound-algorithm">Lower Bound Algorithm</h3>

<p>Lower bound 또한 Upper bound와 매우 유사하게 진행되므로 위의 설명을 참고하면 된다. 다만 upper bound와 다르게 작용하는 부분은, 딱 한 부분이다.</p>

<ul>
  <li>탐색하고 있는 k가 등장했을 때, upper bound 알고리즘에서는 mid+1 값부터 오른쪽 반을 탐색하였는데, lower bound 알고리즘에서는 mid를 포함시켜 왼쪽 반을 탐색하도록 한다.</li>
</ul>

<p>이 부분은 lower bound이 경우 숫자 k 가 처음 등장한 위치를 찾아야 하기 때문에 k 가 등장하더라도 그 이전에 k가 존재하지는 않는지 확인해야 하기 때문이다.</p>

<p><strong>코드:</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">static</span> <span class="kt">int</span> <span class="nf">searchLower</span><span class="o">(</span><span class="kt">int</span> <span class="n">start</span><span class="o">,</span> <span class="kt">int</span> <span class="n">end</span><span class="o">,</span> <span class="kt">int</span> <span class="n">num</span><span class="o">){</span>
  <span class="k">if</span><span class="o">(</span><span class="n">start</span><span class="o">&gt;=</span><span class="n">end</span><span class="o">)</span>
    <span class="k">return</span> <span class="n">start</span><span class="o">;</span>
  
  <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="o">(</span><span class="n">start</span><span class="o">+</span><span class="n">end</span><span class="o">)/</span><span class="mi">2</span><span class="o">;</span>
  
  <span class="k">if</span><span class="o">(</span><span class="n">num_list</span><span class="o">[</span><span class="n">mid</span><span class="o">]&gt;=</span><span class="n">num</span><span class="o">){</span>
    <span class="k">return</span> <span class="nf">searchLower</span><span class="o">(</span><span class="n">start</span><span class="o">,</span> <span class="n">mid</span><span class="o">,</span> <span class="n">num</span><span class="o">);</span>
  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nf">searchLower</span><span class="o">(</span><span class="n">mid</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">end</span><span class="o">,</span> <span class="n">num</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong><small>[참고 자료]: http://bajamircea.github.io/coding/cpp/2018/08/09/lower-bound.html, <a href="https://jackpot53.tistory.com/33#:~:text=lower bound는 데이터내,를 리턴해주는 알고리즘이다.">https://jackpot53.tistory.com/33#:~:text=lower%20bound%EB%8A%94%20%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%82%B4,%EB%A5%BC%20%EB%A6%AC%ED%84%B4%ED%95%B4%EC%A3%BC%EB%8A%94%20%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%B4%EB%8B%A4.</a> </small></strong></p>

	  ]]></description>
	</item>


</channel>
</rss>
