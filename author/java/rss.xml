<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>yjksw.github.io/</title>
   
   <link></link>
   <description>A beautiful narrative written with the world's most elegant publishing platform. The story begins here.</description>
   <language>en-uk</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>재귀 vs. 반복</title>
	  <link>//recursion</link>
	  <author></author>
	  <pubDate>2021-02-26T10:18:00+00:00</pubDate>
	  <guid>//recursion</guid>
	  <description><![CDATA[
	     <p><strong>Binary Search</strong> 이분탐색을 구현하면서, 계속 런타임 에러가 났다. 처음에 재귀로 구현을 시작했는데, 재귀에 너무 큰 값이 들어오면서 stack overflow 에러가 났나 싶어서 다시 while 문으로 구현했다. 하지만 while 문으로 구현한 이후에도 계속 런타임 에러가 떠서 확인해보니, n과 m을 헷갈려서 잘못 적었던 것이었다.</p>

<p>이왕 while 문으로 구현해서 맞은 거, 재귀와 비교해 보자 해서 재귀를 돌려 보았더니, 재귀가 훨씬 빠르고 메모리 효율도 좋은 것이었다. 일반적으로 생각했을 때, 재귀는 매번 메모리를 할당하면서 새로운 함수를 call 해주어야 하고, 또 그만큼의 시간과 공간이 더 필요해서 반복문에 비해 성능이 다소 떨어진다고 알고 있었지만, 훨씬 빠르고 메모리 효율도 좋아서 그 이유에 대해서 찾아보게 되었다. 정답은 <strong>Tail-recursion.</strong></p>

<h2 id="tail-recursion">Tail-Recursion</h2>

<h3 id="tail-recursion이란">Tail-Recursion이란?</h3>

<p>Tail-Recursion이란 recursion 함수에서 가장 나중에 실행되는 명령어를 뜻한다. 마지막 시행 명령이 재귀 호출이라면, 해당 함수는 tail-recursion의 형태를 가지고 있다고 할 수 있다.</p>

<h3 id="tail-recursion의-효능">Tail-Recursion의 효능</h3>

<p>Tail-recursion은 주로 non tail recursion에 비교해서 성능이 더 좋은 것으로 나타난다. 마지막 recursion을 call 하고, 해당 호출에 연산이 포함되어 있지 않는다면 컴파일러에 의해서 해당 tail-recursion 함수는 optimize 된다. 이 이유는, tail-recursion 함수의 경우, 함수의 가장 마지막으로 실행하는 것이 recursive call이기 때문에 현재 머물고 있는 함수에 더 이상 진행할 instruction이 없고 따라서 현재 함수를 stack에 저장하지 않아도 된다. 때문에 non tail recursion 보다 더 빠르고, stack 메모리를 사용하지 않는 장점을 지닌다.</p>

<p>주의할 것은 다음과 같이 마지막에 recursive 함수 호출은 한다고 하더라도, 연산이 끼어 있다면, optimize 될 수 없다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">static</span> <span class="kt">int</span> <span class="nf">fac</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span><span class="o">){</span>
	<span class="k">if</span><span class="o">(</span><span class="n">num</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
		<span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
	
	<span class="k">return</span> <span class="n">n</span><span class="o">*</span><span class="n">fac</span><span class="o">(</span><span class="n">num</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="결과-비교">결과 비교</h3>

<p>백준 이분 탐색을 풀었을 때 결과 화면이다.</p>

<p>첫번째 실행이 tail recursion을 사용하여 구현했을 때이고, 두번째가 while 반복문을 사용하여서 구현한 것인데 tail recursion이 재귀를 사용했음에도 불구하고 그 시간이 현저히 빠르고 메모리 효율 또한 좋은 것을 확인할 수 있다.</p>

<p><img src="%E1%84%8C%E1%85%A2%E1%84%80%E1%85%B1%20vs%20%E1%84%87%E1%85%A1%E1%86%AB%E1%84%87%E1%85%A9%E1%86%A8%20cdf97d3b5b144477a10068a6f868ddaf/baekResult.png" alt="%E1%84%8C%E1%85%A2%E1%84%80%E1%85%B1%20vs%20%E1%84%87%E1%85%A1%E1%86%AB%E1%84%87%E1%85%A9%E1%86%A8%20cdf97d3b5b144477a10068a6f868ddaf/baekResult.png" /></p>


	  ]]></description>
	</item>

	<item>
	  <title>TDD, 리펙토링이란?</title>
	  <link>//tdd</link>
	  <author></author>
	  <pubDate>2021-02-21T10:18:00+00:00</pubDate>
	  <guid>//tdd</guid>
	  <description><![CDATA[
	     <h2 id="test-driven-development테스트-주도-개발-tdd">Test Driven Development(테스트 주도 개발, TDD)</h2>

<ul>
  <li>Production Code : 프로그램 구현을 담당하는 부분으로 사용자가 사용하는 소스 코드</li>
  <li>Test code : 프로덕션 코드가 정상적으로 동작하는지 확인하는 코드</li>
</ul>

<h3 id="tdd란">TDD란?</h3>

<p>TDD = TFD(Test First Development) + 리팩토링</p>

<p>설계를 한번에 몰아서 하는 것이 아니라, 작은 단위로 자주 하자는 것</p>

<p>TDD를 잘 하려면 먼저 요구사항 분석을 잘 해야 한다 → TDD는 테스트 기술이 아니다 !</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">TDD</span><span class="err">는</span> <span class="err">분석</span> <span class="err">기술이며</span> <span class="err">설게</span> <span class="err">기술이기도</span> <span class="err">하다</span><span class="o">.</span> 
<span class="n">TDD</span><span class="err">란</span> <span class="err">프로그래밍</span> <span class="err">의사결정과</span> <span class="err">피드백</span> <span class="err">사이의</span> <span class="err">간극을</span> <span class="err">의식하고</span> <span class="err">이를</span> <span class="err">제어하는</span> <span class="err">기술이다</span><span class="o">.</span> 
</code></pre></div></div>

<p><img src="TDD,%20%E1%84%85%E1%85%B5%E1%84%91%E1%85%A6%E1%86%A8%E1%84%90%E1%85%A9%E1%84%85%E1%85%B5%E1%86%BC%E1%84%8B%E1%85%B5%E1%84%85%E1%85%A1%E1%86%AB%20eebf5e3b124e4a9cb8805add9639afcf/_2021-02-16__11.43.25.png" alt="TDD,%20%E1%84%85%E1%85%B5%E1%84%91%E1%85%A6%E1%86%A8%E1%84%90%E1%85%A9%E1%84%85%E1%85%B5%E1%86%BC%E1%84%8B%E1%85%B5%E1%84%85%E1%85%A1%E1%86%AB%20eebf5e3b124e4a9cb8805add9639afcf/_2021-02-16__11.43.25.png" /></p>

<ul>
  <li>TDD 원칙
    <ol>
      <li>실패하는 단위 테스트를 작성할 때까지 프로덕션 코드를 작성하지 않음</li>
      <li>컴파일은 실패하지 않으면서 실행에 실패하는 정도로만 단위 테스트를 작성</li>
      <li>현재 실패하는 테스트를 통과할 정도로만 실제 코드를 작성</li>
    </ol>
  </li>
</ul>

<h3 id="tdd에-집착하는-이유">TDD에 집착하는 이유</h3>

<ul>
  <li>요구사항 추가, 변경 때문에 소스코드를 수정하면서 불안하게 살지 않을 수 있다</li>
  <li>주로 한번에 한 가지만 집중할 수 있다</li>
  <li>
    <p>처음부터 완벽한 설계를 하는 것보다 점진적으로 설계를 개선해 나갈 수 있다</p>
  </li>
  <li>
    <p>Test Fail → Test pass 가 되면 우선 심리적 안정감을 느낀다</p>

    <p>⇒ 이때 창의적으로 안정적인 설계 리팩토링을 할 수 있다.</p>
  </li>
  <li>빠른 피드백으로 개발 효율성을 높인다
    <ul>
      <li>버그를 찾는 시점이 매우 빨라진다</li>
      <li>일정한 리듬을 통해서 프로그래밍에 재미를 느낄 수 있다</li>
      <li>더 많은 삽질을 할 수 있다 → 더 많은 것을 배울 수 있다 (ㅋㅋ)</li>
    </ul>
  </li>
  <li>수동 테스트, 배포에 대한 부담을 줄이면서 핵심적인 비지니스 로직 구현에 집중할 수 있다</li>
</ul>

<p>지금 필요한 것은 새로운 접근방식에 도전할 수 있는 용기 😃</p>

<h2 id="tdd로-자동차-경주-게임-구현">TDD로 자동차 경주 게임 구현</h2>

<hr />

<h3 id="처음-tdd-단위-테스트를-시작할-때-">처음 TDD, 단위 테스트를 시작할 때 …</h3>

<p>도대체, 어디서, 어떻게, 무엇으로 시작해야할지 모르겠다 ! 감이 안 잡힌다 !</p>

<h3 id="자동차-경주-게임에-적용하기">자동차 경주 게임에 적용하기</h3>

<ul>
  <li>먼저 요구사항 분석으로 대략적인 설계를 한다 ⇒ 객체를 추출</li>
  <li>UI, DB와 의존관계를 가지지 않는 핵심 도메인 모델(핵심 비지니스 로직을 가지는) 영역에 집중
    <ul>
      <li>일단 뷰나 컨트롤러에 대한 테스트는 어렵고 지금 단계에서는 안해도 될 것 같다 (1차적으로)</li>
    </ul>
  </li>
</ul>

<ol>
  <li><strong>우선 구현할 기능 목록 작성하기</strong></li>
  <li>그래도 막막하다면,,
    <ul>
      <li>우선 일단 구현하고, 도메인 지식을 쌓는다</li>
      <li>이후에 구현한 코드를 버리고, 다시 기능 목록 작성 및 TDD 구현으로 시작한다.</li>
      <li>코드를 버리는 것을 아까워 하지 마라!</li>
      <li>아무것도 없는 상태에서 새롭게 구현하는 것이 레거시 코드를 리팩토링 하는 것보다 쉽다</li>
    </ul>
  </li>
</ol>

<h3 id="실제-자동차-게임-구현해보기">실제 자동차 게임 구현해보기</h3>

<ol>
  <li>일단 구현해보기</li>
  <li>TDD가 가능한 부분을 찾아서 단위 테스트 하기
    <ul>
      <li>자동차 이동 유무 등등</li>
    </ul>
  </li>
  <li>테스트하기 어려운 부분을 찾아서 가능한 구조로 개선하기
    <ul>
      <li>어떻게 판단하느냐?
        <ul>
          <li>Object Graph에서 다른 Object에 의존하지 않는 가장 마지막 노드를 찾는다.</li>
          <li>예) RacingMain → RacingGame → Car에서 Car 가 테스트 가능 한가?</li>
          <li>만약 Car에서 랜덤 인풋을 사용한다면 테스트하기 어렵다.</li>
        </ul>
      </li>
      <li>해결책
        <ul>
          <li>테스트가 어려운 코드의 의존관계를 object graph의 상위로 이동한다.</li>
          <li>즉, 언젠가는 테스트 하기 어려운 코드가 생기지만, 테스트 할 수 있는 영역이 넓어진다</li>
        </ul>
      </li>
    </ul>
  </li>
</ol>

<p><img src="TDD,%20%E1%84%85%E1%85%B5%E1%84%91%E1%85%A6%E1%86%A8%E1%84%90%E1%85%A9%E1%84%85%E1%85%B5%E1%86%BC%E1%84%8B%E1%85%B5%E1%84%85%E1%85%A1%E1%86%AB%20eebf5e3b124e4a9cb8805add9639afcf/_2021-02-16__12.13.25.png" alt="TDD,%20%E1%84%85%E1%85%B5%E1%84%91%E1%85%A6%E1%86%A8%E1%84%90%E1%85%A9%E1%84%85%E1%85%B5%E1%86%BC%E1%84%8B%E1%85%B5%E1%84%85%E1%85%A1%E1%86%AB%20eebf5e3b124e4a9cb8805add9639afcf/_2021-02-16__12.13.25.png" /></p>

<ul>
  <li>테스트하기 어려운 코드들
    <ul>
      <li>내부 API
        <ul>
          <li>외부 세계 : 외부 REST API, 데베 API</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="라이브-코딩으로-tdd-학습하기">라이브 코딩으로 TDD 학습하기</h2>

<hr />

<ol>
  <li>
    <p>먼저 Test Code를 작성한다</p>

    <ul>
      <li>이때 당연하게 컴파일 에러가 생긴다</li>
    </ul>
  </li>
  <li>
    <p>우선 존재하는 컴파일 에러를 모두 해결한다.</p>

    <ul>
      <li>이후에 실행해보면 우선 테스트는 실패한다! (1단계 : 실패하는 테스트)</li>
    </ul>
  </li>
  <li>이후에 우선 테스트를 패스하도록 한다.
    <ul>
      <li>제대로된 로직을 구현하지 않아도 꼼수를 통해서 우선 패스 하도록 한다</li>
      <li>최대한 초록불을 빨리 보자! (2단계 : 테스트 패스)</li>
    </ul>
  </li>
  <li>리팩토링 하도록 한다
    <ul>
      <li>이름 바꾸기 등등</li>
    </ul>

    <p>처음에만 ctrl shitf R이고 이후에는 ctrl R 만 누르면 직전 코드를 실행한다.</p>
  </li>
  <li>추가 다른 경우 테스트를 추가했을 때 실패하게 된다. 이때 이제 로직을 점차적으로 수정해간다.
    <ul>
      <li>설계 개선을 고민한다!!</li>
      <li>이때 설계를 개선한다.</li>
      <li>이때 생각을 바꾸는 과정을 거치는 것이다. (어렵다.. ㅠ)</li>
    </ul>

    <p>테스트 코드도 리팩토링이 필요하다 ! 중복을 없애고 더 효율적으로 개선하라.</p>
  </li>
</ol>

<p>만약 프로덕션 코드를 구현하는 도중에 크게 리팩토링 해야할 부분들이 보이면 꾹 참고 다음에 해야할까? 까먹으면 어쩌죠?</p>
<ul>
  <li>TODO 리스트를 만들어서 지속적으로 업데이트 하는 것을 추천 한다.</li>
  <li>처음에 한번만 만들어서 그것만 해치우는 것이 아니라 중간에 생긴 것들을 추가하여 구현하도록 한다.</li>
</ul>

<p>안좋은 커밋 습관이 컴파일 되지 않는 코드를 커밋하는 것이다. 
기본 규칙은 반드시 컴파일 되는 코드를 커밋하는 것이다. 
리팩토링 연습을 위한 커밋 단위도 추천한다 
→ 대대적인 리팩토링을 하기 전에 커밋을 하여, 실패했을 경우 다시 되돌려서 다시 리팩토링을 할 수 있으니까!</p>

	  ]]></description>
	</item>


</channel>
</rss>
